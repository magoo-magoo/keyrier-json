{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/query/QueryEditor.tsx"],"names":["react_ace__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react_ace__WEBPACK_IMPORTED_MODULE_0___default","n","d","__webpack_exports__","a","r","react__WEBPACK_IMPORTED_MODULE_0__","react_redux__WEBPACK_IMPORTED_MODULE_1__","actions_actions__WEBPACK_IMPORTED_MODULE_2__","components_common_DeferredAceEditor__WEBPACK_IMPORTED_MODULE_3__","store_selectors__WEBPACK_IMPORTED_MODULE_4__","components_common_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__","scheduler__WEBPACK_IMPORTED_MODULE_6__","connect","state","queryText","getQueryText","mode","getQueryMode","currentEditorTheme","getEditorTheme","setQuery","updateQuery","withErrorBoundary","memo","_ref","onChange","useCallback","unstable_runWithPriority","unstable_UserBlockingPriority","theme","name","fontSize","highlightActiveLine","value","minLines","maxLines","showPrintMargin","editorProps","$blockScrolling","Infinity","setOptions","dragEnabled","width","debounceChangePeriod"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,KAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAAG,EAAAC,EAAA,sBAAAH,EAAAI,IAAAL,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,uCCAAA,EAAAM,EAAAF,GAAA,IAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IA8Dec,sBANS,SAACC,GAAD,MAAuB,CAC7CC,UAAWC,YAAaF,GACxBG,KAAMC,YAAaJ,GACnBK,mBAAoBC,YAAeN,KAKnC,CAAEO,SAAUC,KAFCT,CAGbU,YAAkBC,eA9CW,SAAAC,GAAuD,IAApDJ,EAAoDI,EAApDJ,SAAUN,EAA0CU,EAA1CV,UAAWE,EAA+BQ,EAA/BR,KAAME,EAAyBM,EAAzBN,mBACrDO,EAAWC,sBACf,SAACvB,GACKW,IAAcX,GAChBwB,mCAAyBC,gCAA+B,kBAAMR,EAASjB,MAG3E,CAACiB,EAAUN,IAGb,OACET,EAAA,cAAAA,EAAA,cACEA,EAAA,wCAAkBW,EAAlB,WACAX,EAAA,cAACG,EAAA,EAAD,CACEQ,KAAe,eAATA,EAAwB,aAAe,QAC7Ca,MAAOX,EACPY,KAAK,iBACLL,SAAUA,EACVM,SAAU,GACVC,qBAAqB,EACrBC,MAAOnB,EACPoB,SAAU,GACVC,SAAU,GACVC,iBAAiB,EACjBC,YAAa,CACXC,gBAAiBC,KAEnBC,WAAY,CACVC,aAAa,GAEfC,MAAO,OACPC,qBAAsB","file":"static/js/QueryEditor.b8e8021a.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { updateQuery } from 'actions/actions'\nimport { RootState, QueryMode } from 'state/State'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getQueryText, getQueryMode, getEditorTheme } from 'store/selectors'\nimport { memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { unstable_runWithPriority, unstable_UserBlockingPriority } from 'scheduler'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n  setQuery: typeof updateQuery\n  queryText: string\n  currentEditorTheme: EditorTheme\n  mode: QueryMode\n}\n\nconst QueryEditor: FC<Props> = ({ setQuery, queryText, mode, currentEditorTheme }) => {\n  const onChange = useCallback(\n    (a: string) => {\n      if (queryText !== a) {\n        unstable_runWithPriority(unstable_UserBlockingPriority, () => setQuery(a))\n      }\n    },\n    [setQuery, queryText]\n  )\n\n  return (\n    <>\n      <h3>2. Type your {mode} query:</h3>\n      <AceEditor\n        mode={mode === 'Javascript' ? 'javascript' : 'mysql'}\n        theme={currentEditorTheme}\n        name=\"queryAceEditor\"\n        onChange={onChange}\n        fontSize={16}\n        highlightActiveLine={true}\n        value={queryText}\n        minLines={10}\n        maxLines={25}\n        showPrintMargin={false}\n        editorProps={{\n          $blockScrolling: Infinity,\n        }}\n        setOptions={{\n          dragEnabled: true,\n        }}\n        width={'100%'}\n        debounceChangePeriod={250}\n      />\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  queryText: getQueryText(state),\n  mode: getQueryMode(state),\n  currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { setQuery: updateQuery }\n)(withErrorBoundary(memo(QueryEditor)))\n"],"sourceRoot":""}