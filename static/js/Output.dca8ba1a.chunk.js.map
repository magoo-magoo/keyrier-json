{"version":3,"sources":["components/output/Output.module.scss","components/common/Loading.module.scss","components/common/Loading.tsx","components/output/TableAdvancedOptions.tsx","components/output/OutputTableView.tsx","components/output/OutputTable.tsx","components/output/JsonView.tsx","components/output/Output.tsx"],"names":["module","exports","Loading","props","className","Styles","loader","ReactSelect","lazy","connect","state","data","getOutputarray","displayedColumns","getdisplayedColumns","columns","getColumns","groupBy","getGroupBy","onColumnsChange","updateTableColumns","setTableGroupBy","updateTableGroupBy","memo","withErrorBoundary","useToggleState","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","useCallback","cols","Array","mapped","map","c","value","handleExport","a","xlsx","workBook","utils","book_new","workSheet","json_to_sheet","x","_","pick","header","book_append_sheet","writeFile","Date","toISOString","handleGroupChange","e","target","length","columnOptions","k","label","Button","color","block","onClick","Collapse","isOpen","name","id","onChange","key","fallback","componentName","options","isMulti","ReactJson","ReactTable","defaultFilterMethod","filter","row","containsIgnoreCase","customToString","useState","detailsCellValue","setDetailsCellValue","getTdProps","rowInfo","column","__","original","aggregated","handleCloseDetail","isArray","every","undefined","Object","keys","tableColumnConfig","Aggregated","Cell","cellProps","Header","headerClassName","accessor","noDataText","arrayElementName","defaultPageSize","filterable","pivotBy","Modal","toggle","size","ModalHeader","ModalBody","src","iconStyle","indentWidth","onAdd","onDelete","onEdit","onSelect","prev","next","deepEqual","getOutputObject","isModalOpen","getisOutputTableModalOpen","toggleModal","toggleOutputTableModal","ModalFooter","outline","errorStyles","border","noop","searchTerm","getOutputSearchTerm","match","getOutputSearchMatch","onSearchChange","updateSearchTerm","handlechange","style","debounceTimeout","placeholder","errorMessage","getOutputErrorMessage","getOutputIsArray","activeTab","getOutputActiveTab","objSize","getOutputObjectSize","setActiveTab","updateOutputTabSelection","handleActiveTable","handleActiveRawJson","hidden","Alert","classNames","active","styles","pointer","TabContent","TabPane","tabId","Badge","pill","prettyPrintBytes"],"mappings":"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","file":"static/js/Output.dca8ba1a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointer\":\"Output_pointer__Fhc2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1SW_q\",\"spin\":\"Loading_spin__HjhGY\"};","import * as React from 'react'\nimport Styles from './Loading.module.scss'\n\nexport const Loading = (props: { componentName: string }) => (\n  <div className={Styles.loader}>{process.env.NODE_ENV === 'production' ? '' : props.componentName}</div>\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateTableColumns, updateTableGroupBy } from 'actions/actions'\nimport { itemType, RootState } from 'state/State'\nimport { ValueType } from 'react-select/lib/types'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useToggleState } from 'hooks/hooks'\nimport { Button, Collapse } from 'reactstrap'\nimport { memo, useCallback, Suspense, ChangeEvent } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { lazy, FC } from 'react'\nimport { Loading } from 'components/common/Loading'\nimport _ from 'lodash'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n    data: itemType[]\n    displayedColumns: string[]\n    groupBy: string[]\n    columns: string[]\n    onColumnsChange: typeof updateTableColumns\n    setTableGroupBy: typeof updateTableGroupBy\n}\n\nconst TableAdvancedOptions: FC<Props> = ({ onColumnsChange, columns, setTableGroupBy, data, displayedColumns }) => {\n    const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n    const handleColumnChange = useCallback(\n        (cols: ValueType<{}> | undefined | null) => {\n            if (cols instanceof Array) {\n                const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n                onColumnsChange(mapped)\n            }\n        },\n        [onColumnsChange]\n    )\n\n    const handleExport = useCallback(async () => {\n        const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n        const workBook = xlsx.utils.book_new()\n        const workSheet = xlsx.utils.json_to_sheet(data.map(x => _.pick(x, displayedColumns)), {\n            header: displayedColumns,\n        })\n        xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n        xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`)\n    }, [displayedColumns, data])\n\n    const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [\n        setTableGroupBy,\n    ])\n\n    if (columns.length <= 0) {\n        return <></>\n    }\n\n    const columnOptions = columns.map(k => ({ value: k, label: k }))\n\n    return (\n        <div className=\"row\">\n            <div className=\"col\">\n                <Button className={'float-left'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n                    {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n                </Button>\n                <Collapse isOpen={optionsCollapsed}>\n                    <select\n                        className=\"form-control-lg form-control\"\n                        name=\"select\"\n                        id=\"groupingSelect\"\n                        onChange={handleGroupChange}\n                    >\n                        <option key={'Group by...'}>Group by...</option>\n                        {displayedColumns.map(key => (\n                            <option key={key}>{key}</option>\n                        ))}\n                    </select>\n                    <Button color={'success'} onClick={handleExport}>\n                        Export to Excel (.xlsx)\n                    </Button>\n                    <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n                        <ReactSelect\n                            options={columnOptions}\n                            value={displayedColumns.map(k => ({\n                                value: k,\n                                label: k,\n                            }))}\n                            isMulti={true}\n                            onChange={handleColumnChange}\n                        />\n                    </Suspense>\n                </Collapse>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    { onColumnsChange: updateTableColumns, setTableGroupBy: updateTableGroupBy }\n)(memo(withErrorBoundary(TableAdvancedOptions)))\n","import * as React from 'react'\nimport { customToString, containsIgnoreCase } from 'core/converters/string'\nimport { connect } from 'react-redux'\nimport TableAdvancedOptions from './TableAdvancedOptions'\nimport { Column, Filter, RowInfo } from 'react-table'\nimport { itemType, RootState } from 'state/State'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useState, Suspense, lazy, memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { Modal, ModalProps, ModalHeader, ModalBody } from 'reactstrap'\nimport deepEqual from 'fast-deep-equal'\n\nimport 'react-table/react-table.css'\nimport { Loading } from 'components/common/Loading'\nimport { arrayElementName } from 'models/array'\n\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\nconst ReactTable = lazy(() => import(/* webpackChunkName: \"react-table\" */ 'react-table'))\n\ntype Props = {\n  data: unknown[]\n  displayedColumns: string[]\n  groupBy?: string[]\n}\n\nexport const OutputTableView: FC<Props> = ({ data, displayedColumns, groupBy }) => {\n  const [detailsCellValue, setDetailsCellValue] = useState(null as itemType | null)\n\n  const getTdProps = useCallback(\n    (_: any, rowInfo?: RowInfo, column?: Column | undefined, __?: any) => ({\n      onClick: (e: MouseEvent, original: () => void) => {\n        if (rowInfo && rowInfo.aggregated) {\n          original()\n        } else if (e && column && column.id && rowInfo && rowInfo.row) {\n          setDetailsCellValue(rowInfo.row[column.id])\n        }\n      },\n    }),\n    [setDetailsCellValue]\n  )\n\n  const handleCloseDetail = useCallback(() => setDetailsCellValue(null), [setDetailsCellValue])\n\n  if (\n    !data ||\n    !Array.isArray(data) ||\n    data.length === 0 ||\n    data.every(e => e === null || e === undefined || (typeof e === 'object' && Object.keys(e).length === 0))\n  ) {\n    return <div />\n  }\n\n  const tableColumnConfig = displayedColumns.map(\n    key =>\n      ({\n        Aggregated: () => (row: any) => (row ? row.value : ''),\n        Cell: (cellProps: any) => {\n          const cellContent = cellProps !== null && cellProps !== undefined ? customToString(cellProps.value) : ''\n          return cellContent\n        },\n        Header: key,\n        headerClassName: 'data-test-id-column-name',\n        accessor: key,\n        className: 'text-center btn btn-link data-test-id-cell-data',\n      } as const)\n  )\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <TableAdvancedOptions />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Suspense fallback={<Loading componentName=\"ReactTable\" />}>\n            <ReactTable\n              noDataText=\"FRACKING EMPTY!\"\n              className=\"data-test-id-output-table -highlight\"\n              data={data.map(e => (!!e ? (typeof e === 'object' ? e : { [arrayElementName]: e }) : {}))}\n              defaultPageSize={20}\n              columns={tableColumnConfig}\n              filterable={true}\n              pivotBy={groupBy}\n              defaultFilterMethod={defaultFilterMethod}\n              getTdProps={getTdProps}\n            />\n          </Suspense>\n        </div>\n      </div>\n      <div id=\"data-test-id-output-table-length\" className=\"mx-3 align-items-center justify-content-end d-flex\">\n        <h4>Number of elements: {data.length}</h4>\n      </div>\n      <Modal<ModalProps> isOpen={!!detailsCellValue} toggle={handleCloseDetail} size=\"lg\">\n        <ModalHeader>Details</ModalHeader>\n        <ModalBody>\n          {typeof detailsCellValue === 'object' ? (\n            <Suspense fallback={<Loading componentName=\"ReactJson\" />}>\n              <ReactJson\n                src={detailsCellValue ? detailsCellValue : {}}\n                name=\"data\"\n                iconStyle=\"triangle\"\n                indentWidth={8}\n                onAdd={() => null}\n                onDelete={() => null}\n                onEdit={() => null}\n                onSelect={() => null}\n              />\n            </Suspense>\n          ) : (\n            detailsCellValue\n          )}\n        </ModalBody>\n      </Modal>\n    </>\n  )\n}\n\nconst defaultFilterMethod = (filter: Filter, row: itemType) =>\n  filter && row && containsIgnoreCase(customToString(row[filter.id]), filter.value)\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    data: getOutputarray(state),\n    displayedColumns: getdisplayedColumns(state),\n    columns: getColumns(state),\n    groupBy: getGroupBy(state),\n  }\n}\n\nexport default connect(mapStateToProps)(withErrorBoundary(memo(OutputTableView, (prev, next) => deepEqual(prev, next))))\n","import * as React from 'react'\nimport './OutputTable.scss'\nimport { connect } from 'react-redux'\nimport OutputTableView from './OutputTableView'\nimport { toggleOutputTableModal } from 'actions/actions'\nimport { getisOutputTableModalOpen, getOutputObject } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap'\nimport { memo, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\n\ninterface Props {\n  toggleModal: typeof toggleOutputTableModal\n  isModalOpen: boolean\n}\n\nconst OutputTable: FC<Props> = ({ toggleModal, isModalOpen }) => {\n  return (\n    <div className=\"output-table\">\n      <Modal isOpen={isModalOpen} toggle={toggleModal} className=\"mw-100\">\n        <ModalHeader toggle={toggleModal}>Table view</ModalHeader>\n        <ModalBody>\n          <OutputTableView />\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Button block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n            Display results table fullscreen\n          </Button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <OutputTableView />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  data: getOutputObject(state),\n  isModalOpen: getisOutputTableModalOpen(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    toggleModal: toggleOutputTableModal,\n  }\n)(withErrorBoundary(memo(OutputTable)))\n","import * as React from 'react'\nimport { getOutputObject, getOutputSearchTerm, getOutputSearchMatch } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { connect } from 'react-redux'\nimport { DebounceInput } from 'react-debounce-input'\nimport { updateSearchTerm } from 'actions/actions'\nimport { Suspense, lazy, memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport deepEqual from 'fast-deep-equal'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n  src: object | null\n  searchTerm: string | undefined\n  match: boolean\n  onSearchChange: typeof updateSearchTerm\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match }) => {\n  const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange])\n  return (\n    <div id=\"jsonView\">\n      <DebounceInput\n        style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n        value={searchTerm}\n        className=\"form-control\"\n        onChange={handlechange}\n        debounceTimeout={500}\n        placeholder=\"Type your search term...\"\n      />\n      <Suspense fallback={<div>Loading...</div>}>\n        <ReactJson\n          src={src ? src : {}}\n          name=\"data\"\n          iconStyle=\"triangle\"\n          indentWidth={8}\n          onAdd={noop}\n          onDelete={noop}\n          onEdit={noop}\n          onSelect={noop}\n        />\n      </Suspense>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    src: getOutputObject(state),\n    searchTerm: getOutputSearchTerm(state),\n    match: getOutputSearchMatch(state),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { onSearchChange: updateSearchTerm }\n)(withErrorBoundary(memo(JsonView, (prev, next) => deepEqual(prev, next))))\n","import styles from './Output.module.scss'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport OutputTable from './OutputTable'\nimport { RootState, tabType } from 'state/State'\n\nimport classNames from 'classnames'\n\nimport { getOutputErrorMessage, getOutputIsArray, getOutputActiveTab, getOutputObjectSize } from 'store/selectors'\nimport JsonView from './JsonView'\nimport { updateOutputTabSelection } from 'actions/actions'\nimport { TabContent, TabPane, Alert, Badge } from 'reactstrap'\nimport { memo, useCallback, FC } from 'react'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\n\ninterface Props {\n  isArray: boolean\n  activeTab: tabType\n  objSize: number\n  setActiveTab: typeof updateOutputTabSelection\n  errorMessage?: string\n}\n\nconst Output: FC<Props> = ({ isArray, errorMessage, activeTab, setActiveTab, objSize }) => {\n  const handleActiveTable = useCallback(() => setActiveTab('Table'), [setActiveTab])\n  const handleActiveRawJson = useCallback(() => setActiveTab('RawJson'), [setActiveTab])\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-10 offset-sm-2\">\n          <h3>3. View your results:</h3>\n        </div>\n      </div>\n      <div hidden={!errorMessage}>\n        <div className=\"row\">\n          <div className=\"col-sm-10 offset-sm-2\">\n            <Alert className=\"row align-items-center\" color=\"danger\">\n              <i className=\"material-icons mr-2\">error</i>\n              <span>{errorMessage}</span>\n            </Alert>\n          </div>\n        </div>\n      </div>\n      <>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ul className=\"nav nav-tabs\">\n              <li className=\"nav-item\">\n                <button\n                  className={classNames({\n                    active: activeTab === 'RawJson',\n                    'nav-link': true,\n                    [styles.pointer]: true,\n                  })}\n                  onClick={handleActiveRawJson}\n                >\n                  Raw JSON view\n                </button>\n              </li>\n              <li className=\"nav-item\" hidden={!isArray}>\n                <button\n                  className={classNames({\n                    active: activeTab === 'Table',\n                    'nav-link': true,\n                    [styles.pointer]: true,\n                  })}\n                  onClick={handleActiveTable}\n                >\n                  Table view\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"RawJson\">\n            <div className=\"row\">\n              <div className=\"col-sm-2 pt-5\">\n                <h3>\n                  <Badge id=\"badgeSize\" color=\"info\" pill={true}>\n                    {prettyPrintBytes(objSize)}\n                  </Badge>\n                </h3>\n              </div>\n              <div className=\"col-sm-10\">\n                <JsonView />\n              </div>\n            </div>\n          </TabPane>\n          <TabPane tabId=\"Table\">\n            <OutputTable />\n          </TabPane>\n        </TabContent>\n      </>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  errorMessage: getOutputErrorMessage(state),\n  isArray: getOutputIsArray(state),\n  activeTab: getOutputActiveTab(state),\n  objSize: getOutputObjectSize(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { setActiveTab: updateOutputTabSelection }\n)(memo(withErrorBoundary(Output)))\n"],"sourceRoot":""}