{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/query/QueryEditor.tsx"],"names":["connect","state","queryText","getQueryText","mode","getQueryMode","currentEditorTheme","getEditorTheme","setQuery","updateQuery","withErrorBoundary","memo","withPerformance","onChange","useCallback","a","unstable_runWithPriority","unstable_IdlePriority","theme","name","fontSize","highlightActiveLine","value","minLines","maxLines","showPrintMargin","editorProps","$blockScrolling","Infinity","setOptions","dragEnabled","width","debounceChangePeriod"],"mappings":"oHAAA,iH,iCCAA,2EA8DeA,sBANS,SAACC,GAAD,MAAuB,CAC3CC,UAAWC,YAAaF,GACxBG,KAAMC,YAAaJ,GACnBK,mBAAoBC,YAAeN,KAGC,CAAEO,SAAUC,KAArCT,CACXU,YAAkBC,eAAKC,YA3CI,SAAC,GAAuD,IAArDJ,EAAoD,EAApDA,SAAUN,EAA0C,EAA1CA,UAAWE,EAA+B,EAA/BA,KAAME,EAAyB,EAAzBA,mBACnDO,EAAWC,sBACb,SAACC,GACOb,IAAca,GACdC,mCAAyBC,wBAAuB,kBAAMT,EAASO,MAGvE,CAACP,EAAUN,IAGf,OACI,gCACI,gBAAC,IAAD,CACIE,KAAe,eAATA,EAAwB,aAAe,QAC7Cc,MAAOZ,EACPa,KAAK,iBACLN,SAAUA,EACVO,SAAU,GACVC,qBAAqB,EACrBC,MAAOpB,EACPqB,SAAU,GACVC,SAAU,GACVC,iBAAiB,EACjBC,YAAa,CACTC,gBAAiBC,KAErBC,WAAY,CACRC,aAAa,GAEjBC,MAAO,OACPC,qBAAsB,QAakB","file":"static/js/QueryEditor.94b67184.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { updateQuery } from 'actions/actions'\nimport { RootState, QueryMode } from 'state/State'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getQueryText, getQueryMode, getEditorTheme } from 'store/selectors'\nimport { memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { unstable_runWithPriority, unstable_IdlePriority } from 'scheduler'\nimport { EditorTheme } from 'themes/themes'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    setQuery: typeof updateQuery\n    queryText: string\n    currentEditorTheme: EditorTheme\n    mode: QueryMode\n}\n\nconst QueryEditor: FC<Props> = ({ setQuery, queryText, mode, currentEditorTheme }) => {\n    const onChange = useCallback(\n        (a: string) => {\n            if (queryText !== a) {\n                unstable_runWithPriority(unstable_IdlePriority, () => setQuery(a))\n            }\n        },\n        [setQuery, queryText]\n    )\n\n    return (\n        <>\n            <AceEditor\n                mode={mode === 'Javascript' ? 'javascript' : 'mysql'}\n                theme={currentEditorTheme}\n                name=\"queryAceEditor\"\n                onChange={onChange}\n                fontSize={16}\n                highlightActiveLine={true}\n                value={queryText}\n                minLines={10}\n                maxLines={25}\n                showPrintMargin={false}\n                editorProps={{\n                    $blockScrolling: Infinity,\n                }}\n                setOptions={{\n                    dragEnabled: true,\n                }}\n                width={'100%'}\n                debounceChangePeriod={500}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    queryText: getQueryText(state),\n    mode: getQueryMode(state),\n    currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(mapStateToProps, { setQuery: updateQuery })(\n    withErrorBoundary(memo(withPerformance(QueryEditor, 'QueryEditor')))\n)\n"],"sourceRoot":""}