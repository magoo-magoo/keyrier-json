{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/source/SourceEditor.tsx"],"names":["connect","state","sourceText","getSourceText","currentEditorTheme","getEditorTheme","onChange","updateSource","withErrorBoundary","memo","withPerformance","onChangeCallback","useCallback","s","unstable_runWithPriority","unstable_IdlePriority","mode","theme","name","fontSize","cursorStart","showPrintMargin","showGutter","highlightActiveLine","value","debounceChangePeriod","minLines","maxLines","wrapEnabled","setOptions","showLineNumbers","editorProps","$blockScrolling","Infinity","annotations","width","height"],"mappings":"oHAAA,iH,iCCAA,2EA6DeA,sBALS,SAACC,GAAD,MAAuB,CAC3CC,WAAYC,YAAcF,GAC1BG,mBAAoBC,YAAeJ,KAGC,CAAEK,SAAUC,KAArCP,CACXQ,YAAkBC,eAAKC,YA5CK,SAAC,GAAkD,IAAhDJ,EAA+C,EAA/CA,SAAUJ,EAAqC,EAArCA,WAAYE,EAAyB,EAAzBA,mBAC/CO,EAAmBC,sBACrB,SAACC,GACOX,IAAeW,GACfC,mCAAyBC,wBAAuB,kBAAMT,EAASO,MAGvE,CAACP,EAAUJ,IAEf,OACI,gCACI,gBAAC,IAAD,CACIc,KAAK,OACLC,MAAOb,EACPc,KAAK,kBACLZ,SAAUK,EACVQ,SAAU,GACVC,YAAa,EACbC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,MAAOtB,EACPuB,qBAAsB,IACtBC,SAAU,GACVC,SAAU,GACVC,aAAa,EACbC,WAAY,CACRC,iBAAiB,GAErBC,YAAa,CAAEC,gBAAiBC,KAChCC,YAAa,GACbC,MAAO,OACPC,OAAQ,WAYiC","file":"static/js/SourceEditor.3e8ce31f.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateSource } from 'actions/actions'\nimport { RootState } from 'state/State'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getSourceText, getEditorTheme } from 'store/selectors'\nimport { memo, FC, useCallback } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { EditorTheme } from 'themes/themes'\nimport { unstable_runWithPriority, unstable_IdlePriority } from 'scheduler'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    onChange: typeof updateSource\n    sourceText: string\n    currentEditorTheme: EditorTheme\n}\n\nconst SourceEditor: FC<Props> = ({ onChange, sourceText, currentEditorTheme }) => {\n    const onChangeCallback = useCallback(\n        (s: string) => {\n            if (sourceText !== s) {\n                unstable_runWithPriority(unstable_IdlePriority, () => onChange(s))\n            }\n        },\n        [onChange, sourceText]\n    )\n    return (\n        <>\n            <AceEditor\n                mode=\"json\"\n                theme={currentEditorTheme}\n                name=\"sourceAceEditor\"\n                onChange={onChangeCallback}\n                fontSize={16}\n                cursorStart={1}\n                showPrintMargin={false}\n                showGutter={true}\n                highlightActiveLine={true}\n                value={sourceText}\n                debounceChangePeriod={1000}\n                minLines={35}\n                maxLines={35}\n                wrapEnabled={false}\n                setOptions={{\n                    showLineNumbers: true,\n                }}\n                editorProps={{ $blockScrolling: Infinity }}\n                annotations={[]}\n                width={'100%'}\n                height={'100%'}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    sourceText: getSourceText(state),\n    currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(mapStateToProps, { onChange: updateSource })(\n    withErrorBoundary(memo(withPerformance(SourceEditor, 'SourceEditor')))\n)\n"],"sourceRoot":""}