{"version":3,"sources":["components/output/Output.module.scss","components/common/Loading.module.scss","components/common/Loading.tsx","components/output/TableAdvancedOptions.tsx","components/output/OutputTableView.tsx","components/output/OutputTable.tsx","components/output/JsonView.tsx","components/output/Output.tsx"],"names":["module","exports","connect","state","debugMode","getDebugMode","componentName","className","Styles","loader","ReactSelect","lazy","data","getOutputarray","displayedColumns","getdisplayedColumns","columns","getColumns","groupBy","getGroupBy","onColumnsChange","updateTableColumns","setTableGroupBy","updateTableGroupBy","memo","withErrorBoundary","withPerformance","useToggleState","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","useCallback","cols","Array","mapped","map","c","value","handleExport","a","xlsx","workBook","utils","book_new","workSheet","json_to_sheet","x","_","pick","header","book_append_sheet","writeFile","Date","toISOString","handleGroupChange","e","target","length","columnOptions","k","label","Button","color","block","onClick","Collapse","isOpen","name","id","onChange","key","fallback","options","isMulti","ReactJson","ReactTable","defaultFilterMethod","filter","row","containsIgnoreCase","customToString","useState","detailsCellValue","setDetailsCellValue","getTdProps","rowInfo","column","__","original","aggregated","handleCloseDetail","isArray","every","undefined","Object","keys","tableColumnConfig","Aggregated","Cell","cellProps","Header","headerClassName","accessor","noDataText","arrayElementName","filterable","pageSize","pageSizeOptions","pivotBy","Modal","toggle","size","ModalHeader","ModalBody","src","iconStyle","indentWidth","onAdd","onDelete","onEdit","onSelect","prev","next","deepEqual","getOutputObject","isModalOpen","getisOutputTableModalOpen","toggleModal","toggleOutputTableModal","ModalFooter","outline","errorStyles","border","noop","searchTerm","getOutputSearchTerm","match","getOutputSearchMatch","getOutputObjectSize","onSearchChange","updateSearchTerm","bigSize","setBigSize","isTooBig","handlechange","style","debounceTimeout","placeholder","FormGroup","Label","for","prettyPrintBytes","CustomInput","type","steps","min","max","parseInt","currentTarget","errorMessage","getOutputErrorMessage","getOutputIsArray","activeTab","getOutputActiveTab","objSize","setActiveTab","updateOutputTabSelection","handleActiveTable","handleActiveRawJson","Alert","classNames","active","styles","pointer","hidden","TabContent","TabPane","tabId","Badge","pill"],"mappings":"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","file":"static/js/Output.c12fdafd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointer\":\"Output_pointer__Fhc2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1SW_q\",\"spin\":\"Loading_spin__HjhGY\"};","import * as React from 'react'\nimport Styles from './Loading.module.scss'\nimport { connect } from 'react-redux'\nimport { getDebugMode } from 'store/selectors'\nimport { FC } from 'react'\n\ntype Props = {\n    componentName: string\n    debugMode: boolean\n}\nconst Loading: FC<Props> = ({ componentName, debugMode }) => (\n    <div className={Styles.loader}>{process.env.NODE_ENV === 'production' && !debugMode ? '' : componentName}</div>\n)\n\nexport default connect(state => ({ debugMode: getDebugMode(state) }))(Loading)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateTableColumns, updateTableGroupBy } from 'actions/actions'\nimport { itemType, RootState } from 'state/State'\nimport { ValueType } from 'react-select/lib/types'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useToggleState } from 'hooks/hooks'\nimport { Button, Collapse } from 'reactstrap'\nimport { memo, useCallback, Suspense, ChangeEvent } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { lazy, FC } from 'react'\nimport Loading from 'components/common/Loading'\nimport _ from 'lodash'\nimport { withPerformance } from 'core/logging/performance'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n    data: itemType[]\n    displayedColumns: string[]\n    groupBy: string[]\n    columns: string[]\n    onColumnsChange: typeof updateTableColumns\n    setTableGroupBy: typeof updateTableGroupBy\n}\n\nconst TableAdvancedOptions: FC<Props> = ({ onColumnsChange, columns, setTableGroupBy, data, displayedColumns }) => {\n    const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n    const handleColumnChange = useCallback(\n        (cols: ValueType<{}> | undefined | null) => {\n            if (cols instanceof Array) {\n                const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n                onColumnsChange(mapped)\n            }\n        },\n        [onColumnsChange]\n    )\n\n    const handleExport = useCallback(async () => {\n        const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n        const workBook = xlsx.utils.book_new()\n        const workSheet = xlsx.utils.json_to_sheet(\n            data.map(x => _.pick(x, displayedColumns)),\n            {\n                header: displayedColumns,\n            }\n        )\n        xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n        xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`)\n    }, [displayedColumns, data])\n\n    const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [\n        setTableGroupBy,\n    ])\n\n    if (columns.length <= 0) {\n        return <></>\n    }\n\n    const columnOptions = columns.map(k => ({ value: k, label: k }))\n\n    return (\n        <div className=\"row\">\n            <div className=\"col\">\n                <Button className={'float-left'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n                    {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n                </Button>\n                <Collapse isOpen={optionsCollapsed}>\n                    <select\n                        className=\"form-control-lg form-control\"\n                        name=\"select\"\n                        id=\"groupingSelect\"\n                        onChange={handleGroupChange}\n                    >\n                        <option key={'Group by...'}>Group by...</option>\n                        {displayedColumns.map(key => (\n                            <option key={key}>{key}</option>\n                        ))}\n                    </select>\n                    <Button color={'success'} onClick={handleExport}>\n                        Export to Excel (.xlsx)\n                    </Button>\n                    <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n                        <ReactSelect\n                            options={columnOptions}\n                            value={displayedColumns.map(k => ({\n                                value: k,\n                                label: k,\n                            }))}\n                            isMulti={true}\n                            onChange={handleColumnChange}\n                        />\n                    </Suspense>\n                </Collapse>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onColumnsChange: updateTableColumns, setTableGroupBy: updateTableGroupBy })(\n    memo(withErrorBoundary(withPerformance(TableAdvancedOptions, 'TableAdvancedOptions')))\n)\n","import 'react-table/react-table.css'\n\nimport * as React from 'react'\nimport { customToString, containsIgnoreCase } from 'core/converters/string'\nimport { connect } from 'react-redux'\nimport TableAdvancedOptions from './TableAdvancedOptions'\nimport { Column, Filter, RowInfo } from 'react-table'\nimport { itemType, RootState } from 'state/State'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useState, Suspense, lazy, memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { Modal, ModalProps, ModalHeader, ModalBody } from 'reactstrap'\nimport deepEqual from 'fast-deep-equal'\nimport Loading from 'components/common/Loading'\nimport { arrayElementName } from 'models/array'\nimport { withPerformance } from 'core/logging/performance'\n\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\nconst ReactTable = lazy(() => import(/* webpackChunkName: \"react-table\" */ 'react-table'))\n\ntype Props = {\n    data: unknown[]\n    displayedColumns: string[]\n    groupBy?: string[]\n}\n\nexport const OutputTableView: FC<Props> = ({ data, displayedColumns, groupBy }) => {\n    const [detailsCellValue, setDetailsCellValue] = useState(null as itemType | null)\n    const getTdProps = useCallback(\n        (_: any, rowInfo?: RowInfo, column?: Column | undefined, __?: any) => ({\n            onClick: (e: MouseEvent, original: () => void) => {\n                if (rowInfo && rowInfo.aggregated) {\n                    original()\n                } else if (e && column && column.id && rowInfo && rowInfo.row) {\n                    setDetailsCellValue(rowInfo.row[column.id])\n                }\n            },\n        }),\n        []\n    )\n\n    const handleCloseDetail = useCallback(() => setDetailsCellValue(null), [])\n\n    if (\n        !data ||\n        !Array.isArray(data) ||\n        data.length === 0 ||\n        data.every(e => e === null || e === undefined || (typeof e === 'object' && Object.keys(e).length === 0))\n    ) {\n        return <div />\n    }\n\n    const tableColumnConfig = displayedColumns.map(\n        key =>\n            ({\n                Aggregated: () => (row: any) => (row ? row.value : ''),\n                Cell: (cellProps: any) => {\n                    const cellContent =\n                        cellProps !== null && cellProps !== undefined ? customToString(cellProps.value) : ''\n                    return cellContent\n                },\n                Header: key,\n                headerClassName: 'data-test-id-column-name',\n                accessor: key,\n                className: 'text-center btn btn-link data-test-id-cell-data',\n            } as const)\n    )\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <TableAdvancedOptions />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Suspense fallback={<Loading componentName=\"ReactTable\" />}>\n                        <ReactTable\n                            noDataText=\"FRACKING EMPTY!\"\n                            className=\"data-test-id-output-table -highlight\"\n                            data={data.map(e => (!!e ? (typeof e === 'object' ? e : { [arrayElementName]: e }) : {}))}\n                            columns={tableColumnConfig}\n                            filterable={true}\n                            pageSize={10}\n                            pageSizeOptions={[10]}\n                            pivotBy={groupBy}\n                            defaultFilterMethod={defaultFilterMethod}\n                            getTdProps={getTdProps}\n                        />\n                    </Suspense>\n                </div>\n            </div>\n            <div id=\"data-test-id-output-table-length\" className=\"mx-3 align-items-center justify-content-end d-flex\">\n                <h4>Number of elements: {data.length}</h4>\n            </div>\n            <Modal<ModalProps> isOpen={!!detailsCellValue} toggle={handleCloseDetail} size=\"lg\">\n                <ModalHeader>Details</ModalHeader>\n                <ModalBody>\n                    {typeof detailsCellValue === 'object' ? (\n                        <Suspense fallback={<Loading componentName=\"ReactJson\" />}>\n                            <ReactJson\n                                src={detailsCellValue ? detailsCellValue : {}}\n                                name=\"data\"\n                                iconStyle=\"triangle\"\n                                indentWidth={8}\n                                onAdd={() => null}\n                                onDelete={() => null}\n                                onEdit={() => null}\n                                onSelect={() => null}\n                            />\n                        </Suspense>\n                    ) : (\n                        detailsCellValue\n                    )}\n                </ModalBody>\n            </Modal>\n        </>\n    )\n}\n\nconst defaultFilterMethod = (filter: Filter, row: itemType) =>\n    filter && row && containsIgnoreCase(customToString(row[filter.id]), filter.value)\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps)(\n    withErrorBoundary(memo(withPerformance(OutputTableView, 'OutputTableView'), (prev, next) => deepEqual(prev, next)))\n)\n","import * as React from 'react'\nimport './OutputTable.scss'\nimport { connect } from 'react-redux'\nimport OutputTableView from './OutputTableView'\nimport { toggleOutputTableModal } from 'actions/actions'\nimport { getisOutputTableModalOpen, getOutputObject } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap'\nimport { memo, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    toggleModal: typeof toggleOutputTableModal\n    isModalOpen: boolean\n}\n\nconst OutputTable: FC<Props> = ({ toggleModal, isModalOpen }) => {\n    return (\n        <div className=\"output-table\">\n            <Modal isOpen={isModalOpen} toggle={toggleModal} className=\"mw-100\">\n                <ModalHeader toggle={toggleModal}>Table view</ModalHeader>\n                <ModalBody>\n                    <OutputTableView />\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                </ModalFooter>\n            </Modal>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Button block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n                        Display results table fullscreen\n                    </Button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <OutputTableView />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    data: getOutputObject(state),\n    isModalOpen: getisOutputTableModalOpen(state),\n})\n\nexport default connect(mapStateToProps, {\n    toggleModal: toggleOutputTableModal,\n})(withErrorBoundary(memo(withPerformance(OutputTable, 'OutputTable'))))\n","import * as React from 'react'\nimport {\n    getOutputObject,\n    getOutputSearchTerm,\n    getOutputSearchMatch,\n    getOutputObjectSize,\n    getDebugMode,\n} from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { connect } from 'react-redux'\nimport { DebounceInput } from 'react-debounce-input'\nimport { updateSearchTerm } from 'actions/actions'\nimport { Suspense, lazy, memo, useCallback, FC, useState } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport deepEqual from 'fast-deep-equal'\nimport { FormGroup, Label, CustomInput } from 'reactstrap'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withPerformance } from 'core/logging/performance'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n    src: object | null\n    searchTerm: string | undefined\n    match: boolean\n    onSearchChange: typeof updateSearchTerm\n    size: number\n    debugMode: boolean\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match, size, debugMode }) => {\n    const [bigSize, setBigSize] = useState(4683932)\n    const isTooBig = size > bigSize\n    const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange])\n    return (\n        <div id=\"jsonView\">\n            <DebounceInput\n                style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n                value={searchTerm}\n                className=\"form-control\"\n                onChange={handlechange}\n                debounceTimeout={500}\n                placeholder=\"Type your search term...\"\n            />\n            <Suspense fallback={<div>Loading...</div>}>\n                {debugMode ? (\n                    <FormGroup>\n                        <Label for=\"exampleCustomRange\">heavy object size: {prettyPrintBytes(bigSize)}</Label>\n                        <CustomInput\n                            type=\"range\"\n                            id=\"exampleCustomRange\"\n                            name=\"customRange\"\n                            value={bigSize}\n                            steps={1024 * 100}\n                            min={1024 * 100}\n                            max={1024 * 1024}\n                            onChange={e => setBigSize(parseInt(e.currentTarget.value, 10))}\n                        />\n                    </FormGroup>\n                ) : (\n                    <></>\n                )}\n                {isTooBig ? (\n                    <></>\n                ) : (\n                    <ReactJson\n                        src={src ? src : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={noop}\n                        onDelete={noop}\n                        onEdit={noop}\n                        onSelect={noop}\n                    />\n                )}\n            </Suspense>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        src: getOutputObject(state),\n        searchTerm: getOutputSearchTerm(state),\n        match: getOutputSearchMatch(state),\n        size: getOutputObjectSize(state),\n        debugMode: getDebugMode(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onSearchChange: updateSearchTerm })(\n    withErrorBoundary(memo(withPerformance(JsonView, 'JsonView'), (prev, next) => deepEqual(prev, next)))\n)\n","import styles from './Output.module.scss'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport OutputTable from './OutputTable'\nimport { RootState, tabType } from 'state/State'\n\nimport classNames from 'classnames'\n\nimport { getOutputErrorMessage, getOutputIsArray, getOutputActiveTab, getOutputObjectSize } from 'store/selectors'\nimport JsonView from './JsonView'\nimport { updateOutputTabSelection } from 'actions/actions'\nimport { TabContent, TabPane, Alert, Badge } from 'reactstrap'\nimport { memo, useCallback, FC } from 'react'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    isArray: boolean\n    activeTab: tabType\n    objSize: number\n    setActiveTab: typeof updateOutputTabSelection\n    errorMessage?: string\n}\n\nconst Output: FC<Props> = ({ isArray, errorMessage, activeTab, setActiveTab, objSize }) => {\n    const handleActiveTable = useCallback(() => setActiveTab('Table'), [setActiveTab])\n    const handleActiveRawJson = useCallback(() => setActiveTab('RawJson'), [setActiveTab])\n    return (\n        <>\n            {errorMessage && (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-10 offset-sm-2\">\n                            <Alert className=\"row align-items-center\" color=\"danger\">\n                                <i className=\"material-icons mr-2\">error</i>\n                                <span>{errorMessage}</span>\n                            </Alert>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <ul className=\"nav nav-tabs\">\n                            <li className=\"nav-item\">\n                                <button\n                                    className={classNames({\n                                        active: activeTab === 'RawJson',\n                                        'nav-link': true,\n                                        [styles.pointer]: true,\n                                    })}\n                                    onClick={handleActiveRawJson}\n                                >\n                                    Raw JSON view\n                                </button>\n                            </li>\n                            <li className=\"nav-item\" hidden={!isArray}>\n                                <button\n                                    className={classNames({\n                                        active: activeTab === 'Table',\n                                        'nav-link': true,\n                                        [styles.pointer]: true,\n                                    })}\n                                    onClick={handleActiveTable}\n                                >\n                                    Table view\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <TabContent activeTab={activeTab}>\n                    <TabPane tabId=\"RawJson\">\n                        <div className=\"row\">\n                            <div className=\"col-sm-2 pt-5\">\n                                <h3>\n                                    <Badge id=\"badgeSize\" color=\"info\" pill={true}>\n                                        {prettyPrintBytes(objSize)}\n                                    </Badge>\n                                </h3>\n                            </div>\n                            <div className=\"col-sm-10\">\n                                <JsonView />\n                            </div>\n                        </div>\n                    </TabPane>\n                    <TabPane tabId=\"Table\">\n                        <OutputTable />\n                    </TabPane>\n                </TabContent>\n            </>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    errorMessage: getOutputErrorMessage(state),\n    isArray: getOutputIsArray(state),\n    activeTab: getOutputActiveTab(state),\n    objSize: getOutputObjectSize(state),\n})\n\nexport default connect(mapStateToProps, { setActiveTab: updateOutputTabSelection })(\n    memo(withErrorBoundary(withPerformance(Output, 'Output')))\n)\n"],"sourceRoot":""}