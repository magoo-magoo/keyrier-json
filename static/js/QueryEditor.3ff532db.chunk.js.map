{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/query/QueryEditor.tsx"],"names":["connect","state","queryText","getQueryText","mode","getQueryMode","currentEditorTheme","getEditorTheme","setQuery","updateQuery","withErrorBoundary","memo","onChange","useCallback","a","unstable_runWithPriority","unstable_UserBlockingPriority","theme","name","fontSize","highlightActiveLine","value","minLines","maxLines","showPrintMargin","editorProps","$blockScrolling","Infinity","setOptions","dragEnabled","width","debounceChangePeriod"],"mappings":"wHAAA,iH,iCCAA,mEA8DeA,sBANS,SAACC,GAAD,MAAuB,CAC7CC,UAAWC,YAAaF,GACxBG,KAAMC,YAAaJ,GACnBK,mBAAoBC,YAAeN,KAKnC,CAAEO,SAAUC,KAFCT,CAGbU,YAAkBC,eA9CW,SAAC,GAAuD,IAArDH,EAAoD,EAApDA,SAAUN,EAA0C,EAA1CA,UAAWE,EAA+B,EAA/BA,KAAME,EAAyB,EAAzBA,mBACrDM,EAAWC,sBACf,SAACC,GACKZ,IAAcY,GAChBC,mCAAyBC,gCAA+B,kBAAMR,EAASM,MAG3E,CAACN,EAAUN,IAGb,OACE,gCACE,0CAAkBE,EAAlB,WACA,gBAAC,IAAD,CACEA,KAAe,eAATA,EAAwB,aAAe,QAC7Ca,MAAOX,EACPY,KAAK,iBACLN,SAAUA,EACVO,SAAU,GACVC,qBAAqB,EACrBC,MAAOnB,EACPoB,SAAU,GACVC,SAAU,GACVC,iBAAiB,EACjBC,YAAa,CACXC,gBAAiBC,KAEnBC,WAAY,CACVC,aAAa,GAEfC,MAAO,OACPC,qBAAsB","file":"static/js/QueryEditor.3ff532db.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { updateQuery } from 'actions/actions'\nimport { RootState, QueryMode } from 'state/State'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getQueryText, getQueryMode, getEditorTheme } from 'store/selectors'\nimport { memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { unstable_runWithPriority, unstable_UserBlockingPriority } from 'scheduler'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n  setQuery: typeof updateQuery\n  queryText: string\n  currentEditorTheme: EditorTheme\n  mode: QueryMode\n}\n\nconst QueryEditor: FC<Props> = ({ setQuery, queryText, mode, currentEditorTheme }) => {\n  const onChange = useCallback(\n    (a: string) => {\n      if (queryText !== a) {\n        unstable_runWithPriority(unstable_UserBlockingPriority, () => setQuery(a))\n      }\n    },\n    [setQuery, queryText]\n  )\n\n  return (\n    <>\n      <h3>2. Type your {mode} query:</h3>\n      <AceEditor\n        mode={mode === 'Javascript' ? 'javascript' : 'mysql'}\n        theme={currentEditorTheme}\n        name=\"queryAceEditor\"\n        onChange={onChange}\n        fontSize={16}\n        highlightActiveLine={true}\n        value={queryText}\n        minLines={10}\n        maxLines={25}\n        showPrintMargin={false}\n        editorProps={{\n          $blockScrolling: Infinity,\n        }}\n        setOptions={{\n          dragEnabled: true,\n        }}\n        width={'100%'}\n        debounceChangePeriod={250}\n      />\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  queryText: getQueryText(state),\n  mode: getQueryMode(state),\n  currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { setQuery: updateQuery }\n)(withErrorBoundary(memo(QueryEditor)))\n"],"sourceRoot":""}