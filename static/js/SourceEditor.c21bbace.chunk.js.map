{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/source/SourceEditor.tsx"],"names":["react_ace__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react_ace__WEBPACK_IMPORTED_MODULE_0___default","n","d","__webpack_exports__","a","r","react__WEBPACK_IMPORTED_MODULE_0__","react_redux__WEBPACK_IMPORTED_MODULE_1__","actions_actions__WEBPACK_IMPORTED_MODULE_2__","components_common_DeferredAceEditor__WEBPACK_IMPORTED_MODULE_3__","store_selectors__WEBPACK_IMPORTED_MODULE_4__","components_common_ErrorBoundary__WEBPACK_IMPORTED_MODULE_5__","scheduler__WEBPACK_IMPORTED_MODULE_6__","connect","state","sourceText","getSourceText","currentEditorTheme","getEditorTheme","onChange","updateSource","withErrorBoundary","memo","_ref","onChangeCallback","useCallback","s","unstable_runWithPriority","unstable_UserBlockingPriority","mode","theme","name","fontSize","cursorStart","showPrintMargin","showGutter","highlightActiveLine","value","debounceChangePeriod","minLines","maxLines","wrapEnabled","setOptions","showLineNumbers","editorProps","$blockScrolling","Infinity","annotations","width"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,KAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAAG,EAAAC,EAAA,sBAAAH,EAAAI,IAAAL,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,uCCAAA,EAAAM,EAAAF,GAAA,IAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAA,IAAAS,EAAAT,EAAA,IAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,IA4Dec,sBALS,SAACC,GAAD,MAAuB,CAC7CC,WAAYC,YAAcF,GAC1BG,mBAAoBC,YAAeJ,KAKnC,CAAEK,SAAUC,KAFCP,CAGbQ,YAAkBC,eA9CY,SAAAC,GAAkD,IAA/CJ,EAA+CI,EAA/CJ,SAAUJ,EAAqCQ,EAArCR,WAAYE,EAAyBM,EAAzBN,mBACjDO,EAAmBC,sBACvB,SAACC,GACKX,IAAeW,GACjBC,mCAAyBC,gCAA+B,kBAAMT,EAASO,MAG3E,CAACP,EAAUJ,IAEb,OACET,EAAA,cAAAA,EAAA,cACEA,EAAA,+CACAA,EAAA,cAACG,EAAA,EAAD,CACEoB,KAAK,OACLC,MAAOb,EACPc,KAAK,kBACLZ,SAAUK,EACVQ,SAAU,GACVC,YAAa,EACbC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,MAAOtB,EACPuB,qBAAsB,IACtBC,SAAU,GACVC,SAAU,GACVC,aAAa,EACbC,WAAY,CACVC,iBAAiB,GAEnBC,YAAa,CAAEC,gBAAiBC,KAChCC,YAAa,GACbC,MAAO","file":"static/js/SourceEditor.c21bbace.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateSource } from 'actions/actions'\nimport { RootState } from 'state/State'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getSourceText, getEditorTheme } from 'store/selectors'\nimport { memo, FC, useCallback } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { EditorTheme } from 'themes/themes'\nimport { unstable_runWithPriority, unstable_UserBlockingPriority } from 'scheduler'\n\ninterface Props {\n  onChange: typeof updateSource\n  sourceText: string\n  currentEditorTheme: EditorTheme\n}\n\nconst SourceEditor: FC<Props> = ({ onChange, sourceText, currentEditorTheme }) => {\n  const onChangeCallback = useCallback(\n    (s: string) => {\n      if (sourceText !== s) {\n        unstable_runWithPriority(unstable_UserBlockingPriority, () => onChange(s))\n      }\n    },\n    [onChange, sourceText]\n  )\n  return (\n    <>\n      <h3>1. Paste your JSON:</h3>\n      <AceEditor\n        mode=\"json\"\n        theme={currentEditorTheme}\n        name=\"sourceAceEditor\"\n        onChange={onChangeCallback}\n        fontSize={13}\n        cursorStart={1}\n        showPrintMargin={false}\n        showGutter={true}\n        highlightActiveLine={true}\n        value={sourceText}\n        debounceChangePeriod={1000}\n        minLines={35}\n        maxLines={35}\n        wrapEnabled={false}\n        setOptions={{\n          showLineNumbers: true,\n        }}\n        editorProps={{ $blockScrolling: Infinity }}\n        annotations={[]}\n        width={'100%'}\n      />\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  sourceText: getSourceText(state),\n  currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { onChange: updateSource }\n)(withErrorBoundary(memo(SourceEditor)))\n"],"sourceRoot":""}