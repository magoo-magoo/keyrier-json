{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/query/QueryEditor.tsx"],"names":["react_ace__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react_ace__WEBPACK_IMPORTED_MODULE_0___default","n","d","__webpack_exports__","a","connect","state","queryText","getQueryText","mode","getQueryMode","currentEditorTheme","getEditorTheme","setQuery","updateQuery","setQueryMode","updateQueryMode","withErrorBoundary","memo","_ref","_useToggleState","useToggleState","_useToggleState2","Object","_home_travis_build_magoo_magoo_keyrier_json_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","modeOpen","switchModeOpen","setJsMode","useCallback","setSqlMode","onChange","unstable_runWithPriority","unstable_IdlePriority","react__WEBPACK_IMPORTED_MODULE_1__","className","reactstrap__WEBPACK_IMPORTED_MODULE_7__","isOpen","toggle","reactstrap__WEBPACK_IMPORTED_MODULE_8__","color","caret","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","header","active","onClick","components_common_DeferredAceEditor__WEBPACK_IMPORTED_MODULE_4__","theme","name","fontSize","highlightActiveLine","value","minLines","maxLines","showPrintMargin","editorProps","$blockScrolling","Infinity","setOptions","showLineNumbers","tabSize","enableBasicAutocompletion","enableLiveAutocompletion","dragEnabled","width","debounceChangePeriod"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,KAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAAG,EAAAC,EAAA,sBAAAH,EAAAI,IAAAL,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,4JCiGeM,sBANS,SAACC,GAAD,MAAuB,CAC7CC,UAAWC,YAAaF,GACxBG,KAAMC,YAAaJ,GACnBK,mBAAoBC,YAAeN,KAKnC,CAAEO,SAAUC,IAAaC,aAAcC,KAF1BX,CAGbY,YAAkBC,eA9EW,SAAAC,GAAqE,IAAlEN,EAAkEM,EAAlEN,SAAUN,EAAwDY,EAAxDZ,UAAWE,EAA6CU,EAA7CV,KAAMM,EAAuCI,EAAvCJ,aAAcJ,EAAyBQ,EAAzBR,mBAAyBS,EAC/DC,cAD+DC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC3FK,EAD2FH,EAAA,GACjFI,EADiFJ,EAAA,GAG5FK,EAAYC,sBAAY,kBAAMb,EAAa,eAAe,CAACA,IAC3Dc,EAAaD,sBAAY,kBAAMb,EAAa,QAAQ,CAACA,IACrDe,EAAWF,sBACf,SAACxB,GACC2B,mCAAyBC,wBAAuB,kBAAMnB,EAAST,MAEjE,CAACS,IAGH,OACEoB,EAAA,cAAAA,EAAA,cACEA,EAAA,qBAAKC,UAAU,OACbD,EAAA,qBAAKC,UAAU,yBACbD,EAAA,iDAGJA,EAAA,qBAAKC,UAAU,OACbD,EAAA,qBAAKC,UAAU,YACbD,EAAA,cAACE,EAAA,EAAD,CAAgBC,OAAQX,EAAUY,OAAQX,GACxCO,EAAA,cAACK,EAAA,EAAD,CAAgBC,MAAM,UAAUC,OAAO,GAAvC,QAGAP,EAAA,cAACQ,EAAA,EAAD,KACER,EAAA,cAACS,EAAA,EAAD,CAAcC,QAAQ,GAAtB,6BACAV,EAAA,cAACS,EAAA,EAAD,CAAcE,OAAiB,eAATnC,EAAuBoC,QAASlB,GAAtD,cAGAM,EAAA,cAACS,EAAA,EAAD,CAAcE,OAAiB,QAATnC,EAAgBoC,QAAShB,GAA/C,6BAMNI,EAAA,qBAAKC,UAAU,aACbD,EAAA,cAACa,EAAA,EAAD,CACErC,KAAe,eAATA,EAAwB,aAAe,QAC7CsC,MAAOpC,EACPqC,KAAK,iBACLlB,SAAUA,EACVmB,SAAU,GACVC,qBAAqB,EACrBC,MAAO5C,EACP6C,SAAU,GACVC,SAAU,GACVC,iBAAiB,EACjBC,YAAa,CACXC,gBAAiBC,KAEnBC,WAAY,CACVC,iBAAiB,EACjBC,QAAS,EACTC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,aAAa,GAEfC,MAAO,OACPH,2BAA2B,EAC3BC,0BAA0B,EAC1BG,qBAAsB","file":"static/js/QueryEditor.7f5eeefb.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { connect } from 'react-redux'\n\nimport { updateQuery, updateQueryMode } from 'actions/actions'\nimport { RootState, QueryMode } from 'state/State'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getQueryText, getQueryMode, getEditorTheme } from 'store/selectors'\nimport { useToggleState } from 'hooks/hooks'\nimport { ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { unstable_runWithPriority, unstable_IdlePriority } from 'scheduler'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n  setQuery: typeof updateQuery\n  setQueryMode: typeof updateQueryMode\n  queryText: string\n  mode: QueryMode\n  currentEditorTheme: EditorTheme\n}\n\nconst QueryEditor: FC<Props> = ({ setQuery, queryText, mode, setQueryMode, currentEditorTheme }) => {\n  const [modeOpen, switchModeOpen] = useToggleState()\n\n  const setJsMode = useCallback(() => setQueryMode('Javascript'), [setQueryMode])\n  const setSqlMode = useCallback(() => setQueryMode('SQL'), [setQueryMode])\n  const onChange = useCallback(\n    (a: string) => {\n      unstable_runWithPriority(unstable_IdlePriority, () => setQuery(a))\n    },\n    [setQuery]\n  )\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-10 offset-sm-2\">\n          <h3>2. Type your query:</h3>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-2\">\n          <ButtonDropdown isOpen={modeOpen} toggle={switchModeOpen}>\n            <DropdownToggle color=\"primary\" caret={true}>\n              Mode\n            </DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem header={true}>Choose a predefined query</DropdownItem>\n              <DropdownItem active={mode === 'Javascript'} onClick={setJsMode}>\n                Javascript\n              </DropdownItem>\n              <DropdownItem active={mode === 'SQL'} onClick={setSqlMode}>\n                SQL like(experimental)\n              </DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n        </div>\n        <div className=\"col-sm-10\">\n          <AceEditor\n            mode={mode === 'Javascript' ? 'javascript' : 'mysql'}\n            theme={currentEditorTheme}\n            name=\"queryAceEditor\"\n            onChange={onChange}\n            fontSize={13}\n            highlightActiveLine={true}\n            value={queryText}\n            minLines={10}\n            maxLines={25}\n            showPrintMargin={false}\n            editorProps={{\n              $blockScrolling: Infinity,\n            }}\n            setOptions={{\n              showLineNumbers: true,\n              tabSize: 2,\n              enableBasicAutocompletion: true,\n              enableLiveAutocompletion: true,\n              dragEnabled: true,\n            }}\n            width={'100%'}\n            enableBasicAutocompletion={true}\n            enableLiveAutocompletion={true}\n            debounceChangePeriod={250}\n          />\n        </div>\n      </div>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  queryText: getQueryText(state),\n  mode: getQueryMode(state),\n  currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { setQuery: updateQuery, setQueryMode: updateQueryMode }\n)(withErrorBoundary(memo(QueryEditor)))\n"],"sourceRoot":""}