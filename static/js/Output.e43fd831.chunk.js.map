{"version":3,"sources":["components/output/Output.module.scss","components/common/Loading.module.scss","components/common/Loading.tsx","components/output/TableAdvancedOptions.tsx","components/output/OutputTableView.tsx","components/output/OutputTable.tsx","components/output/JsonView.tsx","components/output/Output.tsx"],"names":["module","exports","pointer","loader","spin","Loading","props","react","className","Styles","ReactSelect","lazy","__webpack_require__","e","then","bind","connect","state","data","getOutputarray","displayedColumns","getdisplayedColumns","columns","getColumns","groupBy","getGroupBy","onColumnsChange","updateTableColumns","setTableGroupBy","updateTableGroupBy","memo","withErrorBoundary","_ref","_useToggleState","useToggleState","_useToggleState2","Object","slicedToArray","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","useCallback","cols","Array","mapped","map","c","value","handleExport","asyncToGenerator","regenerator_default","a","mark","_callee","xlsx","workBook","workSheet","wrap","_context","prev","next","Promise","all","t","sent","utils","book_new","json_to_sheet","book_append_sheet","writeFile","stop","handleGroupChange","target","length","columnOptions","k","label","Button","color","block","onClick","Collapse","isOpen","name","id","onChange","key","fallback","Loading_Loading","componentName","options","isMulti","ReactJson","ReactTable","defaultFilterMethod","filter","row","containsIgnoreCase","customToString","_useState","useState","_useState2","detailsCellValue","setDetailsCellValue","getTdProps","_","rowInfo","column","__","original","aggregated","handleCloseDetail","isArray","every","undefined","keys","tableColumnConfig","Aggregated","Cell","cellProps","Header","headerClassName","accessor","output_TableAdvancedOptions","noDataText","defineProperty","arrayElementName","defaultPageSize","filterable","pivotBy","Modal","toggle","size","ModalHeader","ModalBody","src","iconStyle","indentWidth","onAdd","onDelete","onEdit","onSelect","deepEqual","getOutputObject","isModalOpen","getisOutputTableModalOpen","toggleModal","toggleOutputTableModal","output_OutputTableView","ModalFooter","outline","errorStyles","border","noop","searchTerm","getOutputSearchTerm","match","getOutputSearchMatch","onSearchChange","updateSearchTerm","handlechange","lib","style","debounceTimeout","placeholder","JsonView_ReactJson","errorMessage","getOutputErrorMessage","getOutputIsArray","activeTab","getOutputActiveTab","objSize","getOutputObjectSize","setActiveTab","updateOutputTabSelection","handleActiveTable","handleActiveRawJson","hidden","Alert","classNames","active","nav-link","styles","TabContent","TabPane","tabId","Badge","pill","prettyPrintBytes","output_JsonView","components_output_OutputTable"],"mappings":"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","file":"static/js/Output.e43fd831.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointer\":\"Output_pointer__Fhc2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1SW_q\",\"spin\":\"Loading_spin__HjhGY\"};","import * as React from 'react'\nimport Styles from './Loading.module.scss'\n\nexport const Loading = (props: { componentName: string }) => (\n  <div className={Styles.loader}>{process.env.NODE_ENV === 'production' ? '' : props.componentName}</div>\n)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateTableColumns, updateTableGroupBy } from 'actions/actions'\nimport { itemType, RootState } from 'state/State'\nimport { ValueType } from 'react-select/lib/types'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useToggleState } from 'hooks/hooks'\nimport { Button, Collapse } from 'reactstrap'\nimport { memo, useCallback, Suspense, ChangeEvent } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { lazy, FC } from 'react'\nimport { Loading } from 'components/common/Loading'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n  data: itemType[]\n  displayedColumns: string[]\n  groupBy: string[]\n  columns: string[]\n  onColumnsChange: typeof updateTableColumns\n  setTableGroupBy: typeof updateTableGroupBy\n}\n\nconst TableAdvancedOptions: FC<Props> = ({ onColumnsChange, columns, setTableGroupBy, data, displayedColumns }) => {\n  const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n  const handleColumnChange = useCallback(\n    (cols: ValueType<{}> | undefined | null) => {\n      if (cols instanceof Array) {\n        const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n        onColumnsChange(mapped)\n      }\n    },\n    [onColumnsChange]\n  )\n\n  const handleExport = useCallback(async () => {\n    const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n    const workBook = xlsx.utils.book_new()\n    const workSheet = xlsx.utils.json_to_sheet(data)\n    xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n    xlsx.writeFile(workBook, 'export.xlsx')\n  }, [data])\n\n  const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [\n    setTableGroupBy,\n  ])\n\n  if (columns.length <= 0) {\n    return <></>\n  }\n\n  const columnOptions = columns.map(k => ({ value: k, label: k }))\n\n  return (\n    <div className=\"row\">\n      <div className=\"col\">\n        <Button className={'float-left'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n          {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n        </Button>\n        <Collapse isOpen={optionsCollapsed}>\n          <select\n            className=\"form-control-lg form-control\"\n            name=\"select\"\n            id=\"groupingSelect\"\n            onChange={handleGroupChange}\n          >\n            <option key={'Group by...'}>Group by...</option>\n            {displayedColumns.map(key => (\n              <option key={key}>{key}</option>\n            ))}\n          </select>\n          <Button color={'success'} onClick={handleExport}>\n            Export to Excel (.xlsx)\n          </Button>\n          <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n            <ReactSelect\n              options={columnOptions}\n              value={displayedColumns.map(k => ({\n                value: k,\n                label: k,\n              }))}\n              isMulti={true}\n              onChange={handleColumnChange}\n            />\n          </Suspense>\n        </Collapse>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    data: getOutputarray(state),\n    displayedColumns: getdisplayedColumns(state),\n    columns: getColumns(state),\n    groupBy: getGroupBy(state),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { onColumnsChange: updateTableColumns, setTableGroupBy: updateTableGroupBy }\n)(memo(withErrorBoundary(TableAdvancedOptions)))\n","import * as React from 'react'\nimport { customToString, containsIgnoreCase } from 'core/converters/string'\nimport { connect } from 'react-redux'\nimport TableAdvancedOptions from './TableAdvancedOptions'\nimport { Column, Filter, RowInfo } from 'react-table'\nimport { itemType, RootState } from 'state/State'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useState, Suspense, lazy, memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { Modal, ModalProps, ModalHeader, ModalBody } from 'reactstrap'\nimport deepEqual from 'fast-deep-equal'\n\nimport 'react-table/react-table.css'\nimport { Loading } from 'components/common/Loading'\nimport { arrayElementName } from 'models/array'\n\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\nconst ReactTable = lazy(() => import(/* webpackChunkName: \"react-table\" */ 'react-table'))\n\ntype Props = {\n  data: unknown[]\n  displayedColumns: string[]\n  groupBy?: string[]\n}\n\nexport const OutputTableView: FC<Props> = ({ data, displayedColumns, groupBy }) => {\n  const [detailsCellValue, setDetailsCellValue] = useState(null as itemType | null)\n\n  const getTdProps = useCallback(\n    (_: any, rowInfo?: RowInfo, column?: Column | undefined, __?: any) => ({\n      onClick: (e: MouseEvent, original: () => void) => {\n        if (rowInfo && rowInfo.aggregated) {\n          original()\n        } else if (e && column && column.id && rowInfo && rowInfo.row) {\n          setDetailsCellValue(rowInfo.row[column.id])\n        }\n      },\n    }),\n    [setDetailsCellValue]\n  )\n\n  const handleCloseDetail = useCallback(() => setDetailsCellValue(null), [setDetailsCellValue])\n\n  if (\n    !data ||\n    !Array.isArray(data) ||\n    data.length === 0 ||\n    data.every(e => e === null || e === undefined || (typeof e === 'object' && Object.keys(e).length === 0))\n  ) {\n    return <div />\n  }\n\n  const tableColumnConfig = displayedColumns.map(\n    key =>\n      ({\n        Aggregated: () => (row: any) => (row ? row.value : ''),\n        Cell: (cellProps: any) => {\n          const cellContent = cellProps !== null && cellProps !== undefined ? customToString(cellProps.value) : ''\n          return cellContent\n        },\n        Header: key,\n        headerClassName: 'data-test-id-column-name',\n        accessor: key,\n        className: 'text-center btn btn-link data-test-id-cell-data',\n      } as const)\n  )\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <TableAdvancedOptions />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Suspense fallback={<Loading componentName=\"ReactTable\" />}>\n            <ReactTable\n              noDataText=\"FRACKING EMPTY!\"\n              className=\"data-test-id-output-table -highlight\"\n              data={data.map(e => (!!e ? (typeof e === 'object' ? e : { [arrayElementName]: e }) : {}))}\n              defaultPageSize={20}\n              columns={tableColumnConfig}\n              filterable={true}\n              pivotBy={groupBy}\n              defaultFilterMethod={defaultFilterMethod}\n              getTdProps={getTdProps}\n            />\n          </Suspense>\n        </div>\n      </div>\n      <div id=\"data-test-id-output-table-length\" className=\"mx-3 align-items-center justify-content-end d-flex\">\n        <h4>Number of elements: {data.length}</h4>\n      </div>\n      <Modal<ModalProps> isOpen={!!detailsCellValue} toggle={handleCloseDetail} size=\"lg\">\n        <ModalHeader>Details</ModalHeader>\n        <ModalBody>\n          {typeof detailsCellValue === 'object' ? (\n            <Suspense fallback={<Loading componentName=\"ReactJson\" />}>\n              <ReactJson\n                src={detailsCellValue ? detailsCellValue : {}}\n                name=\"data\"\n                iconStyle=\"triangle\"\n                indentWidth={8}\n                onAdd={() => null}\n                onDelete={() => null}\n                onEdit={() => null}\n                onSelect={() => null}\n              />\n            </Suspense>\n          ) : (\n            detailsCellValue\n          )}\n        </ModalBody>\n      </Modal>\n    </>\n  )\n}\n\nconst defaultFilterMethod = (filter: Filter, row: itemType) =>\n  filter && row && containsIgnoreCase(customToString(row[filter.id]), filter.value)\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    data: getOutputarray(state),\n    displayedColumns: getdisplayedColumns(state),\n    columns: getColumns(state),\n    groupBy: getGroupBy(state),\n  }\n}\n\nexport default connect(mapStateToProps)(withErrorBoundary(memo(OutputTableView, (prev, next) => deepEqual(prev, next))))\n","import * as React from 'react'\nimport './OutputTable.scss'\nimport { connect } from 'react-redux'\nimport OutputTableView from './OutputTableView'\nimport { toggleOutputTableModal } from 'actions/actions'\nimport { getisOutputTableModalOpen, getOutputObject } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap'\nimport { memo, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\n\ninterface Props {\n  toggleModal: typeof toggleOutputTableModal\n  isModalOpen: boolean\n}\n\nconst OutputTable: FC<Props> = ({ toggleModal, isModalOpen }) => {\n  return (\n    <div className=\"output-table\">\n      <Modal isOpen={isModalOpen} toggle={toggleModal} className=\"mw-100\">\n        <ModalHeader toggle={toggleModal}>Table view</ModalHeader>\n        <ModalBody>\n          <OutputTableView />\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n      <div className=\"row\">\n        <div className=\"col\">\n          <Button block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n            Display results table fullscreen\n          </Button>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <OutputTableView />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  data: getOutputObject(state),\n  isModalOpen: getisOutputTableModalOpen(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  {\n    toggleModal: toggleOutputTableModal,\n  }\n)(withErrorBoundary(memo(OutputTable)))\n","import * as React from 'react'\nimport { getOutputObject, getOutputSearchTerm, getOutputSearchMatch } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { connect } from 'react-redux'\nimport { DebounceInput } from 'react-debounce-input'\nimport { updateSearchTerm } from 'actions/actions'\nimport { Suspense, lazy, memo, useCallback, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport deepEqual from 'fast-deep-equal'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n  src: object | null\n  searchTerm: string | undefined\n  match: boolean\n  onSearchChange: typeof updateSearchTerm\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match }) => {\n  const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange])\n  return (\n    <div id=\"jsonView\">\n      <DebounceInput\n        style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n        value={searchTerm}\n        className=\"form-control\"\n        onChange={handlechange}\n        debounceTimeout={500}\n        placeholder=\"Type your search term...\"\n      />\n      <Suspense fallback={<div>Loading...</div>}>\n        <ReactJson\n          src={src ? src : {}}\n          name=\"data\"\n          iconStyle=\"triangle\"\n          indentWidth={8}\n          onAdd={noop}\n          onDelete={noop}\n          onEdit={noop}\n          onSelect={noop}\n        />\n      </Suspense>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    src: getOutputObject(state),\n    searchTerm: getOutputSearchTerm(state),\n    match: getOutputSearchMatch(state),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  { onSearchChange: updateSearchTerm }\n)(withErrorBoundary(memo(JsonView, (prev, next) => deepEqual(prev, next))))\n","import styles from './Output.module.scss'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport OutputTable from './OutputTable'\nimport { RootState, tabType } from 'state/State'\n\nimport classNames from 'classnames'\n\nimport { getOutputErrorMessage, getOutputIsArray, getOutputActiveTab, getOutputObjectSize } from 'store/selectors'\nimport JsonView from './JsonView'\nimport { updateOutputTabSelection } from 'actions/actions'\nimport { TabContent, TabPane, Alert, Badge } from 'reactstrap'\nimport { memo, useCallback, FC } from 'react'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\n\ninterface Props {\n  isArray: boolean\n  activeTab: tabType\n  objSize: number\n  setActiveTab: typeof updateOutputTabSelection\n  errorMessage?: string\n}\n\nconst Output: FC<Props> = ({ isArray, errorMessage, activeTab, setActiveTab, objSize }) => {\n  const handleActiveTable = useCallback(() => setActiveTab('Table'), [setActiveTab])\n  const handleActiveRawJson = useCallback(() => setActiveTab('RawJson'), [setActiveTab])\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-sm-10 offset-sm-2\">\n          <h3>3. View your results:</h3>\n        </div>\n      </div>\n      <div hidden={!errorMessage}>\n        <div className=\"row\">\n          <div className=\"col-sm-10 offset-sm-2\">\n            <Alert className=\"row align-items-center\" color=\"danger\">\n              <i className=\"material-icons mr-2\">error</i>\n              <span>{errorMessage}</span>\n            </Alert>\n          </div>\n        </div>\n      </div>\n      <>\n        <div className=\"row\">\n          <div className=\"col\">\n            <ul className=\"nav nav-tabs\">\n              <li className=\"nav-item\">\n                <button\n                  className={classNames({\n                    active: activeTab === 'RawJson',\n                    'nav-link': true,\n                    [styles.pointer]: true,\n                  })}\n                  onClick={handleActiveRawJson}\n                >\n                  Raw JSON view\n                </button>\n              </li>\n              <li className=\"nav-item\" hidden={!isArray}>\n                <button\n                  className={classNames({\n                    active: activeTab === 'Table',\n                    'nav-link': true,\n                    [styles.pointer]: true,\n                  })}\n                  onClick={handleActiveTable}\n                >\n                  Table view\n                </button>\n              </li>\n            </ul>\n          </div>\n        </div>\n        <TabContent activeTab={activeTab}>\n          <TabPane tabId=\"RawJson\">\n            <div className=\"row\">\n              <div className=\"col-sm-2 pt-5\">\n                <h3>\n                  <Badge id=\"badgeSize\" color=\"info\" pill={true}>\n                    {prettyPrintBytes(objSize)}\n                  </Badge>\n                </h3>\n              </div>\n              <div className=\"col-sm-10\">\n                <JsonView />\n              </div>\n            </div>\n          </TabPane>\n          <TabPane tabId=\"Table\">\n            <OutputTable />\n          </TabPane>\n        </TabContent>\n      </>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  errorMessage: getOutputErrorMessage(state),\n  isArray: getOutputIsArray(state),\n  activeTab: getOutputActiveTab(state),\n  objSize: getOutputObjectSize(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { setActiveTab: updateOutputTabSelection }\n)(memo(withErrorBoundary(Output)))\n"],"sourceRoot":""}