{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/source/RequestHeader.tsx","components/source/RequestSource.tsx","components/source/LateralMenu.tsx","components/source/SourceEditor.tsx"],"names":["react_ace__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react_ace__WEBPACK_IMPORTED_MODULE_0___default","n","d","__webpack_exports__","a","RenderHeaderInput","memo","withErrorBoundary","_ref","header","onRemove","onChange","id","_header","Object","slicedToArray","key","value","onKeyChange","useCallback","e","target","onValueChange","onRemoveCallback","react","className","concat","type","name","placeholder","Button","outline","color","onClick","HeaderList","_ref3","headers","filter","h","onChangeCallback","index","indexOf","objectSpread","toConsumableArray","map","connect","setSource","updateSource","onFinish","_useChangeEventState","useChangeEventState","_useChangeEventState2","method","setMethod","_useChangeEventState3","_useChangeEventState4","url","setUrl","_useChangeEventState5","_useChangeEventState6","body","setBody","_useState","useState","_useState2","setHeaders","_useState3","_useState4","error","setError","_useToggleState","useToggleState","_useToggleState2","hasBody","setHasBody","submit","asyncToGenerator","regenerator_default","mark","_callee","request","json","result","wrap","_context","prev","next","Request","fetch","sent","t0","logError","abrupt","customToString","stop","FormGroup","htmlFor","defaultValue","Form","inline","hidden","length","RequestSource_HeaderList","block","Alert","message","stack","state","autoFormat","getSourceAutoFormat","onFileContentReady","onReset","resetEditor","onClear","clearEditor","changeAutoFormat","updateAutoFormatSource","dropdownIsOpen","toggleDropdown","_useToggleState3","_useToggleState4","modalIsOpen","toggleModal","handleFileChange","logInfo","files","fileReader","FileReader","onload","toString","readAsText","handleAutoFormatChange","ButtonGroup","vertical","ButtonDropdown","isOpen","toggle","DropdownToggle","caret","DropdownMenu","DropdownItem","style","display","check","Label","Input","checked","Modal","role","size","ModalHeader","ModalBody","RequestSource","ModalFooter","sourceText","getSourceText","currentEditorTheme","getEditorTheme","source_LateralMenu","DeferredAceEditor","mode","theme","fontSize","cursorStart","showPrintMargin","showGutter","highlightActiveLine","debounceChangePeriod","minLines","maxLines","enableBasicAutocompletion","enableLiveAutocompletion","wrapEnabled","setOptions","showLineNumbers","editorProps","$blockScrolling","Infinity","annotations","width"],"mappings":"0FAAA,IAAAA,EAAAC,EAAA,KAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAAG,EAAAC,EAAA,sBAAAH,EAAAI,IAAAL,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,KAAAA,EAAA,yJCWaM,EAA+BC,eAC1CC,YAAkB,SAAAC,GAAwC,IAArCC,EAAqCD,EAArCC,OAAQC,EAA6BF,EAA7BE,SAAUC,EAAmBH,EAAnBG,SAAUC,EAASJ,EAATI,GAASC,EAAAC,OAAAC,EAAA,EAAAD,CACnCL,EADmC,GACjDO,EADiDH,EAAA,GAC5CI,EAD4CJ,EAAA,GAGlDK,EAAcC,sBAAY,SAACC,GAAD,OAAsCT,EAAS,CAACS,EAAEC,OAAOJ,MAAOA,KAAS,CACvGN,EACAM,IAEIK,EAAgBH,sBAAY,SAACC,GAAD,OAAsCT,EAAS,CAACK,EAAKI,EAAEC,OAAOJ,SAAS,CACvGN,EACAK,IAEIO,EAAmBJ,sBAAY,kBAAMT,EAASD,IAAS,CAACC,EAAUD,IAExE,OACEe,EAAA,qBAAKC,UAAU,0BACbD,EAAA,qBAAKC,UAAU,YACbD,EAAA,uBACEC,UAAU,+BACVR,MAAOD,EACPJ,GAAE,aAAAc,OAAed,GACjBe,KAAK,OACLC,KAAI,aAAAF,OAAed,GACnBiB,YAAY,gBACZlB,SAAUO,KAGdM,EAAA,qBAAKC,UAAU,YACbD,EAAA,uBACEC,UAAU,+BACVR,MAAOA,EACPU,KAAK,OACLC,KAAI,cAAAF,OAAgBd,GACpBA,GAAE,cAAAc,OAAgBd,GAClBiB,YAAY,iBACZlB,SAAUW,KAGdE,EAAA,qBAAKC,UAAU,YACbD,EAAA,cAACM,EAAA,EAAD,CAAQC,SAAS,EAAMC,MAAM,SAASC,QAASV,GAA/C,kDCkEJW,EAAkC,SAAAC,GAA2B,IAAxBC,EAAwBD,EAAxBC,QAASzB,EAAewB,EAAfxB,SAC5CD,EAAWS,sBAAY,SAACV,GAAD,OAA8BE,EAASyB,EAAQC,OAAO,SAAAC,GAAC,OAAIA,IAAM7B,MAAU,CACtG2B,EACAzB,IAEI4B,EAAmBpB,sBACvB,SAACV,GACC,IAAM+B,EAAQJ,EAAQK,QAAQhC,GAC9B2B,EAAQI,GAAR1B,OAAA4B,EAAA,EAAA5B,CAAA,GAAsBL,GACtBE,EAASG,OAAA6B,EAAA,EAAA7B,CAAIsB,KAEf,CAACA,EAASzB,IAEZ,OACEa,EAAA,cAAAA,EAAA,cACGY,EAAQQ,IAAI,SAACnC,EAAQ+B,GAAT,OACXhB,EAAA,cAACnB,EAAD,CAAmBI,OAAQA,EAAQO,IAAKwB,EAAO5B,GAAI4B,EAAO7B,SAAU4B,EAAkB7B,SAAUA,QAMzFmC,cACb,KACA,CAAEC,UAAWC,KAFAF,CAGbtC,YAAkBD,eA7HiB,SAAAE,GAA6B,IAA1BwC,EAA0BxC,EAA1BwC,SAAUF,EAAgBtC,EAAhBsC,UAAgBG,EACpCC,YAAoB,OADgBC,EAAArC,OAAAC,EAAA,EAAAD,CAAAmC,EAAA,GACzDG,EADyDD,EAAA,GACjDE,EADiDF,EAAA,GAAAG,EAE1CJ,YAAoB,8CAFsBK,EAAAzC,OAAAC,EAAA,EAAAD,CAAAwC,EAAA,GAEzDE,EAFyDD,EAAA,GAEpDE,EAFoDF,EAAA,GAAAG,EAGxCR,YAAoB,IAHoBS,EAAA7C,OAAAC,EAAA,EAAAD,CAAA4C,EAAA,GAGzDE,EAHyDD,EAAA,GAGnDE,EAHmDF,EAAA,GAAAG,EAIlCC,mBAAS,CAAC,CAAC,SAAU,sBAJaC,EAAAlD,OAAAC,EAAA,EAAAD,CAAAgD,EAAA,GAIzD1B,EAJyD4B,EAAA,GAIhDC,EAJgDD,EAAA,GAAAE,EAKtCH,mBAAS,MAL6BI,EAAArD,OAAAC,EAAA,EAAAD,CAAAoD,EAAA,GAKzDE,EALyDD,EAAA,GAKlDE,EALkDF,EAAA,GAAAG,EAMlCC,cANkCC,EAAA1D,OAAAC,EAAA,EAAAD,CAAAwD,EAAA,GAMzDG,EANyDD,EAAA,GAMhDE,EANgDF,EAAA,GAQ1DG,EAASxD,sBAAWL,OAAA8D,EAAA,EAAA9D,CAAA+D,EAAAzE,EAAA0E,KAAC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAL,EAAAzE,EAAA+E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAMnBN,EAAU,IAAIO,QAAQ/B,EALK,CAC/BJ,SACAhB,UACAwB,KAAMa,EAAUb,EAAO,OAGzBS,EAAS,MAPgBe,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAWFE,MAAMR,GAXJ,cAWjBE,EAXiBE,EAAAK,KAAAL,EAAAE,KAAA,EAYVJ,EAAOD,OAZG,OAYvBA,EAZuBG,EAAAK,KAAAL,EAAAE,KAAA,wBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAcvBO,YAAS,2BAADP,EAAAM,IACRrB,EAAQe,EAAAM,IAfeN,EAAAQ,OAAA,kBAkBzB9C,EAAU+C,YAAeZ,IACzBjC,IAnByB,yBAAAoC,EAAAU,SAAAf,EAAA,kBAoBxB,CAAC3B,EAAQI,EAAKI,EAAMxB,EAASqC,EAASJ,EAAUvB,EAAWE,IAE9D,OACExB,EAAA,qBAAKZ,GAAG,qBACNY,EAAA,cAACuE,EAAA,EAAD,KACEvE,EAAA,uBAAOwE,QAAQ,iBAAf,UACAxE,EAAA,wBACEC,UAAU,+BACVwE,aAAc7C,EACdxB,KAAK,gBACLhB,GAAG,gBACHD,SAAU0C,GAEV7B,EAAA,mCACAA,EAAA,oCACAA,EAAA,mCACAA,EAAA,yCAGJA,EAAA,cAACuE,EAAA,EAAD,KACEvE,EAAA,uBAAOwE,QAAQ,cAAf,eACAxE,EAAA,uBACEyE,aAAczC,EACd/B,UAAU,+BACVE,KAAK,MACLC,KAAK,aACLhB,GAAG,aACHiB,YAAY,eACZlB,SAAU8C,KAGdjC,EAAA,qBAAKC,UAAU,gCACbD,EAAA,uBAAOC,UAAU,oBACfD,EAAA,uBAAOG,KAAK,WAAWF,UAAU,mBAAmBd,SAAU+D,IADhE,cAIFlD,EAAA,cAAC0E,EAAA,EAAD,CAAMC,QAAQ,EAAMC,QAAS3B,GAC3BjD,EAAA,cAACuE,EAAA,EAAD,KACEvE,EAAA,mCACAA,EAAA,uBAAOC,UAAU,+BAA+BE,KAAK,WAAWV,MAAO2C,EAAMjD,SAAUkD,IAAY,MAGvGrC,EAAA,uBAAOwE,QAAQ,WAAf,mBAAiD,IACjDxE,EAAA,cAACM,EAAA,EAAD,CACEC,SAAS,EACTC,MAAM,UACNC,QAAS,kBAAMgC,EAAU,GAAAvC,OAAAZ,OAAA6B,EAAA,EAAA7B,CAAKsB,GAAL,CAAc,SAAAV,OAASU,EAAQiE,OAAS,GAAK,cAHxE,cAOA7E,EAAA,yBACAA,EAAA,yBACAA,EAAA,cAAC8E,EAAD,CAAYlE,QAASA,EAASzB,SAAUsD,IACxCzC,EAAA,yBACAA,EAAA,cAACM,EAAA,EAAD,CAAQyE,OAAO,EAAMvE,MAAM,UAAUC,QAAS0C,GAA9C,UAGCP,GACC5C,EAAA,cAACgF,EAAA,EAAD,CAAOxE,MAAM,UAAb,UACUoC,EAAMqC,QAAUrC,EAAMqC,QAAU,GACvCrC,EAAMsC,MAAQtC,EAAMsC,MAAQ,oHCSxB7D,cAFS,SAAC8D,GAAD,MAAuB,CAAEC,WAAYC,YAAoBF,KAI/E,CACEG,mBAAoB/D,IACpBgE,QAASC,IACTC,QAASC,IACTC,iBAAkBC,KANPvE,CAQbvC,eAAKC,YAvFwB,SAAAC,GAA4E,IAAzEuG,EAAyEvG,EAAzEuG,QAASD,EAAgEtG,EAAhEsG,mBAAoBG,EAA4CzG,EAA5CyG,QAASL,EAAmCpG,EAAnCoG,WAAYO,EAAuB3G,EAAvB2G,iBAAuB7C,EAChEC,cADgEC,EAAA1D,OAAAC,EAAA,EAAAD,CAAAwD,EAAA,GAClG+C,EADkG7C,EAAA,GAClF8C,EADkF9C,EAAA,GAAA+C,EAEtEhD,cAFsEiD,EAAA1G,OAAAC,EAAA,EAAAD,CAAAyG,EAAA,GAElGE,EAFkGD,EAAA,GAErFE,EAFqFF,EAAA,GAInGG,EAAmBxG,sBACvB,SAACC,GAGC,GAFAwG,YAAQ,gBACRN,IACIlG,EAAEC,OAAOwG,OAASzG,EAAEC,OAAOwG,MAAMxB,OAAS,EAAG,CAC/C,IAAMyB,EAAa,IAAIC,WACvBH,YAAQ,iBAAkBxG,EAAEC,OAAOwG,MAAM,GAAGjG,MAC5CkG,EAAWE,OAAS,WACdF,EAAW5C,QACb4B,EAAmBgB,EAAW5C,OAAO+C,aAGzCH,EAAWI,WAAW9G,EAAEC,OAAOwG,MAAM,MAGzC,CAACP,EAAgBR,IAGbqB,EAAyBhH,sBAAY,kBAAMgG,GAAkBP,IAAa,CAACO,EAAkBP,IAEnG,OACEpF,EAAA,cAAAA,EAAA,cACEA,EAAA,cAAC4G,EAAA,EAAD,CAAaC,UAAU,GACrB7G,EAAA,cAAC8G,EAAA,EAAD,CAAgBC,OAAQlB,EAAgBmB,OAAQlB,GAC9C9F,EAAA,cAACiH,EAAA,EAAD,CAAgB7H,GAAG,qBAAqB8H,OAAO,EAAM1G,MAAM,WAA3D,UAGAR,EAAA,cAACmH,EAAA,EAAD,KACEnH,EAAA,cAACoH,EAAA,EAAD,CAAcJ,QAAQ,GACpBhH,EAAA,uBAAOZ,GAAG,eAAV,sBAEEY,EAAA,uBACEG,KAAK,OACLC,KAAK,OACLhB,GAAG,aACHiI,MAAO,CAAEC,QAAS,QAClBnI,SAAUgH,MAIhBnG,EAAA,cAACoH,EAAA,EAAD,CAAchI,GAAG,eAAeqB,QAASyF,GACvClG,EAAA,4CAEFA,EAAA,cAACoH,EAAA,EAAD,CAAc3G,QAAS8E,GACrBvF,EAAA,uCAINA,EAAA,cAACM,EAAA,EAAD,CAAQE,MAAM,UAAUC,QAASgF,GAAjC,UAIFzF,EAAA,cAACuE,EAAA,EAAD,CAAWtE,UAAU,OAAOsH,OAAO,GACjCvH,EAAA,cAACwH,EAAA,EAAD,CAAOD,OAAO,GACZvH,EAAA,cAACyH,EAAA,EAAD,CAAOC,QAAStC,EAAYjF,KAAK,WAAWhB,SAAUwH,IADxD,gBAKF3G,EAAA,cAAC2H,EAAA,EAAD,CAAOvI,GAAG,eAAewI,KAAK,SAASC,KAAK,KAAKd,OAAQd,EAAae,OAAQd,GAC5ElG,EAAA,cAAC8H,EAAA,EAAD,CAAad,OAAQd,GAArB,oCACAlG,EAAA,cAAC+H,EAAA,EAAD,KACE/H,EAAA,cAACgI,EAAD,CAAmBxG,SAAU0E,KAE/BlG,EAAA,cAACiI,EAAA,EAAD,KACEjI,EAAA,cAACM,EAAA,EAAD,CAAQE,MAAM,YAAYC,QAASyF,GAAnC,0BCvCK7E,sBALS,SAAC8D,GAAD,MAAuB,CAC7C+C,WAAYC,YAAchD,GAC1BiD,mBAAoBC,YAAelD,KAKnC,CAAEhG,SAAUoC,KAFCF,CAGbtC,YAAkBD,eAjDY,SAAAE,GAAA,IAAGG,EAAHH,EAAGG,SAAU+I,EAAblJ,EAAakJ,WAAYE,EAAzBpJ,EAAyBoJ,mBAAzB,OAC9BpI,EAAA,cAAAA,EAAA,cACEA,EAAA,qBAAKC,UAAU,OACbD,EAAA,qBAAKC,UAAU,yBACbD,EAAA,iDAGJA,EAAA,qBAAKC,UAAU,OACbD,EAAA,qBAAKC,UAAU,YACbD,EAAA,cAACsI,EAAD,OAEFtI,EAAA,qBAAKC,UAAU,aACbD,EAAA,cAACuI,EAAA,EAAD,CACEC,KAAK,OACLC,MAAOL,EACPhI,KAAK,kBACLjB,SAAUA,EACVuJ,SAAU,GACVC,YAAa,EACbC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBrJ,MAAOyI,EACPa,qBAAsB,IACtBC,SAAU,GACVC,SAAU,GACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,aAAa,EACbC,WAAY,CACVC,iBAAiB,GAEnBC,YAAa,CAAEC,gBAAiBC,KAChCC,YAAa,GACbC,MAAO","file":"static/js/SourceEditor.3be54203.chunk.js","sourcesContent":["import AceEditor from 'react-ace'\nimport 'brace/mode/json'\nimport 'brace/mode/javascript'\nimport 'brace/mode/mysql'\nimport 'brace/theme/monokai'\nimport 'brace/theme/github'\nimport 'brace/theme/tomorrow'\nimport 'brace/theme/solarized_dark'\nimport 'brace/theme/terminal'\n\nexport { AceEditor }\n","import * as React from 'react'\nimport { Button } from 'reactstrap'\nimport { memo, useCallback, ChangeEvent, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\ninterface Props {\n  header: [string, string]\n  id: number\n  onChange: (h: [string, string]) => void\n  onRemove: (h: [string, string]) => void\n}\n\nexport const RenderHeaderInput: FC<Props> = memo(\n  withErrorBoundary(({ header, onRemove, onChange, id }) => {\n    const [key, value] = header\n\n    const onKeyChange = useCallback((e: ChangeEvent<HTMLInputElement>) => onChange([e.target.value, value]), [\n      onChange,\n      value,\n    ])\n    const onValueChange = useCallback((e: ChangeEvent<HTMLInputElement>) => onChange([key, e.target.value]), [\n      onChange,\n      key,\n    ])\n    const onRemoveCallback = useCallback(() => onRemove(header), [onRemove, header])\n\n    return (\n      <div className=\"row align-items-center\">\n        <div className=\"col-sm-5\">\n          <input\n            className=\"form-control-lg form-control\"\n            value={key}\n            id={`headerName${id}`}\n            type=\"text\"\n            name={`headerName${id}`}\n            placeholder=\"enter an name\"\n            onChange={onKeyChange}\n          />\n        </div>\n        <div className=\"col-sm-5\">\n          <input\n            className=\"form-control-lg form-control\"\n            value={value}\n            type=\"text\"\n            name={`headerValue${id}`}\n            id={`headerValue${id}`}\n            placeholder=\"enter an value\"\n            onChange={onValueChange}\n          />\n        </div>\n        <div className=\"col-sm-2\">\n          <Button outline={true} color=\"danger\" onClick={onRemoveCallback}>\n            remove\n          </Button>\n        </div>\n      </div>\n    )\n  })\n)\n","import * as React from 'react'\nimport { logError } from 'helpers/logger'\nimport { connect } from 'react-redux'\nimport { updateSource } from 'actions/actions'\nimport { customToString } from 'helpers/string'\nimport { RenderHeaderInput } from './RequestHeader'\nimport { useState, memo, useCallback, FC } from 'react'\nimport { Alert, FormGroup, Form, Button } from 'reactstrap'\nimport { useToggleState, useChangeEventState } from 'hooks/hooks'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\n\ninterface Props {\n  onFinish: () => void\n  setSource: (src: string) => void\n}\n\nconst HttpRequestSource: FC<Props> = ({ onFinish, setSource }) => {\n  const [method, setMethod] = useChangeEventState('GET')\n  const [url, setUrl] = useChangeEventState('https://rickandmortyapi.com/api/character/')\n  const [body, setBody] = useChangeEventState('')\n  const [headers, setHeaders] = useState([['Accept', 'application/json'] as [string, string]])\n  const [error, setError] = useState(null as TypeError | null)\n  const [hasBody, setHasBody] = useToggleState()\n\n  const submit = useCallback(async () => {\n    const requestInit: RequestInit = {\n      method,\n      headers,\n      body: hasBody ? body : null,\n    }\n    const request = new Request(url, requestInit)\n    setError(null)\n\n    let json: string\n    try {\n      const result = await fetch(request)\n      json = await result.json()\n    } catch (e) {\n      logError('HttpRequestSource.submit', e)\n      setError(e)\n      return\n    }\n    setSource(customToString(json))\n    onFinish()\n  }, [method, url, body, headers, hasBody, setError, setSource, onFinish])\n\n  return (\n    <div id=\"HttpRequestSource\">\n      <FormGroup>\n        <label htmlFor=\"requestMethod\">Method</label>\n        <select\n          className=\"form-control-lg form-control\"\n          defaultValue={method}\n          name=\"requestMethod\"\n          id=\"requestMethod\"\n          onChange={setMethod}\n        >\n          <option>GET</option>\n          <option>POST</option>\n          <option>PUT</option>\n          <option>OPTIONS</option>\n        </select>\n      </FormGroup>\n      <FormGroup>\n        <label htmlFor=\"requestUrl\">Request URL</label>\n        <input\n          defaultValue={url}\n          className=\"form-control-lg form-control\"\n          type=\"url\"\n          name=\"requestUrl\"\n          id=\"requestUrl\"\n          placeholder=\"enter an URL\"\n          onChange={setUrl}\n        />\n      </FormGroup>\n      <div className=\"position-relative form-check\">\n        <label className=\"form-check-label\">\n          <input type=\"checkbox\" className=\"form-check-input\" onChange={setHasBody} /> Add body\n        </label>\n      </div>\n      <Form inline={true} hidden={!hasBody}>\n        <FormGroup>\n          <label>Body</label>\n          <input className=\"form-control-lg form-control\" type=\"textarea\" value={body} onChange={setBody} />{' '}\n        </FormGroup>\n      </Form>\n      <label htmlFor=\"headers\">Request headers</label>{' '}\n      <Button\n        outline={true}\n        color=\"primary\"\n        onClick={() => setHeaders([...headers, [`name-${headers.length + 1}`, 'value']])}\n      >\n        Add header\n      </Button>\n      <br />\n      <br />\n      <HeaderList headers={headers} onChange={setHeaders} />\n      <br />\n      <Button block={true} color=\"primary\" onClick={submit}>\n        Submit\n      </Button>\n      {error && (\n        <Alert color=\"danger\">\n          Error: {error.message ? error.message : ''}\n          {error.stack ? error.stack : ''}\n        </Alert>\n      )}\n    </div>\n  )\n}\n\ntype HeaderListProps = {\n  headers: Array<[string, string]>\n  onChange: (headers: Array<[string, string]>) => void\n}\n\nconst HeaderList: FC<HeaderListProps> = ({ headers, onChange }) => {\n  const onRemove = useCallback((header: [string, string]) => onChange(headers.filter(h => h !== header)), [\n    headers,\n    onChange,\n  ])\n  const onChangeCallback = useCallback(\n    (header: [string, string]) => {\n      const index = headers.indexOf(header)\n      headers[index] = { ...header }\n      onChange([...headers])\n    },\n    [headers, onChange]\n  )\n  return (\n    <>\n      {headers.map((header, index) => (\n        <RenderHeaderInput header={header} key={index} id={index} onChange={onChangeCallback} onRemove={onRemove} />\n      ))}\n    </>\n  )\n}\n\nexport default connect(\n  null,\n  { setSource: updateSource }\n)(withErrorBoundary(memo(HttpRequestSource)))\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateSource, resetEditor, clearEditor, updateAutoFormatSource } from 'actions/actions'\nimport HttpRequestSource from './RequestSource'\nimport { logInfo } from 'helpers/logger'\nimport { useToggleState } from 'hooks/hooks'\nimport {\n  ButtonDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  ButtonGroup,\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap'\nimport { memo, useCallback, FC, ChangeEvent } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { getSourceAutoFormat } from 'store/selectors'\nimport { RootState } from 'state/State'\n\ninterface Props {\n  onFileContentReady: typeof updateSource\n  changeAutoFormat: typeof updateAutoFormatSource\n  onReset: typeof resetEditor\n  onClear: typeof clearEditor\n  autoFormat: boolean\n}\n\nconst LateralMenu: FC<Props> = ({ onReset, onFileContentReady, onClear, autoFormat, changeAutoFormat }) => {\n  const [dropdownIsOpen, toggleDropdown] = useToggleState()\n  const [modalIsOpen, toggleModal] = useToggleState()\n\n  const handleFileChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      logInfo('onFileChange')\n      toggleDropdown()\n      if (e.target.files && e.target.files.length > 0) {\n        const fileReader = new FileReader()\n        logInfo('e.target.files', e.target.files[0].name)\n        fileReader.onload = () => {\n          if (fileReader.result) {\n            onFileContentReady(fileReader.result.toString())\n          }\n        }\n        fileReader.readAsText(e.target.files[0])\n      }\n    },\n    [toggleDropdown, onFileContentReady]\n  )\n\n  const handleAutoFormatChange = useCallback(() => changeAutoFormat(!autoFormat), [changeAutoFormat, autoFormat])\n\n  return (\n    <>\n      <ButtonGroup vertical={true}>\n        <ButtonDropdown isOpen={dropdownIsOpen} toggle={toggleDropdown}>\n          <DropdownToggle id=\"import-menu-button\" caret={true} color=\"primary\">\n            Import\n          </DropdownToggle>\n          <DropdownMenu>\n            <DropdownItem toggle={false}>\n              <label id=\"import-file\">\n                Browse JSON file...\n                <input\n                  type=\"file\"\n                  name=\"file\"\n                  id=\"sourceFile\"\n                  style={{ display: 'none' }}\n                  onChange={handleFileChange}\n                />\n              </label>\n            </DropdownItem>\n            <DropdownItem id=\"http-request\" onClick={toggleModal}>\n              <label>HTTP request</label>\n            </DropdownItem>\n            <DropdownItem onClick={onReset}>\n              <label>Reset</label>\n            </DropdownItem>\n          </DropdownMenu>\n        </ButtonDropdown>\n        <Button color=\"primary\" onClick={onClear}>\n          Clear\n        </Button>\n      </ButtonGroup>\n      <FormGroup className=\"pt-4\" check={true}>\n        <Label check={true}>\n          <Input checked={autoFormat} type=\"checkbox\" onChange={handleAutoFormatChange} />\n          Auto format\n        </Label>\n      </FormGroup>\n      <Modal id=\"requestModal\" role=\"dialog\" size=\"lg\" isOpen={modalIsOpen} toggle={toggleModal}>\n        <ModalHeader toggle={toggleModal}>Import JSON from an HTTP request</ModalHeader>\n        <ModalBody>\n          <HttpRequestSource onFinish={toggleModal} />\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggleModal}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({ autoFormat: getSourceAutoFormat(state) })\n\nexport default connect(\n  mapStateToProps,\n  {\n    onFileContentReady: updateSource,\n    onReset: resetEditor,\n    onClear: clearEditor,\n    changeAutoFormat: updateAutoFormatSource,\n  }\n)(memo(withErrorBoundary(LateralMenu)))\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateSource } from 'actions/actions'\nimport { RootState } from 'state/State'\nimport ImportMenu from './LateralMenu'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { getSourceText, getEditorTheme } from 'store/selectors'\nimport { memo, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n  onChange: typeof updateSource\n  sourceText: string\n  currentEditorTheme: EditorTheme\n}\n\nconst SourceEditor: FC<Props> = ({ onChange, sourceText, currentEditorTheme }) => (\n  <>\n    <div className=\"row\">\n      <div className=\"col-sm-10 offset-sm-2\">\n        <h3>1. Paste your JSON:</h3>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-sm-2\">\n        <ImportMenu />\n      </div>\n      <div className=\"col-sm-10\">\n        <AceEditor\n          mode=\"json\"\n          theme={currentEditorTheme}\n          name=\"sourceAceEditor\"\n          onChange={onChange}\n          fontSize={13}\n          cursorStart={1}\n          showPrintMargin={false}\n          showGutter={true}\n          highlightActiveLine={true}\n          value={sourceText}\n          debounceChangePeriod={1000}\n          minLines={35}\n          maxLines={35}\n          enableBasicAutocompletion={false}\n          enableLiveAutocompletion={false}\n          wrapEnabled={false}\n          setOptions={{\n            showLineNumbers: true,\n          }}\n          editorProps={{ $blockScrolling: Infinity }}\n          annotations={[]}\n          width={'100%'}\n        />\n      </div>\n    </div>\n  </>\n)\n\nconst mapStateToProps = (state: RootState) => ({\n  sourceText: getSourceText(state),\n  currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { onChange: updateSource }\n)(withErrorBoundary(memo(SourceEditor)))\n"],"sourceRoot":""}