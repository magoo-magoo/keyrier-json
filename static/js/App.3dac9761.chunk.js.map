{"version":3,"sources":["Components/Editor/Editor.tsx","Components/Header.tsx","Components/App.tsx","Components/Common/ErrorBoundary.tsx","Actions/actions.ts","Hooks/hooks.ts"],"names":["SourceEditor","lazy","Promise","all","__webpack_require__","e","then","bind","Output","QueryEditor","withErrorBoundary","react","className","fallback","ThemeDropDownItem","_ref2","theme","active","setTheme","onClick","useCallback","setTimeout","window","location","reload","DropdownItem","connect","state","currentTheme","getTheme","switchTheme","memo","_ref","_useToggleState","useToggleState","_useToggleState2","Object","slicedToArray","isOpen","switchIsOpen","_useToggleState3","_useToggleState4","dropDownIsOpen","toggleDropdown","Navbar","color","dark","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","Dropdown","toggle","DropdownToggle","nav","caret","DropdownMenu","right","availableThemes","map","index","Header_ThemeDropDownItem","key","NavItem","NavLink","version","d","__webpack_exports__","App_App","App","Components_Header","Components_Editor_Editor","react_toastify","ErrorBoundary","error","undefined","info","_this2","this","setState","Error","notify","children","props","react__WEBPACK_IMPORTED_MODULE_5__","logError","toast","JSON","stringify","position","hideProgressBar","autoClose","React","Wrapped","updateAutoFormatSource","updateSource","updateQuery","resetEditor","clearEditor","toggleOutputTableModal","updateTableColumns","updateTableGroupBy","updateSearchTerm","updateQueryMode","updateOutputTabSelection","type","source","query","columns","groupBy","searchTerm","mode","tab","initial","arguments","length","_useState","useState","_useState2","_home_travis_build_magoo_magoo_keyrier_json_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","value","setValue","useChangeEventState","initialValue","_useState3","_useState4","event","target"],"mappings":"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","file":"static/js/App.3dac9761.chunk.js","sourcesContent":["import * as React from 'react'\nimport './Editor.css'\nimport { withErrorBoundary } from '../Common/ErrorBoundary'\nimport { lazy, Suspense } from 'react'\nconst SourceEditor = lazy(() => import(/* webpackChunkName: \"SourceEditor\" */ './SourceEditor/SourceEditor'))\nconst Output = lazy(() => import(/* webpackChunkName: \"Output\" */ './Output/Output'))\nconst QueryEditor = lazy(() => import(/* webpackChunkName: \"QueryEditor\" */ './QueryEditor/QueryEditor'))\n\nconst Editor = () => {\n  return (\n    <>\n      <h1 className=\"my-5\">Paste your JSON and Query it.</h1>\n      <div className=\"row my-5\">\n        <div className=\"col\">\n          <Suspense fallback={'loading...'}>\n            <SourceEditor />\n          </Suspense>\n        </div>\n      </div>\n      <div className=\"row align-items-center my-5\">\n        <div className=\"col\">\n          <Suspense fallback={'loading...'}>\n            <QueryEditor />\n          </Suspense>\n        </div>\n      </div>\n      <div className=\"row my-5\">\n        <div className=\"col\">\n          <Suspense fallback={'loading...'}>\n            <Output />\n          </Suspense>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default withErrorBoundary(Editor)\n","import * as React from 'react'\nimport { version } from '../../package.json'\nimport { Theme, availableThemes } from '../Themes/themes'\nimport { switchTheme } from '../Actions/actions'\nimport { connect } from 'react-redux'\nimport { getTheme } from '../Store/selectors'\nimport { RootState } from '../State/State'\nimport { useToggleState } from '../Hooks/hooks'\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavItem,\n  NavLink,\n  Dropdown,\n} from 'reactstrap'\nimport { withErrorBoundary } from './Common/ErrorBoundary'\nimport { memo, useCallback } from 'react'\n\ninterface Props {\n  setTheme: (theme: Theme) => void\n  currentTheme: Theme | null\n}\n\nconst Header: React.FC<Props> = ({ setTheme, currentTheme }) => {\n  const [isOpen, switchIsOpen] = useToggleState()\n  const [dropDownIsOpen, toggleDropdown] = useToggleState()\n\n  return (\n    <>\n      <Navbar color=\"dark\" dark={true} expand=\"md\">\n        <NavbarBrand href=\"/\">Keyrier JSON</NavbarBrand>\n        <NavbarToggler onClick={switchIsOpen} />\n        <Collapse isOpen={isOpen} navbar={true}>\n          <Nav className=\"ml-auto\" navbar={true}>\n            <Dropdown isOpen={dropDownIsOpen} toggle={toggleDropdown}>\n              <DropdownToggle nav={true} caret={true}>\n                Theme\n              </DropdownToggle>\n              <DropdownMenu right={true}>\n                {availableThemes.map((theme, index) => (\n                  <ThemeDropDownItem setTheme={setTheme} key={index} active={currentTheme === theme} theme={theme} />\n                ))}\n              </DropdownMenu>\n            </Dropdown>\n            <NavItem>\n              <NavLink href=\"https://github.com/magoo-magoo/keyrier-json/releases/latest\">v{version}</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink href=\"https://github.com/magoo-magoo/keyrier-json\">GitHub</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </>\n  )\n}\n\ntype ThemeDropDownItemProps = {\n  theme: Theme\n  active: boolean\n  setTheme: (theme: Theme) => void\n}\n\nconst ThemeDropDownItem: React.FC<ThemeDropDownItemProps> = ({ theme, active, setTheme }) => {\n  const onClick = useCallback(() => {\n    setTheme(theme)\n    setTimeout(() => window.location.reload())\n  }, [theme, setTheme])\n  return (\n    <DropdownItem active={active} onClick={onClick}>\n      {theme}\n    </DropdownItem>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  currentTheme: getTheme(state),\n})\n\nexport default connect(\n  mapStateToProps,\n  { setTheme: switchTheme }\n)(memo(withErrorBoundary(Header)))\n","import * as React from 'react'\nimport Editor from './Editor/Editor'\nimport Header from './Header'\nimport { ToastContainer } from 'react-toastify'\n\nexport const App = () => (\n  <div>\n    <Header />\n    <div className=\"container\">\n      <Editor />\n    </div>\n    <ToastContainer />\n  </div>\n)\n\nexport default App\n","import * as React from 'react'\nimport { logError } from '../../helpers/logger'\nimport { toast } from 'react-toastify'\n\nconst MISSING_ERROR = 'Error was swallowed during propagation.'\n\ntype Props = {}\ntype State = {\n  error?: Error\n}\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  public readonly state: State = {\n    error: undefined,\n  }\n\n  public componentDidCatch(error: Error | null, info: object) {\n    this.setState({ error: error || new Error(MISSING_ERROR) }, () => this.notify(info))\n  }\n\n  public render() {\n    const { children } = this.props\n    const { error } = this.state\n\n    if (error) {\n      return <>An error occured</>\n    }\n\n    return children\n  }\n\n  private notify(info: object) {\n    logError('An error occured', this.state.error)\n    logError('error info:', info)\n    toast.error(JSON.stringify(info), { position: 'bottom-right', hideProgressBar: true, autoClose: false })\n  }\n}\n\nexport const withErrorBoundary = <T extends {}>(Wrapped: React.ComponentType<T>) => (props: T) => (\n  <ErrorBoundary>\n    <Wrapped {...props} />\n  </ErrorBoundary>\n)\n","import { Theme } from '../Themes/themes'\nimport { QueryMode, tabType } from '../State/State'\n\nexport interface UpdateAutoFormatSource {\n  type: 'UPDATE_AUTOFORMAT_SOURCE'\n  active: boolean\n}\nexport const updateAutoFormatSource = (active: boolean): UpdateAutoFormatSource => ({\n  active,\n  type: 'UPDATE_AUTOFORMAT_SOURCE',\n})\nexport interface UpdateSource {\n  type: 'UPDATE_SOURCE_TEXT'\n  source: string\n}\nexport const updateSource = (source: string): UpdateSource => ({\n  source,\n  type: 'UPDATE_SOURCE_TEXT',\n})\n\nexport interface UpdateQueryAction {\n  type: 'UPDATE_QUERY'\n  query: string\n}\nexport const updateQuery = (query: string): UpdateQueryAction => ({\n  query,\n  type: 'UPDATE_QUERY',\n})\n\nexport interface ResetEditor {\n  type: 'RESET_EDITOR'\n}\nexport const resetEditor = (): ResetEditor => ({\n  type: 'RESET_EDITOR',\n})\nexport interface ClearEditor {\n  type: 'CLEAR_EDITOR'\n}\nexport const clearEditor = (): ClearEditor => ({\n  type: 'CLEAR_EDITOR',\n})\nexport interface EvaluateCode {\n  type: 'EVALUATE_CODE'\n}\nexport const evaluateCode = (): EvaluateCode => ({\n  type: 'EVALUATE_CODE',\n})\n\nexport interface ToggleOutputTableModal {\n  type: 'TOGGLE_OUTPUT_TABLE_MODAL'\n}\nexport const toggleOutputTableModal = (): ToggleOutputTableModal => ({\n  type: 'TOGGLE_OUTPUT_TABLE_MODAL',\n})\n\nexport interface UpdateTableColumns {\n  type: 'UPDATE_TABLE_COLUMNS'\n  columns: string[]\n}\nexport const updateTableColumns = (columns: string[]): UpdateTableColumns => ({\n  columns,\n  type: 'UPDATE_TABLE_COLUMNS',\n})\nexport interface UpdateTableGroupBy {\n  type: 'UPDATE_TABLE_GROUP_BY'\n  groupBy: string[]\n}\nexport const updateTableGroupBy = (groupBy: string[]): UpdateTableGroupBy => ({\n  groupBy,\n  type: 'UPDATE_TABLE_GROUP_BY',\n})\n\nexport interface SwitchTheme {\n  type: 'SWITCH_GLOBAL_THEME'\n  theme: Theme\n}\nexport const switchTheme = (theme: Theme): SwitchTheme => ({\n  theme,\n  type: 'SWITCH_GLOBAL_THEME',\n})\n\nexport interface UpdateSearchTerm {\n  type: 'UPDATE_OUTPUT_SEARCH_TERM'\n  searchTerm: string\n}\nexport const updateSearchTerm = (searchTerm: string): UpdateSearchTerm => ({\n  searchTerm,\n  type: 'UPDATE_OUTPUT_SEARCH_TERM',\n})\nexport interface UpdateQueryMode {\n  type: 'UPDATE_QUERY_MODE'\n  mode: QueryMode\n}\nexport const updateQueryMode = (mode: QueryMode): UpdateQueryMode => ({\n  mode,\n  type: 'UPDATE_QUERY_MODE',\n})\n\nexport interface UpdateOutputTabSelection {\n  type: 'UPDATE_OUTPUT_TAB_SELECTION'\n  tab: tabType\n}\nexport const updateOutputTabSelection = (tab: tabType): UpdateOutputTabSelection => ({\n  tab,\n  type: 'UPDATE_OUTPUT_TAB_SELECTION',\n})\n\nexport interface ReduxInitAction {\n  type: '@@INIT'\n}\n\nexport type Action =\n  | Readonly<EvaluateCode>\n  | Readonly<ResetEditor>\n  | Readonly<ClearEditor>\n  | Readonly<UpdateQueryAction>\n  | Readonly<ToggleOutputTableModal>\n  | Readonly<UpdateTableColumns>\n  | Readonly<ReduxInitAction>\n  | Readonly<UpdateTableGroupBy>\n  | Readonly<SwitchTheme>\n  | Readonly<UpdateSearchTerm>\n  | Readonly<UpdateQueryMode>\n  | Readonly<UpdateOutputTabSelection>\n  | Readonly<UpdateSource>\n  | Readonly<UpdateAutoFormatSource>\n","import { useState } from 'react'\n\nexport const useToggleState = (initial: boolean = false): [boolean, () => void] => {\n  const [value, setValue] = useState(initial)\n  return [value, () => setValue(!value)]\n}\n\ntype HtmlElementHookable = HTMLSelectElement | HTMLInputElement\n\nexport const useChangeEventState = (\n  initialValue: string\n): [string, (e: React.ChangeEvent<HtmlElementHookable>) => void] => {\n  const [value, setValue] = useState(initialValue)\n\n  const eventHandler = (event: React.ChangeEvent<HtmlElementHookable>) => {\n    if (event && event.target) {\n      setValue(event.target.value)\n    }\n  }\n  return [value, eventHandler]\n}\n"],"sourceRoot":""}