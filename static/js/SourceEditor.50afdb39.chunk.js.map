{"version":3,"sources":["components/common/DeferredAceEditor.tsx","components/source/SourceEditor.tsx"],"names":["AceEditor","mode","theme","name","value","onChange","fontSize","highlightActiveLine","minLines","maxLines","Infinity","showPrintMargin","showGutter","cursorStart","width","debounceChangePeriod","ConnectedSourceEditor","connect","mapStateToProps","state","sourceText","getSourceText","currentEditorTheme","getEditorTheme","updateSource","withErrorBoundary","memo","withPerformance","SourceEditor","onChangeCallback","useCallback","s","unstable_runWithPriority","unstable_IdlePriority"],"mappings":"oHAAA,qIAsBMA,EAAuB,SAAvBA,UAAwB,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtD,OACI,gBAAC,IAAD,CACIJ,KAAMA,EACNC,MAAOA,EACPC,KAAMA,EACNE,SAAUA,EACVC,SAAU,GACVC,qBAAqB,EACrBH,MAAOA,EACPI,SAAU,GACVC,SAAUC,IACVC,iBAAiB,EACjBC,YAAY,EACZC,YAAa,EACbC,MAAK,OACLC,qBAAsB,Q,iCCtClC,4EA6CMC,EAAwBC,aALN,SAAlBC,gBAAmBC,GAAD,MAAuB,CAC3CC,WAAYC,YAAcF,GAC1BG,mBAAoBC,YAAeJ,MAGgB,CAAEd,SAAUmB,KAArCP,CAC1BQ,YAAkBC,eAAKC,aA5BK,SAA1BC,aAA2B,GAAkD,IAAhDvB,EAA+C,EAA/CA,SAAUe,EAAqC,EAArCA,WAAYE,EAAyB,EAAzBA,mBAC/CO,EAAmBC,uBACrB,SAACC,GACOX,IAAeW,GACfC,mCAAyBC,yBAAuB,kBAAM5B,EAAS0B,QAGvE,CAAC1B,EAAUe,IAEf,OACI,gCACI,gBAAC,IAAD,CACInB,KAAK,OACLC,MAAOoB,EACPnB,KAAK,kBACLE,SAAUwB,EACVzB,MAAOgB,OAYkC,mBAG1CJ","file":"static/js/SourceEditor.50afdb39.chunk.js","sourcesContent":["import 'ace-builds'\nimport 'ace-builds/src-noconflict/mode-javascript'\nimport 'ace-builds/src-noconflict/mode-json'\nimport 'ace-builds/src-noconflict/mode-mysql'\nimport 'ace-builds/src-noconflict/theme-github'\nimport 'ace-builds/src-noconflict/theme-monokai'\nimport 'ace-builds/src-noconflict/theme-solarized_dark'\nimport 'ace-builds/src-noconflict/theme-terminal'\nimport 'ace-builds/src-noconflict/theme-tomorrow'\nimport 'ace-builds/webpack-resolver'\nimport * as React from 'react'\nimport { FC } from 'react'\nimport Ace from 'react-ace'\nimport { EditorTheme } from 'themes/themes'\n\ntype Props = {\n    mode: 'javascript' | 'mysql' | 'json'\n    theme: EditorTheme\n    name: string\n    value: string\n    onChange: (v: string, e: any) => void\n}\nconst AceEditor: FC<Props> = ({ mode, theme, name, value, onChange }) => {\n    return (\n        <Ace\n            mode={mode}\n            theme={theme}\n            name={name}\n            onChange={onChange}\n            fontSize={16}\n            highlightActiveLine={true}\n            value={value}\n            minLines={30}\n            maxLines={Infinity}\n            showPrintMargin={false}\n            showGutter={false}\n            cursorStart={1}\n            width={`100%`}\n            debounceChangePeriod={750}\n        />\n    )\n}\nexport { AceEditor }\n","import { updateSource } from 'actions/actions'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\nimport * as React from 'react'\nimport { FC, memo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { unstable_IdlePriority, unstable_runWithPriority } from 'scheduler'\nimport { RootState } from 'state/State'\nimport { getEditorTheme, getSourceText } from 'store/selectors'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n    onChange: typeof updateSource\n    sourceText: string\n    currentEditorTheme: EditorTheme\n}\n\nconst SourceEditor: FC<Props> = ({ onChange, sourceText, currentEditorTheme }) => {\n    const onChangeCallback = useCallback(\n        (s: string) => {\n            if (sourceText !== s) {\n                unstable_runWithPriority(unstable_IdlePriority, () => onChange(s))\n            }\n        },\n        [onChange, sourceText]\n    )\n    return (\n        <>\n            <AceEditor\n                mode=\"json\"\n                theme={currentEditorTheme}\n                name=\"sourceAceEditor\"\n                onChange={onChangeCallback}\n                value={sourceText}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    sourceText: getSourceText(state),\n    currentEditorTheme: getEditorTheme(state),\n})\n\nconst ConnectedSourceEditor = connect(mapStateToProps, { onChange: updateSource })(\n    withErrorBoundary(memo(withPerformance(SourceEditor, 'SourceEditor')))\n)\n\nexport default ConnectedSourceEditor\n"],"sourceRoot":""}