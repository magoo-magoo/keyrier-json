{"version":3,"sources":["components/output/Output.module.scss","components/common/Loading.module.scss","components/output/JsonView.tsx","components/common/Loading.tsx","components/output/DefaultColumnFilter.tsx","components/output/TableAdvancedOptions.tsx","components/output/TableCellComponent.tsx","components/output/TableDetailModal.tsx","components/output/OutputTableView.tsx","components/output/OutputTable.tsx","components/output/Output.tsx"],"names":["module","exports","ReactJson","lazy","errorStyles","border","noop","connect","mapStateToProps","state","src","getOutputObject","searchTerm","getOutputSearchTerm","match","getOutputSearchMatch","size","getOutputObjectSize","debugMode","getDebugMode","onSearchChange","Actions","updateSearchTerm","withErrorBoundary","memo","withPerformance","JsonView","useState","bigSize","setBigSize","isTooBig","handlechange","useCallback","e","target","value","id","style","className","onChange","debounceTimeout","placeholder","fallback","FormGroup","Label","for","prettyPrintBytes","CustomInput","type","name","steps","min","max","parseInt","currentTarget","iconStyle","indentWidth","onAdd","onDelete","onEdit","onSelect","prev","next","deepEqual","Loading","componentName","Styles","loader","DefaultColumnFilter","table","column","filterValue","setFilter","undefined","ReactSelect","data","getOutputarray","displayedColumns","getdisplayedColumns","columns","getColumns","groupBy","getGroupBy","onColumnsChange","updateTableColumns","setTableGroupBy","updateTableGroupBy","toggleModal","toggleOutputTableModal","TableAdvancedOptions","useToggleState","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","cols","Array","mapped","map","c","handleExport","a","xlsx","workBook","utils","book_new","workSheet","json_to_sheet","x","pick","header","book_append_sheet","writeFile","Date","toISOString","handleGroupChange","length","columnOptions","k","label","Button","color","block","onClick","Collapse","isOpen","hidden","onBlur","key","outline","options","isMulti","TableCellComponent","cell","stringValue","takeFirst","customToString","onCellClick","role","React","TableDetailModal","onClose","Modal","toggle","ModalHeader","ModalBody","NumberOfElements","count","OutputTableView","detailsCellValue","setDetailsCellValue","tableData","useMemo","arrayElementName","accessor","Filter","useTable","useFilters","useSortBy","usePagination","headerGroups","prepareRow","pageOptions","page","pageIndex","previousPage","nextPage","canPreviousPage","canNextPage","console","log","isArray","every","Object","keys","headerGroup","hi","scope","headers","ci","minWidth","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","original","cells","ButtonGroup","disabled","onCloseDetailModal","isModalOpen","getisOutputTableModalOpen","OutputTable","ModalFooter","errorMessage","getOutputErrorMessage","getOutputIsArray","activeTab","getOutputActiveTab","objSize","setActiveTab","updateOutputTabSelection","Output","handleActiveTable","handleActiveRawJson","Alert","classNames","active","styles","pointer","TabContent","TabPane","tabId","Badge","pill"],"mappings":"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","file":"static/js/Output.cdf4bda8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointer\":\"Output_pointer__Fhc2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1SW_q\",\"spin\":\"Loading_spin__HjhGY\"};","import Actions from 'actions/actions'\nimport deepEqual from 'fast-deep-equal'\nimport * as React from 'react'\nimport { FC, lazy, memo, Suspense, useCallback, useState } from 'react'\nimport { DebounceInput } from 'react-debounce-input'\nimport { connect } from 'react-redux'\nimport { CustomInput, FormGroup, Label } from 'reactstrap'\n\nimport { withErrorBoundary } from '../../components/common/ErrorBoundary'\nimport { prettyPrintBytes } from '../../core/converters/string'\nimport { withPerformance } from '../../core/logging/performance'\nimport { RootState } from '../../state/State'\nimport { getDebugMode, getOutputObject, getOutputObjectSize, getOutputSearchMatch, getOutputSearchTerm } from '../../store/selectors'\n\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n    src: unknown | null\n    searchTerm: string | undefined\n    match: boolean\n    onSearchChange: typeof Actions.updateSearchTerm\n    size: number\n    debugMode: boolean\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match, size, debugMode }) => {\n    const [bigSize, setBigSize] = useState(4683932)\n    const isTooBig = size > bigSize\n    const handlechange = useCallback((e) => onSearchChange(e.target.value), [onSearchChange])\n    return (\n        <div id=\"jsonView\">\n            <DebounceInput\n                style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n                value={searchTerm}\n                className=\"form-control\"\n                onChange={handlechange}\n                debounceTimeout={500}\n                placeholder=\"Type your search term...\"\n            />\n            <Suspense fallback={<div>Loading...</div>}>\n                {debugMode ? (\n                    <FormGroup>\n                        <Label for=\"exampleCustomRange\">heavy object size: {prettyPrintBytes(bigSize)}</Label>\n                        <CustomInput\n                            type=\"range\"\n                            id=\"exampleCustomRange\"\n                            name=\"customRange\"\n                            value={bigSize}\n                            steps={1024 * 100}\n                            min={1024 * 100}\n                            max={1024 * 1024}\n                            onChange={(e) => setBigSize(parseInt(e.currentTarget.value, 10))}\n                        />\n                    </FormGroup>\n                ) : (\n                    <></>\n                )}\n                {isTooBig ? (\n                    <></>\n                ) : (\n                    <ReactJson\n                        // eslint-disable-next-line @typescript-eslint/ban-types\n                        src={src ? (src as object) : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={noop}\n                        onDelete={noop}\n                        onEdit={noop}\n                        onSelect={noop}\n                    />\n                )}\n            </Suspense>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        src: getOutputObject(state),\n        searchTerm: getOutputSearchTerm(state),\n        match: getOutputSearchMatch(state),\n        size: getOutputObjectSize(state),\n        debugMode: getDebugMode(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onSearchChange: Actions.updateSearchTerm })(\n    withErrorBoundary(memo(withPerformance(JsonView, 'JsonView'), (prev, next) => deepEqual(prev, next))),\n)\n","import * as React from 'react'\nimport { FC } from 'react'\nimport { connect } from 'react-redux'\nimport { getDebugMode } from 'store/selectors'\n\nimport Styles from './Loading.module.scss'\n\ntype Props = {\n    componentName: string\n    debugMode: boolean\n}\nconst Loading: FC<Props> = ({ componentName, debugMode }) => (\n    <div className={Styles.loader}>{process.env.NODE_ENV === 'production' && !debugMode ? '' : componentName}</div>\n)\n\nexport default connect((state) => ({ debugMode: getDebugMode(state) }))(Loading)\n","import * as React from 'react'\nimport { FC } from 'react'\n\nexport const DefaultColumnFilter: FC<any> = (table) => {\n    return (\n        <div>\n            <input\n                className=\"form-control form-control-sm\"\n                value={table.column.filterValue || ''}\n                onChange={(e) => {\n                    table.column.setFilter(e.target.value || undefined)\n                }}\n            />\n        </div>\n    )\n}\n","import Actions from 'actions/actions'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport Loading from 'components/common/Loading'\nimport { withPerformance } from 'core/logging/performance'\nimport { useToggleState } from 'hooks/hooks'\nimport { pick } from 'lodash-es'\nimport * as React from 'react'\nimport { ChangeEvent, FC, lazy, memo, Suspense, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { OptionTypeBase, ValueType } from 'react-select'\nimport { Button, Collapse } from 'reactstrap'\nimport { itemType, RootState } from 'state/State'\nimport { getColumns, getdisplayedColumns, getGroupBy, getOutputarray } from 'store/selectors'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n    data: itemType[]\n    displayedColumns: string[]\n    groupBy: string[]\n    columns: string[]\n    onColumnsChange: typeof Actions.updateTableColumns\n    setTableGroupBy: typeof Actions.updateTableGroupBy\n    toggleModal: typeof Actions.toggleOutputTableModal\n}\n\nconst TableAdvancedOptions: FC<Props> = ({ onColumnsChange, columns, setTableGroupBy, data, displayedColumns, toggleModal }) => {\n    const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n    const handleColumnChange = useCallback(\n        (cols: ValueType<OptionTypeBase> | undefined | null) => {\n            if (cols instanceof Array) {\n                const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n                onColumnsChange(mapped)\n            }\n        },\n        [onColumnsChange],\n    )\n\n    const handleExport = useCallback(async () => {\n        const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n        const workBook = xlsx.utils.book_new()\n        const workSheet = xlsx.utils.json_to_sheet(\n            data.map((x) => pick(x, displayedColumns)),\n            {\n                header: displayedColumns,\n            },\n        )\n        xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n        xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`)\n    }, [displayedColumns, data])\n\n    const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [setTableGroupBy])\n\n    if (columns.length <= 0) {\n        return null\n    }\n\n    const columnOptions = columns.map((k) => ({ value: k, label: k }))\n\n    return (\n        <div className=\"d-flex flex-column py-1 justify-content-center w-100\">\n            <Button className={'float-left  my-1 w-100'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n                {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n            </Button>\n            <Collapse isOpen={optionsCollapsed}>\n                <select hidden={true} className=\"form-control-lg form-control\" name=\"select\" id=\"groupingSelect\" onBlur={handleGroupChange}>\n                    <option key={'Group by...'}>Group by...</option>\n                    {displayedColumns.map((key) => (\n                        <option key={key}>{key}</option>\n                    ))}\n                </select>\n                <Button className=\"col my-1\" color={'success'} onClick={handleExport}>\n                    Export to Excel (.xlsx)\n                </Button>\n                <Button className=\"col my-1\" block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n                    Display results table fullscreen\n                </Button>\n                <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n                    <ReactSelect\n                        options={columnOptions}\n                        value={displayedColumns.map((k) => ({\n                            value: k,\n                            label: k,\n                        }))}\n                        isMulti={true}\n                        onChange={handleColumnChange}\n                    />\n                </Suspense>\n            </Collapse>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps, {\n    onColumnsChange: Actions.updateTableColumns,\n    setTableGroupBy: Actions.updateTableGroupBy,\n    toggleModal: Actions.toggleOutputTableModal,\n})(memo(withErrorBoundary(withPerformance(TableAdvancedOptions, 'TableAdvancedOptions'))))\n","import * as React from 'react'\nimport { FC } from 'react'\nimport { Cell } from 'react-table'\n\nimport { customToString, takeFirst } from '../../core/converters/string'\nimport { itemType } from '../../state/State'\n\ntype CellProps = {\n    cell: Cell<any, itemType>\n    onClick: (value: itemType) => void\n}\n\nexport const TableCellComponent: FC<CellProps> = ({ cell, onClick }) => {\n    if (!cell) {\n        return null\n    }\n    const stringValue = takeFirst(customToString(cell.value), 50)\n    const onCellClick = () => {\n        onClick(cell.value)\n    }\n    return (\n        <td onClick={onCellClick} role=\"gridcell\" className={`text-center text-nowrap data-test-id-cell-data`}>\n            <button className=\"btn\">{stringValue}</button>\n        </td>\n    )\n}\n","import Loading from 'components/common/Loading'\nimport * as React from 'react'\nimport { FC, Suspense } from 'react'\nimport { Modal, ModalBody, ModalHeader } from 'reactstrap'\nimport { itemType } from 'state/State'\n\nconst ReactJson = React.lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\nexport type DetailModalProps = {\n    value: itemType\n    onClose: () => void\n}\n\nexport const TableDetailModal: FC<DetailModalProps> = ({ value, onClose }) => (\n    <Modal isOpen={!!value} toggle={onClose} size=\"lg\">\n        <ModalHeader>Details</ModalHeader>\n        <ModalBody>\n            {typeof value === 'object' ? (\n                <Suspense fallback={<Loading componentName=\"ReactJson\" />}>\n                    <ReactJson\n                        src={value ? value : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={() => null}\n                        onDelete={() => null}\n                        onEdit={() => null}\n                        onSelect={() => null}\n                    />\n                </Suspense>\n            ) : (\n                value\n            )}\n        </ModalBody>\n    </Modal>\n)\n","import { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport Loading from 'components/common/Loading'\nimport { withPerformance } from 'core/logging/performance'\nimport deepEqual from 'fast-deep-equal'\nimport { arrayElementName } from 'models/array'\nimport * as React from 'react'\nimport { FC, memo, Suspense, useMemo, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Cell, Row, useFilters, usePagination, useSortBy, useTable } from 'react-table'\nimport { Button, ButtonGroup } from 'reactstrap'\nimport { itemType, RootState } from 'state/State'\nimport { getColumns, getdisplayedColumns, getGroupBy, getOutputarray } from 'store/selectors'\n\nimport { DefaultColumnFilter } from './DefaultColumnFilter'\nimport TableAdvancedOptions from './TableAdvancedOptions'\nimport { TableCellComponent } from './TableCellComponent'\nimport { TableDetailModal } from './TableDetailModal'\n\ntype Props = {\n    data: itemType[]\n    displayedColumns: string[]\n}\nconst OutputTableView: FC<Props> = ({ data, displayedColumns }) => {\n    const [detailsCellValue, setDetailsCellValue] = useState(null as itemType | null)\n    const tableData = useMemo(() => data.map((e) => (!!e ? (typeof e === 'object' ? e : { [arrayElementName]: e }) : {})), [data])\n    const columns = React.useMemo(\n        () =>\n            displayedColumns.map((name) => {\n                return {\n                    header: name,\n                    accessor: name,\n                    Filter: DefaultColumnFilter,\n                }\n            }),\n        [displayedColumns],\n    )\n\n    const onCloseDetailModal = () => setDetailsCellValue(null)\n    const {\n        headerGroups,\n        // rows,\n        prepareRow,\n\n        pageOptions,\n        page,\n        state: { pageIndex },\n        previousPage,\n        nextPage,\n        canPreviousPage,\n        canNextPage,\n    } = useTable(\n        {\n            columns,\n            data: tableData,\n        },\n        useFilters,\n        useSortBy,\n        usePagination,\n    ) as any\n    console.log('page.length', page.length)\n    if (\n        !tableData ||\n        !Array.isArray(tableData) ||\n        tableData.length === 0 ||\n        tableData.every((e) => e === null || e === undefined || (typeof e === 'object' && Object.keys(e).length === 0))\n    ) {\n        return <NumberOfElements count={tableData.length} />\n    }\n    return (\n        <div className=\"d-flex flex-column overflow-hidden mb-2\">\n            <div className=\"d-flex\">\n                <TableAdvancedOptions />\n            </div>\n            <Suspense fallback={<Loading componentName=\"ReactTable\" />}>\n                <table role=\"grid\" className=\"table table-bordered table-hover table-responsive data-test-id-output-table flex-grow-1\">\n                    <thead>\n                        {headerGroups.map((headerGroup: any, hi: number) => (\n                            <tr key={hi}>\n                                <th scope=\"col\" className=\"shadow-sm text-capitalize text-center data-test-id-column-name\"></th>\n                                {headerGroup.headers.map((column: any, ci: number) => (\n                                    <th\n                                        key={ci}\n                                        scope=\"col\"\n                                        className=\"shadow-sm text-capitalize text-center data-test-id-column-name min-vw-10\"\n                                        style={{ minWidth: '20vh' }}\n                                    >\n                                        <div {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                            {column.render('header')}\n                                            <span>{column.isSorted ? (column.isSortedDesc ? ' 🔽' : ' 🔼') : ''}</span>\n                                        </div>\n\n                                        {column.render('Filter')}\n                                    </th>\n                                ))}\n                            </tr>\n                        ))}\n                    </thead>\n                    <tbody>\n                        {page.map((row: Row, i: number) => {\n                            prepareRow(row)\n                            return (\n                                <tr key={i}>\n                                    <th scope=\"row\">\n                                        <button onClick={() => setDetailsCellValue(row.original)} className=\"btn btn-link\">\n                                            <i className=\"material-icons\">open_in_browser</i>\n                                        </button>\n                                    </th>\n                                    {row.cells.map((cell: Cell) => (\n                                        <TableCellComponent key={cell.column.id} cell={cell} onClick={setDetailsCellValue} />\n                                    ))}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n                <div className=\"d-flex align-items-center\">\n                    <ButtonGroup hidden={pageOptions.length < 2}>\n                        <Button onClick={() => previousPage()} disabled={!canPreviousPage}>\n                            Previous Page\n                        </Button>\n                        <Button onClick={() => nextPage()} disabled={!canNextPage}>\n                            Next Page\n                        </Button>\n                    </ButtonGroup>\n                    <div className=\"ml-2\">{`Page ${(pageIndex as number) + 1} of ${pageOptions.length}`}</div>\n                    <div className=\"ml-auto align-items-center justify-content-end d-flex\">\n                        <NumberOfElements count={tableData.length} />\n                    </div>\n                </div>\n            </Suspense>\n            <TableDetailModal value={detailsCellValue} onClose={onCloseDetailModal} />\n        </div>\n    )\n}\n\nconst NumberOfElements: FC<{ count: number }> = ({ count }) => (\n    <div id=\"data-test-id-output-table-length\">\n        <h4>Number of elements: {count}</h4>\n    </div>\n)\nconst mapStateToProps = (state: RootState) => ({\n    data: getOutputarray(state),\n    displayedColumns: getdisplayedColumns(state),\n    columns: getColumns(state),\n    groupBy: getGroupBy(state),\n})\n\nexport default connect(mapStateToProps)(\n    withErrorBoundary(memo(withPerformance(OutputTableView, 'OutputTableView'), (prev, next) => deepEqual(prev, next))),\n)\n","import './OutputTable.scss'\n\nimport Actions from 'actions/actions'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\nimport * as React from 'react'\nimport { FC, memo } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap'\nimport { RootState } from 'state/State'\nimport { getisOutputTableModalOpen, getOutputObject } from 'store/selectors'\n\nimport View from './OutputTableView'\n\ninterface Props {\n    toggleModal: typeof Actions.toggleOutputTableModal\n    isModalOpen: boolean\n}\n\nconst OutputTable: FC<Props> = ({ toggleModal, isModalOpen }) => {\n    return (\n        <div className=\"output-table d-flex h-100\">\n            <Modal isOpen={isModalOpen} toggle={toggleModal} className=\"mw-100\">\n                <ModalHeader toggle={toggleModal}>Table view</ModalHeader>\n                <ModalBody>\n                    <View />\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                </ModalFooter>\n            </Modal>\n\n            <View />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    data: getOutputObject(state),\n    isModalOpen: getisOutputTableModalOpen(state),\n})\n\nexport default connect(mapStateToProps, {\n    toggleModal: Actions.toggleOutputTableModal,\n})(withErrorBoundary(memo(withPerformance(OutputTable, 'OutputTable'))))\n","import Actions from 'actions/actions'\nimport classNames from 'classnames'\nimport * as React from 'react'\nimport { FC, memo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { Alert, Badge, Button, TabContent, TabPane } from 'reactstrap'\n\nimport { withErrorBoundary } from '../../components/common/ErrorBoundary'\nimport { prettyPrintBytes } from '../../core/converters/string'\nimport { withPerformance } from '../../core/logging/performance'\nimport { RootState, tabType } from '../../state/State'\nimport { getOutputActiveTab, getOutputErrorMessage, getOutputIsArray, getOutputObjectSize } from '../../store/selectors'\nimport JsonView from './JsonView'\nimport styles from './Output.module.scss'\nimport OutputTable from './OutputTable'\n\ninterface Props {\n    isArray: boolean\n    activeTab: tabType\n    objSize: number\n    setActiveTab: typeof Actions.updateOutputTabSelection\n    errorMessage?: string\n}\n\nconst Output: FC<Props> = ({ isArray, errorMessage, activeTab, setActiveTab, objSize }) => {\n    const handleActiveTable = useCallback(() => setActiveTab('Table'), [setActiveTab])\n    const handleActiveRawJson = useCallback(() => setActiveTab('RawJson'), [setActiveTab])\n    return (\n        <>\n            {errorMessage && (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-10 offset-sm-2\">\n                            <Alert className=\"row align-items-center\" color=\"danger\">\n                                <i className=\"material-icons mr-2\">error</i>\n                                <span>{errorMessage}</span>\n                            </Alert>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <div className=\"d-flex flex-column h-100\">\n                <div className=\"d-flex\">\n                    <ul className=\"nav nav-tabs\">\n                        <li className=\"nav-item\">\n                            <Button\n                                className={classNames({\n                                    active: activeTab === 'RawJson',\n                                    'nav-link': true,\n                                    [styles.pointer]: true,\n                                })}\n                                onClick={handleActiveRawJson}\n                            >\n                                View raw JSON\n                            </Button>\n                        </li>\n                        <li className=\"nav-item\" hidden={!isArray}>\n                            <Button\n                                className={classNames({\n                                    active: activeTab === 'Table',\n                                    'nav-link': true,\n                                    [styles.pointer]: true,\n                                })}\n                                onClick={handleActiveTable}\n                            >\n                                View table\n                            </Button>\n                        </li>\n                    </ul>\n                </div>\n                <TabContent className=\"d-flex flex-column flex-grow-1\" activeTab={activeTab}>\n                    {activeTab === 'RawJson' && (\n                        <TabPane className=\"h-100\" tabId=\"RawJson\">\n                            <div className=\"row h-100\">\n                                <div className=\"col-sm-2 pt-5\">\n                                    <h3>\n                                        <Badge id=\"badgeSize\" color=\"info\" pill={true}>\n                                            {prettyPrintBytes(objSize)}\n                                        </Badge>\n                                    </h3>\n                                </div>\n                                <div className=\"col-sm-10\">\n                                    <JsonView />\n                                </div>\n                            </div>\n                        </TabPane>\n                    )}\n                    <TabPane className=\"h-100\" tabId=\"Table\">\n                        {activeTab === 'Table' && <OutputTable />}\n                    </TabPane>\n                </TabContent>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    errorMessage: getOutputErrorMessage(state),\n    isArray: getOutputIsArray(state),\n    activeTab: getOutputActiveTab(state),\n    objSize: getOutputObjectSize(state),\n})\n\nexport default connect(mapStateToProps, { setActiveTab: Actions.updateOutputTabSelection })(\n    memo(withErrorBoundary(withPerformance(Output, 'Output'))),\n)\n"],"sourceRoot":""}