{"version":3,"sources":["components/output/Output.module.scss","components/common/Loading.module.scss","components/output/JsonView.tsx","components/common/Loading.tsx","components/output/TableAdvancedOptions.tsx","components/output/TableCellComponent.tsx","components/output/TableDetailModal.tsx","components/output/DefaultColumnFilter.tsx","components/output/OutputTableView.tsx","components/output/OutputTable.tsx","components/output/Output.tsx"],"names":["module","exports","ReactJson","lazy","errorStyles","border","noop","connect","mapStateToProps","state","src","getOutputObject","searchTerm","getOutputSearchTerm","match","getOutputSearchMatch","size","getOutputObjectSize","debugMode","getDebugMode","onSearchChange","updateSearchTerm","withErrorBoundary","memo","withPerformance","JsonView","useState","bigSize","setBigSize","isTooBig","handlechange","useCallback","e","target","value","id","style","className","onChange","debounceTimeout","placeholder","fallback","FormGroup","Label","for","prettyPrintBytes","CustomInput","type","name","steps","min","max","parseInt","currentTarget","iconStyle","indentWidth","onAdd","onDelete","onEdit","onSelect","prev","next","deepEqual","Loading","componentName","Styles","loader","ReactSelect","data","getOutputarray","displayedColumns","getdisplayedColumns","columns","getColumns","groupBy","getGroupBy","onColumnsChange","updateTableColumns","setTableGroupBy","updateTableGroupBy","toggleModal","toggleOutputTableModal","TableAdvancedOptions","useToggleState","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","cols","Array","mapped","map","c","handleExport","a","xlsx","workBook","utils","book_new","workSheet","json_to_sheet","x","_","pick","header","book_append_sheet","writeFile","Date","toISOString","handleGroupChange","length","columnOptions","k","label","Button","color","block","onClick","Collapse","isOpen","key","outline","options","isMulti","TableCellComponent","cell","stringValue","customToString","isTooLong","displayValue","takeFirst","onCellClick","undefined","React","TableDetailModal","onClose","Modal","toggle","ModalHeader","ModalBody","DefaultColumnFilter","table","column","filterValue","setFilter","OutputTableView","detailsCellValue","setDetailsCellValue","tableData","useMemo","arrayElementName","accessor","Filter","useTable","useFilters","useSortBy","headerGroups","rows","prepareRow","isArray","every","Object","keys","headerGroup","hi","scope","headers","ci","minWidth","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","original","cells","onCloseDetailModal","isModalOpen","getisOutputTableModalOpen","OutputTable","ModalFooter","errorMessage","getOutputErrorMessage","getOutputIsArray","activeTab","getOutputActiveTab","objSize","setActiveTab","updateOutputTabSelection","Output","handleActiveTable","handleActiveRawJson","Alert","classNames","active","styles","pointer","hidden","TabContent","TabPane","tabId","Badge","pill"],"mappings":"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","file":"static/js/Output.712d5d8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointer\":\"Output_pointer__Fhc2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1SW_q\",\"spin\":\"Loading_spin__HjhGY\"};","import * as React from 'react'\nimport {\n    getOutputObject,\n    getOutputSearchTerm,\n    getOutputSearchMatch,\n    getOutputObjectSize,\n    getDebugMode,\n} from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { connect } from 'react-redux'\nimport { DebounceInput } from 'react-debounce-input'\nimport { updateSearchTerm } from 'actions/actions'\nimport { Suspense, lazy, memo, useCallback, FC, useState } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport deepEqual from 'fast-deep-equal'\nimport { FormGroup, Label, CustomInput } from 'reactstrap'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withPerformance } from 'core/logging/performance'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n    src: object | null\n    searchTerm: string | undefined\n    match: boolean\n    onSearchChange: typeof updateSearchTerm\n    size: number\n    debugMode: boolean\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match, size, debugMode }) => {\n    const [bigSize, setBigSize] = useState(4683932)\n    const isTooBig = size > bigSize\n    const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange])\n    return (\n        <div id=\"jsonView\">\n            <DebounceInput\n                style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n                value={searchTerm}\n                className=\"form-control\"\n                onChange={handlechange}\n                debounceTimeout={500}\n                placeholder=\"Type your search term...\"\n            />\n            <Suspense fallback={<div>Loading...</div>}>\n                {debugMode ? (\n                    <FormGroup>\n                        <Label for=\"exampleCustomRange\">heavy object size: {prettyPrintBytes(bigSize)}</Label>\n                        <CustomInput\n                            type=\"range\"\n                            id=\"exampleCustomRange\"\n                            name=\"customRange\"\n                            value={bigSize}\n                            steps={1024 * 100}\n                            min={1024 * 100}\n                            max={1024 * 1024}\n                            onChange={e => setBigSize(parseInt(e.currentTarget.value, 10))}\n                        />\n                    </FormGroup>\n                ) : (\n                    <></>\n                )}\n                {isTooBig ? (\n                    <></>\n                ) : (\n                    <ReactJson\n                        src={src ? src : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={noop}\n                        onDelete={noop}\n                        onEdit={noop}\n                        onSelect={noop}\n                    />\n                )}\n            </Suspense>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        src: getOutputObject(state),\n        searchTerm: getOutputSearchTerm(state),\n        match: getOutputSearchMatch(state),\n        size: getOutputObjectSize(state),\n        debugMode: getDebugMode(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onSearchChange: updateSearchTerm })(\n    withErrorBoundary(memo(withPerformance(JsonView, 'JsonView'), (prev, next) => deepEqual(prev, next)))\n)\n","import * as React from 'react'\nimport Styles from './Loading.module.scss'\nimport { connect } from 'react-redux'\nimport { getDebugMode } from 'store/selectors'\nimport { FC } from 'react'\n\ntype Props = {\n    componentName: string\n    debugMode: boolean\n}\nconst Loading: FC<Props> = ({ componentName, debugMode }) => (\n    <div className={Styles.loader}>{process.env.NODE_ENV === 'production' && !debugMode ? '' : componentName}</div>\n)\n\nexport default connect(state => ({ debugMode: getDebugMode(state) }))(Loading)\n","import { toggleOutputTableModal, updateTableColumns, updateTableGroupBy } from 'actions/actions'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport Loading from 'components/common/Loading'\nimport { withPerformance } from 'core/logging/performance'\nimport { useToggleState } from 'hooks/hooks'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { ChangeEvent, FC, lazy, memo, Suspense, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Collapse } from 'reactstrap'\nimport { itemType, RootState } from 'state/State'\nimport { getColumns, getdisplayedColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { ValueType } from 'react-select'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n    data: itemType[]\n    displayedColumns: string[]\n    groupBy: string[]\n    columns: string[]\n    onColumnsChange: typeof updateTableColumns\n    setTableGroupBy: typeof updateTableGroupBy\n    toggleModal: typeof toggleOutputTableModal\n}\n\nconst TableAdvancedOptions: FC<Props> = ({\n    onColumnsChange,\n    columns,\n    setTableGroupBy,\n    data,\n    displayedColumns,\n    toggleModal,\n}) => {\n    const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n    const handleColumnChange = useCallback(\n        (cols: ValueType<{}> | undefined | null) => {\n            if (cols instanceof Array) {\n                const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n                onColumnsChange(mapped)\n            }\n        },\n        [onColumnsChange]\n    )\n\n    const handleExport = useCallback(async () => {\n        const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n        const workBook = xlsx.utils.book_new()\n        const workSheet = xlsx.utils.json_to_sheet(\n            data.map(x => _.pick(x, displayedColumns)),\n            {\n                header: displayedColumns,\n            }\n        )\n        xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n        xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`)\n    }, [displayedColumns, data])\n\n    const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [\n        setTableGroupBy,\n    ])\n\n    if (columns.length <= 0) {\n        return <></>\n    }\n\n    const columnOptions = columns.map(k => ({ value: k, label: k }))\n\n    return (\n        <div className=\"row py-1\">\n            <div className=\"col-2\">\n                <Button className={'float-left col my-1'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n                    {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n                </Button>\n                <Collapse isOpen={optionsCollapsed}>\n                    <select\n                        className=\"form-control-lg form-control\"\n                        name=\"select\"\n                        id=\"groupingSelect\"\n                        onChange={handleGroupChange}\n                    >\n                        <option key={'Group by...'}>Group by...</option>\n                        {displayedColumns.map(key => (\n                            <option key={key}>{key}</option>\n                        ))}\n                    </select>\n                    <Button className=\"col my-1\" color={'success'} onClick={handleExport}>\n                        Export to Excel (.xlsx)\n                    </Button>\n                    <Button className=\"col my-1\" block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n                        Display results table fullscreen\n                    </Button>\n                    <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n                        <ReactSelect\n                            options={columnOptions}\n                            value={displayedColumns.map(k => ({\n                                value: k,\n                                label: k,\n                            }))}\n                            isMulti={true}\n                            onChange={handleColumnChange}\n                        />\n                    </Suspense>\n                </Collapse>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps, {\n    onColumnsChange: updateTableColumns,\n    setTableGroupBy: updateTableGroupBy,\n    toggleModal: toggleOutputTableModal,\n})(memo(withErrorBoundary(withPerformance(TableAdvancedOptions, 'TableAdvancedOptions'))))\n","import * as React from 'react'\nimport { FC } from 'react'\nimport { customToString, takeFirst } from 'core/converters/string'\nimport { Cell } from 'react-table'\nimport { itemType } from 'state/State'\n\ntype CellProps = {\n    cell: Cell<any, itemType>\n    onClick: (value: itemType) => void\n}\n\nexport const TableCellComponent: FC<CellProps> = ({ cell, onClick }) => {\n    if (!cell) {\n        return <></>\n    }\n    const stringValue = customToString(cell.value)\n    const isTooLong = stringValue.length > 50\n    const displayValue = isTooLong ? takeFirst(stringValue, 50) : stringValue\n    const onCellClick = isTooLong\n        ? () => {\n              onClick(cell.value)\n          }\n        : undefined\n    return (\n        <td onClick={onCellClick} className={`text-center text-nowrap data-test-id-cell-data`}>\n            {isTooLong ? <button className=\"btn\">{displayValue}</button> : displayValue}\n        </td>\n    )\n}\n","import Loading from 'components/common/Loading'\nimport * as React from 'react'\nimport { FC, Suspense } from 'react'\nimport { Modal, ModalBody, ModalHeader, ModalProps } from 'reactstrap'\nimport { itemType } from 'state/State'\n\nconst ReactJson = React.lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\nexport type DetailModalProps = {\n    value: itemType\n    onClose: () => void\n}\n\nexport const TableDetailModal: FC<DetailModalProps> = ({ value, onClose }) => (\n    <Modal<ModalProps> isOpen={!!value} toggle={onClose} size=\"lg\">\n        <ModalHeader>Details</ModalHeader>\n        <ModalBody>\n            {typeof value === 'object' ? (\n                <Suspense fallback={<Loading componentName=\"ReactJson\" />}>\n                    <ReactJson\n                        src={value ? value : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={() => null}\n                        onDelete={() => null}\n                        onEdit={() => null}\n                        onSelect={() => null}\n                    />\n                </Suspense>\n            ) : (\n                value\n            )}\n        </ModalBody>\n    </Modal>\n)\n","import * as React from 'react'\nimport { FC } from 'react'\n\nexport const DefaultColumnFilter: FC<any> = table => {\n    return (\n        <div>\n            <input\n                className=\"form-control form-control-sm\"\n                value={table.column.filterValue || ''}\n                onChange={e => {\n                    table.column.setFilter(e.target.value || undefined)\n                }}\n            />\n        </div>\n    )\n}\n","import { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport Loading from 'components/common/Loading'\nimport { withPerformance } from 'core/logging/performance'\nimport deepEqual from 'fast-deep-equal'\nimport { arrayElementName } from 'models/array'\nimport * as React from 'react'\nimport { FC, memo, Suspense, useMemo, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { useFilters, useSortBy, useTable } from 'react-table'\nimport { itemType, RootState } from 'state/State'\nimport { getColumns, getdisplayedColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport TableAdvancedOptions from './TableAdvancedOptions'\nimport { TableCellComponent } from './TableCellComponent'\nimport { TableDetailModal } from './TableDetailModal'\nimport { DefaultColumnFilter } from './DefaultColumnFilter'\n\ntype Props = {\n    data: itemType[]\n    displayedColumns: string[]\n}\nexport const OutputTableView: FC<Props> = ({ data, displayedColumns }) => {\n    const [detailsCellValue, setDetailsCellValue] = useState(null as itemType | null)\n    const tableData = useMemo(\n        () => data.map(e => (!!e ? (typeof e === 'object' ? e : { [arrayElementName]: e }) : {})),\n        [data]\n    )\n    const columns = React.useMemo(\n        () =>\n            displayedColumns.map(name => {\n                return {\n                    header: name,\n                    accessor: name,\n                    Filter: DefaultColumnFilter,\n                }\n            }),\n        [displayedColumns]\n    )\n\n    const onCloseDetailModal = () => setDetailsCellValue(null)\n    const { headerGroups, rows, prepareRow } = useTable(\n        {\n            columns,\n            data: tableData,\n        },\n        useFilters,\n        useSortBy\n    )\n    if (\n        !tableData ||\n        !Array.isArray(tableData) ||\n        tableData.length === 0 ||\n        tableData.every(e => e === null || e === undefined || (typeof e === 'object' && Object.keys(e).length === 0))\n    ) {\n        return <div />\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <TableAdvancedOptions />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Suspense fallback={<Loading componentName=\"ReactTable\" />}>\n                        <table className=\"table table-bordered table-hover table-responsive data-test-id-output-table\">\n                            <thead>\n                                {headerGroups.map((headerGroup, hi) => (\n                                    <tr key={hi}>\n                                        <th\n                                            scope=\"col\"\n                                            className=\"shadow-sm text-capitalize text-center data-test-id-column-name\"\n                                        ></th>\n                                        {headerGroup.headers.map((column, ci) => (\n                                            <th\n                                                key={ci}\n                                                scope=\"col\"\n                                                className=\"shadow-sm text-capitalize text-center data-test-id-column-name min-vw-10\"\n                                                style={{ minWidth: '20vh' }}\n                                            >\n                                                <div {...column.getHeaderProps((column as any).getSortByToggleProps())}>\n                                                    {column.render('header')}\n                                                    <span>\n                                                        {(column as any).isSorted\n                                                            ? (column as any).isSortedDesc\n                                                                ? ' 🔽'\n                                                                : ' 🔼'\n                                                            : ''}\n                                                    </span>\n                                                </div>\n\n                                                {column.render('Filter')}\n                                            </th>\n                                        ))}\n                                    </tr>\n                                ))}\n                            </thead>\n                            <tbody>\n                                {rows.map((row, i) => {\n                                    prepareRow(row)\n                                    return (\n                                        <tr key={i}>\n                                            <th scope=\"row\">\n                                                <button\n                                                    onClick={() => setDetailsCellValue(row.original)}\n                                                    className=\"btn btn-link\"\n                                                >\n                                                    <i className=\"material-icons\">open_in_browser</i>\n                                                </button>\n                                            </th>\n                                            {row.cells.map(cell => (\n                                                <TableCellComponent\n                                                    key={cell.column.id}\n                                                    cell={cell}\n                                                    onClick={setDetailsCellValue}\n                                                />\n                                            ))}\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                        </table>\n                    </Suspense>\n                </div>\n            </div>\n            <div id=\"data-test-id-output-table-length\" className=\"mx-3 align-items-center justify-content-end d-flex\">\n                <h4>Number of elements: {tableData.length}</h4>\n            </div>\n            <TableDetailModal value={detailsCellValue} onClose={onCloseDetailModal} />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps)(\n    withErrorBoundary(memo(withPerformance(OutputTableView, 'OutputTableView'), (prev, next) => deepEqual(prev, next)))\n)\n","import { toggleOutputTableModal } from 'actions/actions'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\nimport * as React from 'react'\nimport { FC, memo } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from 'reactstrap'\nimport { RootState } from 'state/State'\nimport { getisOutputTableModalOpen, getOutputObject } from 'store/selectors'\nimport './OutputTable.scss'\nimport OutputTableView from './OutputTableView'\n\ninterface Props {\n    toggleModal: typeof toggleOutputTableModal\n    isModalOpen: boolean\n}\n\nconst OutputTable: FC<Props> = ({ toggleModal, isModalOpen }) => {\n    return (\n        <div className=\"output-table\">\n            <Modal isOpen={isModalOpen} toggle={toggleModal} className=\"mw-100\">\n                <ModalHeader toggle={toggleModal}>Table view</ModalHeader>\n                <ModalBody>\n                    <OutputTableView />\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                </ModalFooter>\n            </Modal>\n\n            <div className=\"row\">\n                <div className=\"col\">\n                    <OutputTableView />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    data: getOutputObject(state),\n    isModalOpen: getisOutputTableModalOpen(state),\n})\n\nexport default connect(mapStateToProps, {\n    toggleModal: toggleOutputTableModal,\n})(withErrorBoundary(memo(withPerformance(OutputTable, 'OutputTable'))))\n","import { updateOutputTabSelection } from 'actions/actions'\nimport classNames from 'classnames'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withPerformance } from 'core/logging/performance'\nimport * as React from 'react'\nimport { FC, memo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { Alert, Badge, Button, TabContent, TabPane } from 'reactstrap'\nimport { RootState, tabType } from 'state/State'\nimport { getOutputActiveTab, getOutputErrorMessage, getOutputIsArray, getOutputObjectSize } from 'store/selectors'\nimport JsonView from './JsonView'\nimport styles from './Output.module.scss'\nimport OutputTable from './OutputTable'\n\ninterface Props {\n    isArray: boolean\n    activeTab: tabType\n    objSize: number\n    setActiveTab: typeof updateOutputTabSelection\n    errorMessage?: string\n}\n\nconst Output: FC<Props> = ({ isArray, errorMessage, activeTab, setActiveTab, objSize }) => {\n    const handleActiveTable = useCallback(() => setActiveTab('Table'), [setActiveTab])\n    const handleActiveRawJson = useCallback(() => setActiveTab('RawJson'), [setActiveTab])\n    return (\n        <>\n            {errorMessage && (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-10 offset-sm-2\">\n                            <Alert className=\"row align-items-center\" color=\"danger\">\n                                <i className=\"material-icons mr-2\">error</i>\n                                <span>{errorMessage}</span>\n                            </Alert>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <ul className=\"nav nav-tabs\">\n                            <li className=\"nav-item\">\n                                <Button\n                                    className={classNames({\n                                        active: activeTab === 'RawJson',\n                                        'nav-link': true,\n                                        [styles.pointer]: true,\n                                    })}\n                                    onClick={handleActiveRawJson}\n                                >\n                                    View raw JSON\n                                </Button>\n                            </li>\n                            <li className=\"nav-item\" hidden={!isArray}>\n                                <Button\n                                    className={classNames({\n                                        active: activeTab === 'Table',\n                                        'nav-link': true,\n                                        [styles.pointer]: true,\n                                    })}\n                                    onClick={handleActiveTable}\n                                >\n                                    View table\n                                </Button>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <TabContent activeTab={activeTab}>\n                    {activeTab === 'RawJson' && (\n                        <TabPane tabId=\"RawJson\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-2 pt-5\">\n                                    <h3>\n                                        <Badge id=\"badgeSize\" color=\"info\" pill={true}>\n                                            {prettyPrintBytes(objSize)}\n                                        </Badge>\n                                    </h3>\n                                </div>\n                                <div className=\"col-sm-10\">\n                                    <JsonView />\n                                </div>\n                            </div>\n                        </TabPane>\n                    )}\n                    <TabPane tabId=\"Table\">{activeTab === 'Table' && <OutputTable />}</TabPane>\n                </TabContent>\n            </>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    errorMessage: getOutputErrorMessage(state),\n    isArray: getOutputIsArray(state),\n    activeTab: getOutputActiveTab(state),\n    objSize: getOutputObjectSize(state),\n})\n\nexport default connect(mapStateToProps, { setActiveTab: updateOutputTabSelection })(\n    memo(withErrorBoundary(withPerformance(Output, 'Output')))\n)\n"],"sourceRoot":""}