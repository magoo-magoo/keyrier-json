{"version":3,"sources":["components/output/Output.module.scss","components/common/Loading.module.scss","components/common/Loading.tsx","components/output/TableAdvancedOptions.tsx","components/output/OutputTableView.tsx","components/output/OutputTable.tsx","components/output/JsonView.tsx","components/output/Output.tsx"],"names":["module","exports","connect","state","debugMode","getDebugMode","Loading","componentName","className","Styles","loader","ReactSelect","lazy","mapStateToProps","data","getOutputarray","displayedColumns","getdisplayedColumns","columns","getColumns","groupBy","getGroupBy","onColumnsChange","updateTableColumns","setTableGroupBy","updateTableGroupBy","memo","withErrorBoundary","withPerformance","TableAdvancedOptions","useToggleState","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","useCallback","cols","Array","mapped","map","c","value","handleExport","a","xlsx","workBook","utils","book_new","workSheet","json_to_sheet","x","_","pick","header","book_append_sheet","writeFile","Date","toISOString","handleGroupChange","e","target","length","columnOptions","k","label","Button","color","block","onClick","Collapse","isOpen","name","id","onChange","key","fallback","options","isMulti","ReactJson","CellComponent","cell","stringValue","customToString","isTooLong","displayValue","takeFirst","onCellClick","undefined","DetailModal","onClose","Modal","toggle","size","ModalHeader","ModalBody","src","iconStyle","indentWidth","onAdd","onDelete","onEdit","onSelect","DefaultColumnFilter","column","filterValue","setFilter","OutputTableView","useState","detailsCellValue","setDetailsCellValue","tableData","useMemo","arrayElementName","React","accessor","Filter","useTable","useFilters","useSortBy","headerGroups","rows","prepareRow","isArray","every","Object","keys","headerGroup","hi","scope","headers","ci","style","minWidth","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","original","cells","onCloseDetailModal","prev","next","deepEqual","getOutputObject","isModalOpen","getisOutputTableModalOpen","toggleModal","toggleOutputTableModal","OutputTable","ModalFooter","outline","errorStyles","border","noop","searchTerm","getOutputSearchTerm","match","getOutputSearchMatch","getOutputObjectSize","onSearchChange","updateSearchTerm","JsonView","bigSize","setBigSize","isTooBig","handlechange","debounceTimeout","placeholder","FormGroup","Label","for","prettyPrintBytes","CustomInput","type","steps","min","max","parseInt","currentTarget","errorMessage","getOutputErrorMessage","getOutputIsArray","activeTab","getOutputActiveTab","objSize","setActiveTab","updateOutputTabSelection","Output","handleActiveTable","handleActiveRawJson","Alert","classNames","active","styles","pointer","hidden","TabContent","TabPane","tabId","Badge","pill"],"mappings":"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","file":"static/js/Output.9c4852a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pointer\":\"Output_pointer__Fhc2d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__1SW_q\",\"spin\":\"Loading_spin__HjhGY\"};","import * as React from 'react'\nimport Styles from './Loading.module.scss'\nimport { connect } from 'react-redux'\nimport { getDebugMode } from 'store/selectors'\nimport { FC } from 'react'\n\ntype Props = {\n    componentName: string\n    debugMode: boolean\n}\nconst Loading: FC<Props> = ({ componentName, debugMode }) => (\n    <div className={Styles.loader}>{process.env.NODE_ENV === 'production' && !debugMode ? '' : componentName}</div>\n)\n\nexport default connect(state => ({ debugMode: getDebugMode(state) }))(Loading)\n","import * as React from 'react'\nimport { connect } from 'react-redux'\nimport { updateTableColumns, updateTableGroupBy } from 'actions/actions'\nimport { itemType, RootState } from 'state/State'\nimport { ValueType } from 'react-select/lib/types'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useToggleState } from 'hooks/hooks'\nimport { Button, Collapse } from 'reactstrap'\nimport { memo, useCallback, Suspense, ChangeEvent } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { lazy, FC } from 'react'\nimport Loading from 'components/common/Loading'\nimport _ from 'lodash'\nimport { withPerformance } from 'core/logging/performance'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n    data: itemType[]\n    displayedColumns: string[]\n    groupBy: string[]\n    columns: string[]\n    onColumnsChange: typeof updateTableColumns\n    setTableGroupBy: typeof updateTableGroupBy\n}\n\nconst TableAdvancedOptions: FC<Props> = ({ onColumnsChange, columns, setTableGroupBy, data, displayedColumns }) => {\n    const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n    const handleColumnChange = useCallback(\n        (cols: ValueType<{}> | undefined | null) => {\n            if (cols instanceof Array) {\n                const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n                onColumnsChange(mapped)\n            }\n        },\n        [onColumnsChange]\n    )\n\n    const handleExport = useCallback(async () => {\n        const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n        const workBook = xlsx.utils.book_new()\n        const workSheet = xlsx.utils.json_to_sheet(\n            data.map(x => _.pick(x, displayedColumns)),\n            {\n                header: displayedColumns,\n            }\n        )\n        xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n        xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`)\n    }, [displayedColumns, data])\n\n    const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [\n        setTableGroupBy,\n    ])\n\n    if (columns.length <= 0) {\n        return <></>\n    }\n\n    const columnOptions = columns.map(k => ({ value: k, label: k }))\n\n    return (\n        <div className=\"row\">\n            <div className=\"col\">\n                <Button className={'float-left'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n                    {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n                </Button>\n                <Collapse isOpen={optionsCollapsed}>\n                    <select\n                        className=\"form-control-lg form-control\"\n                        name=\"select\"\n                        id=\"groupingSelect\"\n                        onChange={handleGroupChange}\n                    >\n                        <option key={'Group by...'}>Group by...</option>\n                        {displayedColumns.map(key => (\n                            <option key={key}>{key}</option>\n                        ))}\n                    </select>\n                    <Button color={'success'} onClick={handleExport}>\n                        Export to Excel (.xlsx)\n                    </Button>\n                    <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n                        <ReactSelect\n                            options={columnOptions}\n                            value={displayedColumns.map(k => ({\n                                value: k,\n                                label: k,\n                            }))}\n                            isMulti={true}\n                            onChange={handleColumnChange}\n                        />\n                    </Suspense>\n                </Collapse>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onColumnsChange: updateTableColumns, setTableGroupBy: updateTableGroupBy })(\n    memo(withErrorBoundary(withPerformance(TableAdvancedOptions, 'TableAdvancedOptions')))\n)\n","// import 'react-table/react-table.css'\n\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport TableAdvancedOptions from './TableAdvancedOptions'\nimport { itemType, RootState } from 'state/State'\nimport { getdisplayedColumns, getColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { useState, Suspense, lazy, memo, FC, useMemo } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { Modal, ModalProps, ModalHeader, ModalBody } from 'reactstrap'\nimport deepEqual from 'fast-deep-equal'\nimport Loading from 'components/common/Loading'\nimport { arrayElementName } from 'models/array'\nimport { withPerformance } from 'core/logging/performance'\nimport { useTable, Cell, useSortBy, useFilters } from 'react-table'\nimport { customToString, takeFirst } from 'core/converters/string'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ntype CellProps = {\n    cell: Cell<any, itemType>\n    onClick: (value: itemType) => void\n}\nconst CellComponent: FC<CellProps> = ({ cell, onClick }) => {\n    if (!cell) {\n        return <></>\n    }\n    const stringValue = customToString(cell.value)\n    const isTooLong = stringValue.length > 50\n    const displayValue = isTooLong ? takeFirst(stringValue, 50) : stringValue\n    const onCellClick = isTooLong\n        ? () => {\n              onClick(cell.value)\n          }\n        : undefined\n    return (\n        <td onClick={onCellClick} className={`text-center text-nowrap data-test-id-cell-data`}>\n            {isTooLong ? <button className=\"btn\">{displayValue}</button> : displayValue}\n        </td>\n    )\n}\n\ntype DetailModalProps = {\n    value: itemType\n    onClose: () => void\n}\nconst DetailModal: FC<DetailModalProps> = ({ value, onClose }) => (\n    <Modal<ModalProps> isOpen={!!value} toggle={onClose} size=\"lg\">\n        <ModalHeader>Details</ModalHeader>\n        <ModalBody>\n            {typeof value === 'object' ? (\n                <Suspense fallback={<Loading componentName=\"ReactJson\" />}>\n                    <ReactJson\n                        src={value ? value : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={() => null}\n                        onDelete={() => null}\n                        onEdit={() => null}\n                        onSelect={() => null}\n                    />\n                </Suspense>\n            ) : (\n                value\n            )}\n        </ModalBody>\n    </Modal>\n)\nconst DefaultColumnFilter: FC<any> = ({ column: { filterValue, setFilter } }) => {\n    return (\n        <div>\n            <input\n                className=\"form-control form-control-sm\"\n                value={filterValue || ''}\n                onChange={e => {\n                    setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n                }}\n            />\n        </div>\n    )\n}\n\ntype Props = {\n    data: itemType[]\n    displayedColumns: string[]\n}\nexport const OutputTableView: FC<Props> = ({ data, displayedColumns }) => {\n    const [detailsCellValue, setDetailsCellValue] = useState(null as itemType | null)\n    const tableData = useMemo(\n        () => data.map(e => (!!e ? (typeof e === 'object' ? e : { [arrayElementName]: e }) : {})),\n        [data]\n    )\n    const columns = React.useMemo(\n        () =>\n            displayedColumns.map(name => {\n                return {\n                    header: name,\n                    accessor: name,\n                    Filter: DefaultColumnFilter,\n                }\n            }),\n        [displayedColumns]\n    )\n\n    const onCloseDetailModal = () => setDetailsCellValue(null)\n    const { headerGroups, rows, prepareRow } = useTable(\n        {\n            columns,\n            data: tableData,\n        },\n        useFilters,\n        useSortBy\n    )\n    if (\n        !tableData ||\n        !Array.isArray(tableData) ||\n        tableData.length === 0 ||\n        tableData.every(e => e === null || e === undefined || (typeof e === 'object' && Object.keys(e).length === 0))\n    ) {\n        return <div />\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <TableAdvancedOptions />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Suspense fallback={<Loading componentName=\"ReactTable\" />}>\n                        <table className=\"table table-bordered table-hover table-responsive data-test-id-output-table\">\n                            <thead>\n                                {headerGroups.map((headerGroup, hi) => (\n                                    <tr key={hi}>\n                                        <th\n                                            scope=\"col\"\n                                            className=\"shadow-sm text-capitalize text-center data-test-id-column-name\"\n                                        ></th>\n                                        {headerGroup.headers.map((column, ci) => (\n                                            <th\n                                                key={ci}\n                                                scope=\"col\"\n                                                className=\"shadow-sm text-capitalize text-center data-test-id-column-name min-vw-10\"\n                                                style={{ minWidth: '50vh' }}\n                                            >\n                                                <div {...column.getHeaderProps((column as any).getSortByToggleProps())}>\n                                                    {column.render('header')}\n                                                    <span>\n                                                        {(column as any).isSorted\n                                                            ? (column as any).isSortedDesc\n                                                                ? ' 🔽'\n                                                                : ' 🔼'\n                                                            : ''}\n                                                    </span>\n                                                </div>\n\n                                                {column.render('Filter')}\n                                            </th>\n                                        ))}\n                                    </tr>\n                                ))}\n                            </thead>\n                            <tbody>\n                                {rows.map((row, i) => {\n                                    prepareRow(row)\n                                    return (\n                                        <tr key={i}>\n                                            <th scope=\"row\">\n                                                <button\n                                                    onClick={() => setDetailsCellValue(row.original)}\n                                                    className=\"btn btn-link\"\n                                                >\n                                                    <i className=\"material-icons\">open_in_browser</i>\n                                                </button>\n                                            </th>\n                                            {row.cells.map(cell => (\n                                                <CellComponent\n                                                    key={cell.column.id}\n                                                    cell={cell}\n                                                    onClick={setDetailsCellValue}\n                                                />\n                                            ))}\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                        </table>\n                    </Suspense>\n                </div>\n            </div>\n            <div id=\"data-test-id-output-table-length\" className=\"mx-3 align-items-center justify-content-end d-flex\">\n                <h4>Number of elements: {tableData.length}</h4>\n            </div>\n            <DetailModal value={detailsCellValue} onClose={onCloseDetailModal} />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps)(\n    withErrorBoundary(memo(withPerformance(OutputTableView, 'OutputTableView'), (prev, next) => deepEqual(prev, next)))\n)\n","import * as React from 'react'\nimport './OutputTable.scss'\nimport { connect } from 'react-redux'\nimport OutputTableView from './OutputTableView'\nimport { toggleOutputTableModal } from 'actions/actions'\nimport { getisOutputTableModalOpen, getOutputObject } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap'\nimport { memo, FC } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    toggleModal: typeof toggleOutputTableModal\n    isModalOpen: boolean\n}\n\nconst OutputTable: FC<Props> = ({ toggleModal, isModalOpen }) => {\n    return (\n        <div className=\"output-table\">\n            <Modal isOpen={isModalOpen} toggle={toggleModal} className=\"mw-100\">\n                <ModalHeader toggle={toggleModal}>Table view</ModalHeader>\n                <ModalBody>\n                    <OutputTableView />\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"secondary\" onClick={toggleModal}>\n                        Close\n                    </Button>\n                </ModalFooter>\n            </Modal>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <Button block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n                        Display results table fullscreen\n                    </Button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <OutputTableView />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    data: getOutputObject(state),\n    isModalOpen: getisOutputTableModalOpen(state),\n})\n\nexport default connect(mapStateToProps, {\n    toggleModal: toggleOutputTableModal,\n})(withErrorBoundary(memo(withPerformance(OutputTable, 'OutputTable'))))\n","import * as React from 'react'\nimport {\n    getOutputObject,\n    getOutputSearchTerm,\n    getOutputSearchMatch,\n    getOutputObjectSize,\n    getDebugMode,\n} from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { connect } from 'react-redux'\nimport { DebounceInput } from 'react-debounce-input'\nimport { updateSearchTerm } from 'actions/actions'\nimport { Suspense, lazy, memo, useCallback, FC, useState } from 'react'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport deepEqual from 'fast-deep-equal'\nimport { FormGroup, Label, CustomInput } from 'reactstrap'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withPerformance } from 'core/logging/performance'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n    src: object | null\n    searchTerm: string | undefined\n    match: boolean\n    onSearchChange: typeof updateSearchTerm\n    size: number\n    debugMode: boolean\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match, size, debugMode }) => {\n    const [bigSize, setBigSize] = useState(4683932)\n    const isTooBig = size > bigSize\n    const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange])\n    return (\n        <div id=\"jsonView\">\n            <DebounceInput\n                style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n                value={searchTerm}\n                className=\"form-control\"\n                onChange={handlechange}\n                debounceTimeout={500}\n                placeholder=\"Type your search term...\"\n            />\n            <Suspense fallback={<div>Loading...</div>}>\n                {debugMode ? (\n                    <FormGroup>\n                        <Label for=\"exampleCustomRange\">heavy object size: {prettyPrintBytes(bigSize)}</Label>\n                        <CustomInput\n                            type=\"range\"\n                            id=\"exampleCustomRange\"\n                            name=\"customRange\"\n                            value={bigSize}\n                            steps={1024 * 100}\n                            min={1024 * 100}\n                            max={1024 * 1024}\n                            onChange={e => setBigSize(parseInt(e.currentTarget.value, 10))}\n                        />\n                    </FormGroup>\n                ) : (\n                    <></>\n                )}\n                {isTooBig ? (\n                    <></>\n                ) : (\n                    <ReactJson\n                        src={src ? src : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={noop}\n                        onDelete={noop}\n                        onEdit={noop}\n                        onSelect={noop}\n                    />\n                )}\n            </Suspense>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        src: getOutputObject(state),\n        searchTerm: getOutputSearchTerm(state),\n        match: getOutputSearchMatch(state),\n        size: getOutputObjectSize(state),\n        debugMode: getDebugMode(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onSearchChange: updateSearchTerm })(\n    withErrorBoundary(memo(withPerformance(JsonView, 'JsonView'), (prev, next) => deepEqual(prev, next)))\n)\n","import styles from './Output.module.scss'\nimport * as React from 'react'\nimport { connect } from 'react-redux'\nimport OutputTable from './OutputTable'\nimport { RootState, tabType } from 'state/State'\n\nimport classNames from 'classnames'\n\nimport { getOutputErrorMessage, getOutputIsArray, getOutputActiveTab, getOutputObjectSize } from 'store/selectors'\nimport JsonView from './JsonView'\nimport { updateOutputTabSelection } from 'actions/actions'\nimport { TabContent, TabPane, Alert, Badge } from 'reactstrap'\nimport { memo, useCallback, FC } from 'react'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    isArray: boolean\n    activeTab: tabType\n    objSize: number\n    setActiveTab: typeof updateOutputTabSelection\n    errorMessage?: string\n}\n\nconst Output: FC<Props> = ({ isArray, errorMessage, activeTab, setActiveTab, objSize }) => {\n    const handleActiveTable = useCallback(() => setActiveTab('Table'), [setActiveTab])\n    const handleActiveRawJson = useCallback(() => setActiveTab('RawJson'), [setActiveTab])\n    return (\n        <>\n            {errorMessage && (\n                <div>\n                    <div className=\"row\">\n                        <div className=\"col-sm-10 offset-sm-2\">\n                            <Alert className=\"row align-items-center\" color=\"danger\">\n                                <i className=\"material-icons mr-2\">error</i>\n                                <span>{errorMessage}</span>\n                            </Alert>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <>\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <ul className=\"nav nav-tabs\">\n                            <li className=\"nav-item\">\n                                <button\n                                    className={classNames({\n                                        active: activeTab === 'RawJson',\n                                        'nav-link': true,\n                                        [styles.pointer]: true,\n                                    })}\n                                    onClick={handleActiveRawJson}\n                                >\n                                    Raw JSON view\n                                </button>\n                            </li>\n                            <li className=\"nav-item\" hidden={!isArray}>\n                                <button\n                                    className={classNames({\n                                        active: activeTab === 'Table',\n                                        'nav-link': true,\n                                        [styles.pointer]: true,\n                                    })}\n                                    onClick={handleActiveTable}\n                                >\n                                    Table view\n                                </button>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n                <TabContent activeTab={activeTab}>\n                    {activeTab === 'RawJson' && (\n                        <TabPane tabId=\"RawJson\">\n                            <div className=\"row\">\n                                <div className=\"col-sm-2 pt-5\">\n                                    <h3>\n                                        <Badge id=\"badgeSize\" color=\"info\" pill={true}>\n                                            {prettyPrintBytes(objSize)}\n                                        </Badge>\n                                    </h3>\n                                </div>\n                                <div className=\"col-sm-10\">\n                                    <JsonView />\n                                </div>\n                            </div>\n                        </TabPane>\n                    )}\n                    <TabPane tabId=\"Table\">{activeTab === 'Table' && <OutputTable />}</TabPane>\n                </TabContent>\n            </>\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    errorMessage: getOutputErrorMessage(state),\n    isArray: getOutputIsArray(state),\n    activeTab: getOutputActiveTab(state),\n    objSize: getOutputObjectSize(state),\n})\n\nexport default connect(mapStateToProps, { setActiveTab: updateOutputTabSelection })(\n    memo(withErrorBoundary(withPerformance(Output, 'Output')))\n)\n"],"sourceRoot":""}