{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/components/common/ErrorBoundary.tsx\";\nimport * as React from 'react';\nimport { logError } from 'core/logging/logger';\nimport { toast } from 'react-toastify';\nimport { Component } from 'react';\nconst MISSING_ERROR = 'Error was swallowed during propagation.';\n\nclass ErrorBoundary extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      error: undefined\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({\n      error: error || new Error(MISSING_ERROR)\n    }, () => this.notify(info));\n  }\n\n  render() {\n    const {\n      children\n    } = this.props;\n    const {\n      error\n    } = this.state;\n\n    if (error) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, \"An error occured\");\n    }\n\n    return children;\n  }\n\n  notify(info) {\n    logError('An error occured', this.state.error);\n    logError('error info:', info);\n    toast.error(JSON.stringify(info), {\n      position: 'bottom-right',\n      hideProgressBar: true,\n      autoClose: false\n    });\n  }\n\n}\n\nexport const withErrorBoundary = Wrapped => props => /*#__PURE__*/React.createElement(ErrorBoundary, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Wrapped, Object.assign({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }\n})));","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/components/common/ErrorBoundary.tsx"],"names":["React","logError","toast","Component","MISSING_ERROR","ErrorBoundary","state","error","undefined","componentDidCatch","info","setState","Error","notify","render","children","props","JSON","stringify","position","hideProgressBar","autoClose","withErrorBoundary","Wrapped"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,SAAT,QAAyC,OAAzC;AAEA,MAAMC,aAAa,GAAG,yCAAtB;;AAMA,MAAMC,aAAN,SAA4BF,SAA5B,CAAiD;AAAA;AAAA;AAAA,SAC7BG,KAD6B,GACd;AAC3BC,MAAAA,KAAK,EAAEC;AADoB,KADc;AAAA;;AAKtCC,EAAAA,iBAAP,CAAyBF,KAAzB,EAA8CG,IAA9C,EAA4D;AACxD,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,KAAK,EAAEA,KAAK,IAAI,IAAIK,KAAJ,CAAUR,aAAV;AAAlB,KAAd,EAA4D,MAAM,KAAKS,MAAL,CAAYH,IAAZ,CAAlE;AACH;;AAEMI,EAAAA,MAAP,GAAgB;AACZ,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKC,KAA1B;AACA,UAAM;AAAET,MAAAA;AAAF,QAAY,KAAKD,KAAvB;;AAEA,QAAIC,KAAJ,EAAW;AACP,0BAAO,6DAAP;AACH;;AAED,WAAOQ,QAAP;AACH;;AAEOF,EAAAA,MAAR,CAAeH,IAAf,EAA6B;AACzBT,IAAAA,QAAQ,CAAC,kBAAD,EAAqB,KAAKK,KAAL,CAAWC,KAAhC,CAAR;AACAN,IAAAA,QAAQ,CAAC,aAAD,EAAgBS,IAAhB,CAAR;AACAR,IAAAA,KAAK,CAACK,KAAN,CAAYU,IAAI,CAACC,SAAL,CAAeR,IAAf,CAAZ,EAAkC;AAAES,MAAAA,QAAQ,EAAE,cAAZ;AAA4BC,MAAAA,eAAe,EAAE,IAA7C;AAAmDC,MAAAA,SAAS,EAAE;AAA9D,KAAlC;AACH;;AAxB4C;;AA2BjD,OAAO,MAAMC,iBAAiB,GAAkBC,OAAf,IAA8CP,KAAD,iBAC1E,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACI,oBAAC,OAAD,oBAAaA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADJ,CADG","sourcesContent":["import * as React from 'react'\nimport { logError } from 'core/logging/logger'\nimport { toast } from 'react-toastify'\nimport { Component, ComponentType } from 'react'\n\nconst MISSING_ERROR = 'Error was swallowed during propagation.'\n\ntype State = {\n    error?: Error\n}\n\nclass ErrorBoundary extends Component<{}, State> {\n    public readonly state: State = {\n        error: undefined,\n    }\n\n    public componentDidCatch(error: Error | null, info: object) {\n        this.setState({ error: error || new Error(MISSING_ERROR) }, () => this.notify(info))\n    }\n\n    public render() {\n        const { children } = this.props\n        const { error } = this.state\n\n        if (error) {\n            return <>An error occured</>\n        }\n\n        return children\n    }\n\n    private notify(info: object) {\n        logError('An error occured', this.state.error)\n        logError('error info:', info)\n        toast.error(JSON.stringify(info), { position: 'bottom-right', hideProgressBar: true, autoClose: false })\n    }\n}\n\nexport const withErrorBoundary = <T extends {}>(Wrapped: ComponentType<T>) => (props: T) => (\n    <ErrorBoundary>\n        <Wrapped {...props} />\n    </ErrorBoundary>\n)\n"]},"metadata":{},"sourceType":"module"}