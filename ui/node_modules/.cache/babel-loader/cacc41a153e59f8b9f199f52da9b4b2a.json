{"ast":null,"code":"ace.define(\"ace/mode/vala_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ValaHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: ['meta.using.vala', 'keyword.other.using.vala', 'meta.using.vala', 'storage.modifier.using.vala', 'meta.using.vala', 'punctuation.terminator.vala'],\n        regex: '^(\\\\s*)(using)\\\\b(?:(\\\\s*)([^ ;$]+)(\\\\s*)((?:;)?))?'\n      }, {\n        include: '#code'\n      }],\n      '#all-types': [{\n        include: '#primitive-arrays'\n      }, {\n        include: '#primitive-types'\n      }, {\n        include: '#object-types'\n      }],\n      '#annotations': [{\n        token: ['storage.type.annotation.vala', 'punctuation.definition.annotation-arguments.begin.vala'],\n        regex: '(@[^ (]+)(\\\\()',\n        push: [{\n          token: 'punctuation.definition.annotation-arguments.end.vala',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          token: ['constant.other.key.vala', 'text', 'keyword.operator.assignment.vala'],\n          regex: '(\\\\w*)(\\\\s*)(=)'\n        }, {\n          include: '#code'\n        }, {\n          token: 'punctuation.seperator.property.vala',\n          regex: ','\n        }, {\n          defaultToken: 'meta.declaration.annotation.vala'\n        }]\n      }, {\n        token: 'storage.type.annotation.vala',\n        regex: '@\\\\w*'\n      }],\n      '#anonymous-classes-and-new': [{\n        token: 'keyword.control.new.vala',\n        regex: '\\\\bnew\\\\b',\n        push_disabled: [{\n          token: 'text',\n          regex: '(?<=\\\\)|\\\\])(?!\\\\s*{)|(?<=})|(?=;)',\n          TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n          originalRegex: '(?<=\\\\)|\\\\])(?!\\\\s*{)|(?<=})|(?=;)',\n          next: 'pop'\n        }, {\n          token: ['storage.type.vala', 'text'],\n          regex: '(\\\\w+)(\\\\s*)(?=\\\\[)',\n          push: [{\n            token: 'text',\n            regex: '}|(?=;|\\\\))',\n            next: 'pop'\n          }, {\n            token: 'text',\n            regex: '\\\\[',\n            push: [{\n              token: 'text',\n              regex: '\\\\]',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }, {\n            token: 'text',\n            regex: '{',\n            push: [{\n              token: 'text',\n              regex: '(?=})',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }]\n        }, {\n          token: 'text',\n          regex: '(?=\\\\w.*\\\\()',\n          push: [{\n            token: 'text',\n            regex: '(?<=\\\\))',\n            TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n            originalRegex: '(?<=\\\\))',\n            next: 'pop'\n          }, {\n            include: '#object-types'\n          }, {\n            token: 'text',\n            regex: '\\\\(',\n            push: [{\n              token: 'text',\n              regex: '\\\\)',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }]\n        }, {\n          token: 'meta.inner-class.vala',\n          regex: '{',\n          push: [{\n            token: 'meta.inner-class.vala',\n            regex: '}',\n            next: 'pop'\n          }, {\n            include: '#class-body'\n          }, {\n            defaultToken: 'meta.inner-class.vala'\n          }]\n        }]\n      }],\n      '#assertions': [{\n        token: ['keyword.control.assert.vala', 'meta.declaration.assertion.vala'],\n        regex: '\\\\b(assert|requires|ensures)(\\\\s)',\n        push: [{\n          token: 'meta.declaration.assertion.vala',\n          regex: '$',\n          next: 'pop'\n        }, {\n          token: 'keyword.operator.assert.expression-seperator.vala',\n          regex: ':'\n        }, {\n          include: '#code'\n        }, {\n          defaultToken: 'meta.declaration.assertion.vala'\n        }]\n      }],\n      '#class': [{\n        token: 'meta.class.vala',\n        regex: '(?=\\\\w?[\\\\w\\\\s]*(?:class|(?:@)?interface|enum|struct|namespace)\\\\s+\\\\w+)',\n        push: [{\n          token: 'paren.vala',\n          regex: '}',\n          next: 'pop'\n        }, {\n          include: '#storage-modifiers'\n        }, {\n          include: '#comments'\n        }, {\n          token: ['storage.modifier.vala', 'meta.class.identifier.vala', 'entity.name.type.class.vala'],\n          regex: '(class|(?:@)?interface|enum|struct|namespace)(\\\\s+)([\\\\w\\\\.]+)'\n        }, {\n          token: 'storage.modifier.extends.vala',\n          regex: ':',\n          push: [{\n            token: 'meta.definition.class.inherited.classes.vala',\n            regex: '(?={|,)',\n            next: 'pop'\n          }, {\n            include: '#object-types-inherited'\n          }, {\n            include: '#comments'\n          }, {\n            defaultToken: 'meta.definition.class.inherited.classes.vala'\n          }]\n        }, {\n          token: ['storage.modifier.implements.vala', 'meta.definition.class.implemented.interfaces.vala'],\n          regex: '(,)(\\\\s)',\n          push: [{\n            token: 'meta.definition.class.implemented.interfaces.vala',\n            regex: '(?=\\\\{)',\n            next: 'pop'\n          }, {\n            include: '#object-types-inherited'\n          }, {\n            include: '#comments'\n          }, {\n            defaultToken: 'meta.definition.class.implemented.interfaces.vala'\n          }]\n        }, {\n          token: 'paren.vala',\n          regex: '{',\n          push: [{\n            token: 'paren.vala',\n            regex: '(?=})',\n            next: 'pop'\n          }, {\n            include: '#class-body'\n          }, {\n            defaultToken: 'meta.class.body.vala'\n          }]\n        }, {\n          defaultToken: 'meta.class.vala'\n        }],\n        comment: 'attempting to put namespace in here.'\n      }],\n      '#class-body': [{\n        include: '#comments'\n      }, {\n        include: '#class'\n      }, {\n        include: '#enums'\n      }, {\n        include: '#methods'\n      }, {\n        include: '#annotations'\n      }, {\n        include: '#storage-modifiers'\n      }, {\n        include: '#code'\n      }],\n      '#code': [{\n        include: '#comments'\n      }, {\n        include: '#class'\n      }, {\n        token: 'text',\n        regex: '{',\n        push: [{\n          token: 'text',\n          regex: '}',\n          next: 'pop'\n        }, {\n          include: '#code'\n        }]\n      }, {\n        include: '#assertions'\n      }, {\n        include: '#parens'\n      }, {\n        include: '#constants-and-special-vars'\n      }, {\n        include: '#anonymous-classes-and-new'\n      }, {\n        include: '#keywords'\n      }, {\n        include: '#storage-modifiers'\n      }, {\n        include: '#strings'\n      }, {\n        include: '#all-types'\n      }],\n      '#comments': [{\n        token: 'punctuation.definition.comment.vala',\n        regex: '/\\\\*\\\\*/'\n      }, {\n        include: 'text.html.javadoc'\n      }, {\n        include: '#comments-inline'\n      }],\n      '#comments-inline': [{\n        token: 'punctuation.definition.comment.vala',\n        regex: '/\\\\*',\n        push: [{\n          token: 'punctuation.definition.comment.vala',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.vala'\n        }]\n      }, {\n        token: ['text', 'punctuation.definition.comment.vala', 'comment.line.double-slash.vala'],\n        regex: '(\\\\s*)(//)(.*$)'\n      }],\n      '#constants-and-special-vars': [{\n        token: 'constant.language.vala',\n        regex: '\\\\b(?:true|false|null)\\\\b'\n      }, {\n        token: 'variable.language.vala',\n        regex: '\\\\b(?:this|base)\\\\b'\n      }, {\n        token: 'constant.numeric.vala',\n        regex: '\\\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\\\.?[0-9]*|\\\\.[0-9]+)(?:(?:e|E)(?:\\\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\\\b'\n      }, {\n        token: ['keyword.operator.dereference.vala', 'constant.other.vala'],\n        regex: '((?:\\\\.)?)\\\\b([A-Z][A-Z0-9_]+)(?!<|\\\\.class|\\\\s*\\\\w+\\\\s*=)\\\\b'\n      }],\n      '#enums': [{\n        token: 'text',\n        regex: '^(?=\\\\s*[A-Z0-9_]+\\\\s*(?:{|\\\\(|,))',\n        push: [{\n          token: 'text',\n          regex: '(?=;|})',\n          next: 'pop'\n        }, {\n          token: 'constant.other.enum.vala',\n          regex: '\\\\w+',\n          push: [{\n            token: 'meta.enum.vala',\n            regex: '(?=,|;|})',\n            next: 'pop'\n          }, {\n            include: '#parens'\n          }, {\n            token: 'text',\n            regex: '{',\n            push: [{\n              token: 'text',\n              regex: '}',\n              next: 'pop'\n            }, {\n              include: '#class-body'\n            }]\n          }, {\n            defaultToken: 'meta.enum.vala'\n          }]\n        }]\n      }],\n      '#keywords': [{\n        token: 'keyword.control.catch-exception.vala',\n        regex: '\\\\b(?:try|catch|finally|throw)\\\\b'\n      }, {\n        token: 'keyword.control.vala',\n        regex: '\\\\?|:|\\\\?\\\\?'\n      }, {\n        token: 'keyword.control.vala',\n        regex: '\\\\b(?:return|break|case|continue|default|do|while|for|foreach|switch|if|else|in|yield|get|set|value)\\\\b'\n      }, {\n        token: 'keyword.operator.vala',\n        regex: '\\\\b(?:typeof|is|as)\\\\b'\n      }, {\n        token: 'keyword.operator.comparison.vala',\n        regex: '==|!=|<=|>=|<>|<|>'\n      }, {\n        token: 'keyword.operator.assignment.vala',\n        regex: '='\n      }, {\n        token: 'keyword.operator.increment-decrement.vala',\n        regex: '\\\\-\\\\-|\\\\+\\\\+'\n      }, {\n        token: 'keyword.operator.arithmetic.vala',\n        regex: '\\\\-|\\\\+|\\\\*|\\\\/|%'\n      }, {\n        token: 'keyword.operator.logical.vala',\n        regex: '!|&&|\\\\|\\\\|'\n      }, {\n        token: 'keyword.operator.dereference.vala',\n        regex: '\\\\.(?=\\\\S)',\n        originalRegex: '(?<=\\\\S)\\\\.(?=\\\\S)'\n      }, {\n        token: 'punctuation.terminator.vala',\n        regex: ';'\n      }, {\n        token: 'keyword.operator.ownership',\n        regex: 'owned|unowned'\n      }],\n      '#methods': [{\n        token: 'meta.method.vala',\n        regex: '(?!new)(?=\\\\w.*\\\\s+)(?=[^=]+\\\\()',\n        push: [{\n          token: 'paren.vala',\n          regex: '}|(?=;)',\n          next: 'pop'\n        }, {\n          include: '#storage-modifiers'\n        }, {\n          token: ['entity.name.function.vala', 'meta.method.identifier.vala'],\n          regex: '([\\\\~\\\\w\\\\.]+)(\\\\s*\\\\()',\n          push: [{\n            token: 'meta.method.identifier.vala',\n            regex: '\\\\)',\n            next: 'pop'\n          }, {\n            include: '#parameters'\n          }, {\n            defaultToken: 'meta.method.identifier.vala'\n          }]\n        }, {\n          token: 'meta.method.return-type.vala',\n          regex: '(?=\\\\w.*\\\\s+\\\\w+\\\\s*\\\\()',\n          push: [{\n            token: 'meta.method.return-type.vala',\n            regex: '(?=\\\\w+\\\\s*\\\\()',\n            next: 'pop'\n          }, {\n            include: '#all-types'\n          }, {\n            defaultToken: 'meta.method.return-type.vala'\n          }]\n        }, {\n          include: '#throws'\n        }, {\n          token: 'paren.vala',\n          regex: '{',\n          push: [{\n            token: 'paren.vala',\n            regex: '(?=})',\n            next: 'pop'\n          }, {\n            include: '#code'\n          }, {\n            defaultToken: 'meta.method.body.vala'\n          }]\n        }, {\n          defaultToken: 'meta.method.vala'\n        }]\n      }],\n      '#namespace': [{\n        token: 'text',\n        regex: '^(?=\\\\s*[A-Z0-9_]+\\\\s*(?:{|\\\\(|,))',\n        push: [{\n          token: 'text',\n          regex: '(?=;|})',\n          next: 'pop'\n        }, {\n          token: 'constant.other.namespace.vala',\n          regex: '\\\\w+',\n          push: [{\n            token: 'meta.namespace.vala',\n            regex: '(?=,|;|})',\n            next: 'pop'\n          }, {\n            include: '#parens'\n          }, {\n            token: 'text',\n            regex: '{',\n            push: [{\n              token: 'text',\n              regex: '}',\n              next: 'pop'\n            }, {\n              include: '#code'\n            }]\n          }, {\n            defaultToken: 'meta.namespace.vala'\n          }]\n        }],\n        comment: 'This is not quite right. See the class grammar right now'\n      }],\n      '#object-types': [{\n        token: 'storage.type.generic.vala',\n        regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*<',\n        push: [{\n          token: 'storage.type.generic.vala',\n          regex: '>|[^\\\\w\\\\s,\\\\?<\\\\[()\\\\]]',\n          TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n          originalRegex: '>|[^\\\\w\\\\s,\\\\?<\\\\[(?:[,]+)\\\\]]',\n          next: 'pop'\n        }, {\n          include: '#object-types'\n        }, {\n          token: 'storage.type.generic.vala',\n          regex: '<',\n          push: [{\n            token: 'storage.type.generic.vala',\n            regex: '>|[^\\\\w\\\\s,\\\\[\\\\]<]',\n            next: 'pop'\n          }, {\n            defaultToken: 'storage.type.generic.vala'\n          }],\n          comment: 'This is just to support <>\\'s with no actual type prefix'\n        }, {\n          defaultToken: 'storage.type.generic.vala'\n        }]\n      }, {\n        token: 'storage.type.object.array.vala',\n        regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*(?=\\\\[)',\n        push: [{\n          token: 'storage.type.object.array.vala',\n          regex: '(?=[^\\\\]\\\\s])',\n          next: 'pop'\n        }, {\n          token: 'text',\n          regex: '\\\\[',\n          push: [{\n            token: 'text',\n            regex: '\\\\]',\n            next: 'pop'\n          }, {\n            include: '#code'\n          }]\n        }, {\n          defaultToken: 'storage.type.object.array.vala'\n        }]\n      }, {\n        token: ['storage.type.vala', 'keyword.operator.dereference.vala', 'storage.type.vala'],\n        regex: '\\\\b(?:([a-z]\\\\w*)(\\\\.))*([A-Z]+\\\\w*\\\\b)'\n      }],\n      '#object-types-inherited': [{\n        token: 'entity.other.inherited-class.vala',\n        regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*<',\n        push: [{\n          token: 'entity.other.inherited-class.vala',\n          regex: '>|[^\\\\w\\\\s,<]',\n          next: 'pop'\n        }, {\n          include: '#object-types'\n        }, {\n          token: 'storage.type.generic.vala',\n          regex: '<',\n          push: [{\n            token: 'storage.type.generic.vala',\n            regex: '>|[^\\\\w\\\\s,<]',\n            next: 'pop'\n          }, {\n            defaultToken: 'storage.type.generic.vala'\n          }],\n          comment: 'This is just to support <>\\'s with no actual type prefix'\n        }, {\n          defaultToken: 'entity.other.inherited-class.vala'\n        }]\n      }, {\n        token: ['entity.other.inherited-class.vala', 'keyword.operator.dereference.vala', 'entity.other.inherited-class.vala'],\n        regex: '\\\\b(?:([a-z]\\\\w*)(\\\\.))*([A-Z]+\\\\w*)'\n      }],\n      '#parameters': [{\n        token: 'storage.modifier.vala',\n        regex: 'final'\n      }, {\n        include: '#primitive-arrays'\n      }, {\n        include: '#primitive-types'\n      }, {\n        include: '#object-types'\n      }, {\n        token: 'variable.parameter.vala',\n        regex: '\\\\w+'\n      }],\n      '#parens': [{\n        token: 'text',\n        regex: '\\\\(',\n        push: [{\n          token: 'text',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#code'\n        }]\n      }],\n      '#primitive-arrays': [{\n        token: 'storage.type.primitive.array.vala',\n        regex: '\\\\b(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|int8|int16|int32|int64|uint8|uint16|uint32|uint64)(?:\\\\[\\\\])*\\\\b'\n      }],\n      '#primitive-types': [{\n        token: 'storage.type.primitive.vala',\n        regex: '\\\\b(?:var|bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|signal|int8|int16|int32|int64|uint8|uint16|uint32|uint64)\\\\b',\n        comment: 'var is not really a primitive, but acts like one in most cases'\n      }],\n      '#storage-modifiers': [{\n        token: 'storage.modifier.vala',\n        regex: '\\\\b(?:public|private|protected|internal|static|final|sealed|virtual|override|abstract|readonly|volatile|dynamic|async|unsafe|out|ref|weak|owned|unowned|const)\\\\b',\n        comment: 'Not sure about unsafe and readonly'\n      }],\n      '#strings': [{\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '@\"',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '\\\\\\\\.|%[\\\\w\\\\.\\\\-]+|\\\\$(?:\\\\w+|\\\\([\\\\w\\\\s\\\\+\\\\-\\\\*\\\\/]+\\\\))'\n        }, {\n          defaultToken: 'string.quoted.interpolated.vala'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '\\\\\\\\.'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '%[\\\\w\\\\.\\\\-]+'\n        }, {\n          defaultToken: 'string.quoted.double.vala'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '\\\\\\\\.'\n        }, {\n          defaultToken: 'string.quoted.single.vala'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.vala',\n        regex: '\"\"\"',\n        push: [{\n          token: 'punctuation.definition.string.end.vala',\n          regex: '\"\"\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.vala',\n          regex: '%[\\\\w\\\\.\\\\-]+'\n        }, {\n          defaultToken: 'string.quoted.triple.vala'\n        }]\n      }],\n      '#throws': [{\n        token: 'storage.modifier.vala',\n        regex: 'throws',\n        push: [{\n          token: 'meta.throwables.vala',\n          regex: '(?={|;)',\n          next: 'pop'\n        }, {\n          include: '#object-types'\n        }, {\n          defaultToken: 'meta.throwables.vala'\n        }]\n      }],\n      '#values': [{\n        include: '#strings'\n      }, {\n        include: '#object-types'\n      }, {\n        include: '#constants-and-special-vars'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ValaHighlightRules.metaData = {\n    comment: 'Based heavily on the Java bundle\\'s language syntax. TODO:\\n* Closures\\n* Delegates\\n* Properties: Better support for properties.\\n* Annotations\\n* Error domains\\n* Named arguments\\n* Array slicing, negative indexes, multidimensional\\n* construct blocks\\n* lock blocks?\\n* regex literals\\n* DocBlock syntax highlighting. (Currently importing javadoc)\\n* Folding rule for comments.\\n',\n    fileTypes: ['vala'],\n    foldingStartMarker: '(\\\\{\\\\s*(//.*)?$|^\\\\s*// \\\\{\\\\{\\\\{)',\n    foldingStopMarker: '^\\\\s*(\\\\}|// \\\\}\\\\}\\\\}$)',\n    name: 'Vala',\n    scopeName: 'source.vala'\n  };\n  oop.inherits(ValaHighlightRules, TextHighlightRules);\n  exports.ValaHighlightRules = ValaHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/vala\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/tokenizer\", \"ace/mode/vala_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var Tokenizer = require(\"../tokenizer\").Tokenizer;\n\n  var ValaHighlightRules = require(\"./vala_highlight_rules\").ValaHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function () {\n    this.HighlightRules = ValaHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\" || state == \"no_regex\") {\n        var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      } else if (state == \"doc-start\") {\n        if (endState == \"start\" || endState == \"no_regex\") {\n          return \"\";\n        }\n\n        var match = line.match(/^\\s*(\\/?)\\*/);\n\n        if (match) {\n          if (match[1]) {\n            indent += \" \";\n          }\n\n          indent += \"* \";\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/vala\";\n    this.snippetFileId = \"ace/snippets/vala\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/vala\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-vala.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","ValaHighlightRules","$rules","start","token","regex","include","push","next","defaultToken","push_disabled","TODO","originalRegex","comment","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","source","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","MatchingBraceOutdent","checkOutdent","input","autoOutdent","doc","column","openBracePos","findMatchingBracket","$getIndent","TextMode","Mode","Tokenizer","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id","snippetFileId"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/vala_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ValaHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { token: \n            [ 'meta.using.vala',\n              'keyword.other.using.vala',\n              'meta.using.vala',\n              'storage.modifier.using.vala',\n              'meta.using.vala',\n              'punctuation.terminator.vala' ],\n           regex: '^(\\\\s*)(using)\\\\b(?:(\\\\s*)([^ ;$]+)(\\\\s*)((?:;)?))?' },\n         { include: '#code' } ],\n      '#all-types': \n       [ { include: '#primitive-arrays' },\n         { include: '#primitive-types' },\n         { include: '#object-types' } ],\n      '#annotations': \n       [ { token: \n            [ 'storage.type.annotation.vala',\n              'punctuation.definition.annotation-arguments.begin.vala' ],\n           regex: '(@[^ (]+)(\\\\()',\n           push: \n            [ { token: 'punctuation.definition.annotation-arguments.end.vala',\n                regex: '\\\\)',\n                next: 'pop' },\n              { token: \n                 [ 'constant.other.key.vala',\n                   'text',\n                   'keyword.operator.assignment.vala' ],\n                regex: '(\\\\w*)(\\\\s*)(=)' },\n              { include: '#code' },\n              { token: 'punctuation.seperator.property.vala', regex: ',' },\n              { defaultToken: 'meta.declaration.annotation.vala' } ] },\n         { token: 'storage.type.annotation.vala', regex: '@\\\\w*' } ],\n      '#anonymous-classes-and-new': \n       [ { token: 'keyword.control.new.vala',\n           regex: '\\\\bnew\\\\b',\n           push_disabled: \n            [ { token: 'text',\n                regex: '(?<=\\\\)|\\\\])(?!\\\\s*{)|(?<=})|(?=;)',\n                TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n                originalRegex: '(?<=\\\\)|\\\\])(?!\\\\s*{)|(?<=})|(?=;)',\n                next: 'pop' },\n              { token: [ 'storage.type.vala', 'text' ],\n                regex: '(\\\\w+)(\\\\s*)(?=\\\\[)',\n                push: \n                 [ { token: 'text', regex: '}|(?=;|\\\\))', next: 'pop' },\n                   { token: 'text',\n                     regex: '\\\\[',\n                     push: \n                      [ { token: 'text', regex: '\\\\]', next: 'pop' },\n                        { include: '#code' } ] },\n                   { token: 'text',\n                     regex: '{',\n                     push: \n                      [ { token: 'text', regex: '(?=})', next: 'pop' },\n                        { include: '#code' } ] } ] },\n              { token: 'text',\n                regex: '(?=\\\\w.*\\\\()',\n                push: \n                 [ { token: 'text',\n                     regex: '(?<=\\\\))',\n                     TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n                     originalRegex: '(?<=\\\\))',\n                     next: 'pop' },\n                   { include: '#object-types' },\n                   { token: 'text',\n                     regex: '\\\\(',\n                     push: \n                      [ { token: 'text', regex: '\\\\)', next: 'pop' },\n                        { include: '#code' } ] } ] },\n              { token: 'meta.inner-class.vala',\n                regex: '{',\n                push: \n                 [ { token: 'meta.inner-class.vala', regex: '}', next: 'pop' },\n                   { include: '#class-body' },\n                   { defaultToken: 'meta.inner-class.vala' } ] } ] } ],\n      '#assertions': \n       [ { token: \n            [ 'keyword.control.assert.vala',\n              'meta.declaration.assertion.vala' ],\n           regex: '\\\\b(assert|requires|ensures)(\\\\s)',\n           push: \n            [ { token: 'meta.declaration.assertion.vala',\n                regex: '$',\n                next: 'pop' },\n              { token: 'keyword.operator.assert.expression-seperator.vala',\n                regex: ':' },\n              { include: '#code' },\n              { defaultToken: 'meta.declaration.assertion.vala' } ] } ],\n      '#class': \n       [ { token: 'meta.class.vala',\n           regex: '(?=\\\\w?[\\\\w\\\\s]*(?:class|(?:@)?interface|enum|struct|namespace)\\\\s+\\\\w+)',\n           push: \n            [ { token: 'paren.vala',\n                regex: '}',\n                next: 'pop' },\n              { include: '#storage-modifiers' },\n              { include: '#comments' },\n              { token: \n                 [ 'storage.modifier.vala',\n                   'meta.class.identifier.vala',\n                   'entity.name.type.class.vala' ],\n                regex: '(class|(?:@)?interface|enum|struct|namespace)(\\\\s+)([\\\\w\\\\.]+)' },\n              { token: 'storage.modifier.extends.vala',\n                regex: ':',\n                push: \n                 [ { token: 'meta.definition.class.inherited.classes.vala',\n                     regex: '(?={|,)',\n                     next: 'pop' },\n                   { include: '#object-types-inherited' },\n                   { include: '#comments' },\n                   { defaultToken: 'meta.definition.class.inherited.classes.vala' } ] },\n              { token: \n                 [ 'storage.modifier.implements.vala',\n                   'meta.definition.class.implemented.interfaces.vala' ],\n                regex: '(,)(\\\\s)',\n                push: \n                 [ { token: 'meta.definition.class.implemented.interfaces.vala',\n                     regex: '(?=\\\\{)',\n                     next: 'pop' },\n                   { include: '#object-types-inherited' },\n                   { include: '#comments' },\n                   { defaultToken: 'meta.definition.class.implemented.interfaces.vala' } ] },\n              { token: 'paren.vala',\n                regex: '{',\n                push: \n                 [ { token: 'paren.vala', regex: '(?=})', next: 'pop' },\n                   { include: '#class-body' },\n                   { defaultToken: 'meta.class.body.vala' } ] },\n              { defaultToken: 'meta.class.vala' } ],\n           comment: 'attempting to put namespace in here.' } ],\n      '#class-body': \n       [ { include: '#comments' },\n         { include: '#class' },\n         { include: '#enums' },\n         { include: '#methods' },\n         { include: '#annotations' },\n         { include: '#storage-modifiers' },\n         { include: '#code' } ],\n      '#code': \n       [ { include: '#comments' },\n         { include: '#class' },\n         { token: 'text',\n           regex: '{',\n           push: \n            [ { token: 'text', regex: '}', next: 'pop' },\n              { include: '#code' } ] },\n         { include: '#assertions' },\n         { include: '#parens' },\n         { include: '#constants-and-special-vars' },\n         { include: '#anonymous-classes-and-new' },\n         { include: '#keywords' },\n         { include: '#storage-modifiers' },\n         { include: '#strings' },\n         { include: '#all-types' } ],\n      '#comments': \n       [ { token: 'punctuation.definition.comment.vala',\n           regex: '/\\\\*\\\\*/' },\n         { include: 'text.html.javadoc' },\n         { include: '#comments-inline' } ],\n      '#comments-inline': \n       [ { token: 'punctuation.definition.comment.vala',\n           regex: '/\\\\*',\n           push: \n            [ { token: 'punctuation.definition.comment.vala',\n                regex: '\\\\*/',\n                next: 'pop' },\n              { defaultToken: 'comment.block.vala' } ] },\n         { token: \n            [ 'text',\n              'punctuation.definition.comment.vala',\n              'comment.line.double-slash.vala' ],\n           regex: '(\\\\s*)(//)(.*$)' } ],\n      '#constants-and-special-vars': \n       [ { token: 'constant.language.vala',\n           regex: '\\\\b(?:true|false|null)\\\\b' },\n         { token: 'variable.language.vala',\n           regex: '\\\\b(?:this|base)\\\\b' },\n         { token: 'constant.numeric.vala',\n           regex: '\\\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\\\.?[0-9]*|\\\\.[0-9]+)(?:(?:e|E)(?:\\\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\\\b' },\n         { token: [ 'keyword.operator.dereference.vala', 'constant.other.vala' ],\n           regex: '((?:\\\\.)?)\\\\b([A-Z][A-Z0-9_]+)(?!<|\\\\.class|\\\\s*\\\\w+\\\\s*=)\\\\b' } ],\n      '#enums': \n       [ { token: 'text',\n           regex: '^(?=\\\\s*[A-Z0-9_]+\\\\s*(?:{|\\\\(|,))',\n           push: \n            [ { token: 'text', regex: '(?=;|})', next: 'pop' },\n              { token: 'constant.other.enum.vala',\n                regex: '\\\\w+',\n                push: \n                 [ { token: 'meta.enum.vala', regex: '(?=,|;|})', next: 'pop' },\n                   { include: '#parens' },\n                   { token: 'text',\n                     regex: '{',\n                     push: \n                      [ { token: 'text', regex: '}', next: 'pop' },\n                        { include: '#class-body' } ] },\n                   { defaultToken: 'meta.enum.vala' } ] } ] } ],\n      '#keywords': \n       [ { token: 'keyword.control.catch-exception.vala',\n           regex: '\\\\b(?:try|catch|finally|throw)\\\\b' },\n         { token: 'keyword.control.vala', regex: '\\\\?|:|\\\\?\\\\?' },\n         { token: 'keyword.control.vala',\n           regex: '\\\\b(?:return|break|case|continue|default|do|while|for|foreach|switch|if|else|in|yield|get|set|value)\\\\b' },\n         { token: 'keyword.operator.vala',\n           regex: '\\\\b(?:typeof|is|as)\\\\b' },\n         { token: 'keyword.operator.comparison.vala',\n           regex: '==|!=|<=|>=|<>|<|>' },\n         { token: 'keyword.operator.assignment.vala', regex: '=' },\n         { token: 'keyword.operator.increment-decrement.vala',\n           regex: '\\\\-\\\\-|\\\\+\\\\+' },\n         { token: 'keyword.operator.arithmetic.vala',\n           regex: '\\\\-|\\\\+|\\\\*|\\\\/|%' },\n         { token: 'keyword.operator.logical.vala', regex: '!|&&|\\\\|\\\\|' },\n         { token: 'keyword.operator.dereference.vala',\n           regex: '\\\\.(?=\\\\S)',\n           originalRegex: '(?<=\\\\S)\\\\.(?=\\\\S)' },\n         { token: 'punctuation.terminator.vala', regex: ';' },\n         { token: 'keyword.operator.ownership', regex: 'owned|unowned' } ],\n      '#methods': \n       [ { token: 'meta.method.vala',\n           regex: '(?!new)(?=\\\\w.*\\\\s+)(?=[^=]+\\\\()',\n           push: \n            [ { token: 'paren.vala', regex: '}|(?=;)', next: 'pop' },\n              { include: '#storage-modifiers' },\n              { token: [ 'entity.name.function.vala', 'meta.method.identifier.vala' ],\n                regex: '([\\\\~\\\\w\\\\.]+)(\\\\s*\\\\()',\n                push: \n                 [ { token: 'meta.method.identifier.vala',\n                     regex: '\\\\)',\n                     next: 'pop' },\n                   { include: '#parameters' },\n                   { defaultToken: 'meta.method.identifier.vala' } ] },\n              { token: 'meta.method.return-type.vala',\n                regex: '(?=\\\\w.*\\\\s+\\\\w+\\\\s*\\\\()',\n                push: \n                 [ { token: 'meta.method.return-type.vala',\n                     regex: '(?=\\\\w+\\\\s*\\\\()',\n                     next: 'pop' },\n                   { include: '#all-types' },\n                   { defaultToken: 'meta.method.return-type.vala' } ] },\n              { include: '#throws' },\n              { token: 'paren.vala',\n                regex: '{',\n                push: \n                 [ { token: 'paren.vala', regex: '(?=})', next: 'pop' },\n                   { include: '#code' },\n                   { defaultToken: 'meta.method.body.vala' } ] },\n              { defaultToken: 'meta.method.vala' } ] } ],\n      '#namespace': \n       [ { token: 'text',\n           regex: '^(?=\\\\s*[A-Z0-9_]+\\\\s*(?:{|\\\\(|,))',\n           push: \n            [ { token: 'text', regex: '(?=;|})', next: 'pop' },\n              { token: 'constant.other.namespace.vala',\n                regex: '\\\\w+',\n                push: \n                 [ { token: 'meta.namespace.vala', regex: '(?=,|;|})', next: 'pop' },\n                   { include: '#parens' },\n                   { token: 'text',\n                     regex: '{',\n                     push: \n                      [ { token: 'text', regex: '}', next: 'pop' },\n                        { include: '#code' } ] },\n                   { defaultToken: 'meta.namespace.vala' } ] } ],\n           comment: 'This is not quite right. See the class grammar right now' } ],\n      '#object-types': \n       [ { token: 'storage.type.generic.vala',\n           regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*<',\n           push: \n            [ { token: 'storage.type.generic.vala',\n                regex: '>|[^\\\\w\\\\s,\\\\?<\\\\[()\\\\]]',\n                TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n                originalRegex: '>|[^\\\\w\\\\s,\\\\?<\\\\[(?:[,]+)\\\\]]',\n                next: 'pop' },\n              { include: '#object-types' },\n              { token: 'storage.type.generic.vala',\n                regex: '<',\n                push: \n                 [ { token: 'storage.type.generic.vala',\n                     regex: '>|[^\\\\w\\\\s,\\\\[\\\\]<]',\n                     next: 'pop' },\n                   { defaultToken: 'storage.type.generic.vala' } ],\n                comment: 'This is just to support <>\\'s with no actual type prefix' },\n              { defaultToken: 'storage.type.generic.vala' } ] },\n         { token: 'storage.type.object.array.vala',\n           regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*(?=\\\\[)',\n           push: \n            [ { token: 'storage.type.object.array.vala',\n                regex: '(?=[^\\\\]\\\\s])',\n                next: 'pop' },\n              { token: 'text',\n                regex: '\\\\[',\n                push: \n                 [ { token: 'text', regex: '\\\\]', next: 'pop' },\n                   { include: '#code' } ] },\n              { defaultToken: 'storage.type.object.array.vala' } ] },\n         { token: \n            [ 'storage.type.vala',\n              'keyword.operator.dereference.vala',\n              'storage.type.vala' ],\n           regex: '\\\\b(?:([a-z]\\\\w*)(\\\\.))*([A-Z]+\\\\w*\\\\b)' } ],\n      '#object-types-inherited': \n       [ { token: 'entity.other.inherited-class.vala',\n           regex: '\\\\b(?:[a-z]\\\\w*\\\\.)*[A-Z]+\\\\w*<',\n           push: \n            [ { token: 'entity.other.inherited-class.vala',\n                regex: '>|[^\\\\w\\\\s,<]',\n                next: 'pop' },\n              { include: '#object-types' },\n              { token: 'storage.type.generic.vala',\n                regex: '<',\n                push: \n                 [ { token: 'storage.type.generic.vala',\n                     regex: '>|[^\\\\w\\\\s,<]',\n                     next: 'pop' },\n                   { defaultToken: 'storage.type.generic.vala' } ],\n                comment: 'This is just to support <>\\'s with no actual type prefix' },\n              { defaultToken: 'entity.other.inherited-class.vala' } ] },\n         { token: \n            [ 'entity.other.inherited-class.vala',\n              'keyword.operator.dereference.vala',\n              'entity.other.inherited-class.vala' ],\n           regex: '\\\\b(?:([a-z]\\\\w*)(\\\\.))*([A-Z]+\\\\w*)' } ],\n      '#parameters': \n       [ { token: 'storage.modifier.vala', regex: 'final' },\n         { include: '#primitive-arrays' },\n         { include: '#primitive-types' },\n         { include: '#object-types' },\n         { token: 'variable.parameter.vala', regex: '\\\\w+' } ],\n      '#parens': \n       [ { token: 'text',\n           regex: '\\\\(',\n           push: \n            [ { token: 'text', regex: '\\\\)', next: 'pop' },\n              { include: '#code' } ] } ],\n      '#primitive-arrays': \n       [ { token: 'storage.type.primitive.array.vala',\n           regex: '\\\\b(?:bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|int8|int16|int32|int64|uint8|uint16|uint32|uint64)(?:\\\\[\\\\])*\\\\b' } ],\n      '#primitive-types': \n       [ { token: 'storage.type.primitive.vala',\n           regex: '\\\\b(?:var|bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|signal|int8|int16|int32|int64|uint8|uint16|uint32|uint64)\\\\b',\n           comment: 'var is not really a primitive, but acts like one in most cases' } ],\n      '#storage-modifiers': \n       [ { token: 'storage.modifier.vala',\n           regex: '\\\\b(?:public|private|protected|internal|static|final|sealed|virtual|override|abstract|readonly|volatile|dynamic|async|unsafe|out|ref|weak|owned|unowned|const)\\\\b',\n           comment: 'Not sure about unsafe and readonly' } ],\n      '#strings': \n       [ { token: 'punctuation.definition.string.begin.vala',\n           regex: '@\"',\n           push: \n            [ { token: 'punctuation.definition.string.end.vala',\n                regex: '\"',\n                next: 'pop' },\n              { token: 'constant.character.escape.vala',\n                regex: '\\\\\\\\.|%[\\\\w\\\\.\\\\-]+|\\\\$(?:\\\\w+|\\\\([\\\\w\\\\s\\\\+\\\\-\\\\*\\\\/]+\\\\))' },\n              { defaultToken: 'string.quoted.interpolated.vala' } ] },\n         { token: 'punctuation.definition.string.begin.vala',\n           regex: '\"',\n           push: \n            [ { token: 'punctuation.definition.string.end.vala',\n                regex: '\"',\n                next: 'pop' },\n              { token: 'constant.character.escape.vala', regex: '\\\\\\\\.' },\n              { token: 'constant.character.escape.vala',\n                regex: '%[\\\\w\\\\.\\\\-]+' },\n              { defaultToken: 'string.quoted.double.vala' } ] },\n         { token: 'punctuation.definition.string.begin.vala',\n           regex: '\\'',\n           push: \n            [ { token: 'punctuation.definition.string.end.vala',\n                regex: '\\'',\n                next: 'pop' },\n              { token: 'constant.character.escape.vala', regex: '\\\\\\\\.' },\n              { defaultToken: 'string.quoted.single.vala' } ] },\n         { token: 'punctuation.definition.string.begin.vala',\n           regex: '\"\"\"',\n           push: \n            [ { token: 'punctuation.definition.string.end.vala',\n                regex: '\"\"\"',\n                next: 'pop' },\n              { token: 'constant.character.escape.vala',\n                regex: '%[\\\\w\\\\.\\\\-]+' },\n              { defaultToken: 'string.quoted.triple.vala' } ] } ],\n      '#throws': \n       [ { token: 'storage.modifier.vala',\n           regex: 'throws',\n           push: \n            [ { token: 'meta.throwables.vala', regex: '(?={|;)', next: 'pop' },\n              { include: '#object-types' },\n              { defaultToken: 'meta.throwables.vala' } ] } ],\n      '#values': \n       [ { include: '#strings' },\n         { include: '#object-types' },\n         { include: '#constants-and-special-vars' } ] };\n    \n    this.normalizeRules();\n};\n\nValaHighlightRules.metaData = { \n    comment: 'Based heavily on the Java bundle\\'s language syntax. TODO:\\n* Closures\\n* Delegates\\n* Properties: Better support for properties.\\n* Annotations\\n* Error domains\\n* Named arguments\\n* Array slicing, negative indexes, multidimensional\\n* construct blocks\\n* lock blocks?\\n* regex literals\\n* DocBlock syntax highlighting. (Currently importing javadoc)\\n* Folding rule for comments.\\n',\n      fileTypes: [ 'vala' ],\n      foldingStartMarker: '(\\\\{\\\\s*(//.*)?$|^\\\\s*// \\\\{\\\\{\\\\{)',\n      foldingStopMarker: '^\\\\s*(\\\\}|// \\\\}\\\\}\\\\}$)',\n      name: 'Vala',\n      scopeName: 'source.vala' };\n\n\noop.inherits(ValaHighlightRules, TextHighlightRules);\n\nexports.ValaHighlightRules = ValaHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/vala\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/tokenizer\",\"ace/mode/vala_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\",\"ace/mode/matching_brace_outdent\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar Tokenizer = require(\"../tokenizer\").Tokenizer;\nvar ValaHighlightRules = require(\"./vala_highlight_rules\").ValaHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = require(\"./folding/cstyle\").FoldMode;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\nvar Mode = function() {\n    this.HighlightRules = ValaHighlightRules;\n    \n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\" || state == \"no_regex\") {\n            var match = line.match(/^.*(?:\\bcase\\b.*:|[\\{\\(\\[])\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\" || endState == \"no_regex\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"* \";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n    this.$id = \"ace/mode/vala\";\n    this.snippetFileId = \"ace/snippets/vala\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/vala\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}