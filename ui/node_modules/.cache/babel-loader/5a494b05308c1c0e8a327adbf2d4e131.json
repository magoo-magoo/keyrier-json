{"ast":null,"code":"ace.define(\"ace/ext/rtl\", [\"require\", \"exports\", \"module\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  \"use strict\";\n\n  var commands = [{\n    name: \"leftToRight\",\n    bindKey: {\n      win: \"Ctrl-Alt-Shift-L\",\n      mac: \"Command-Alt-Shift-L\"\n    },\n    exec: function (editor) {\n      editor.session.$bidiHandler.setRtlDirection(editor, false);\n    },\n    readOnly: true\n  }, {\n    name: \"rightToLeft\",\n    bindKey: {\n      win: \"Ctrl-Alt-Shift-R\",\n      mac: \"Command-Alt-Shift-R\"\n    },\n    exec: function (editor) {\n      editor.session.$bidiHandler.setRtlDirection(editor, true);\n    },\n    readOnly: true\n  }];\n\n  var Editor = require(\"../editor\").Editor;\n\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    rtlText: {\n      set: function (val) {\n        if (val) {\n          this.on(\"change\", onChange);\n          this.on(\"changeSelection\", onChangeSelection);\n          this.renderer.on(\"afterRender\", updateLineDirection);\n          this.commands.on(\"exec\", onCommandEmitted);\n          this.commands.addCommands(commands);\n        } else {\n          this.off(\"change\", onChange);\n          this.off(\"changeSelection\", onChangeSelection);\n          this.renderer.off(\"afterRender\", updateLineDirection);\n          this.commands.off(\"exec\", onCommandEmitted);\n          this.commands.removeCommands(commands);\n          clearTextLayer(this.renderer);\n        }\n\n        this.renderer.updateFull();\n      }\n    },\n    rtl: {\n      set: function (val) {\n        this.session.$bidiHandler.$isRtl = val;\n\n        if (val) {\n          this.setOption(\"rtlText\", false);\n          this.renderer.on(\"afterRender\", updateLineDirection);\n          this.session.$bidiHandler.seenBidi = true;\n        } else {\n          this.renderer.off(\"afterRender\", updateLineDirection);\n          clearTextLayer(this.renderer);\n        }\n\n        this.renderer.updateFull();\n      }\n    }\n  });\n\n  function onChangeSelection(e, editor) {\n    var lead = editor.getSelection().lead;\n\n    if (editor.session.$bidiHandler.isRtlLine(lead.row)) {\n      if (lead.column === 0) {\n        if (editor.session.$bidiHandler.isMoveLeftOperation && lead.row > 0) {\n          editor.getSelection().moveCursorTo(lead.row - 1, editor.session.getLine(lead.row - 1).length);\n        } else {\n          if (editor.getSelection().isEmpty()) lead.column += 1;else lead.setPosition(lead.row, lead.column + 1);\n        }\n      }\n    }\n  }\n\n  function onCommandEmitted(commadEvent) {\n    commadEvent.editor.session.$bidiHandler.isMoveLeftOperation = /gotoleft|selectleft|backspace|removewordleft/.test(commadEvent.command.name);\n  }\n\n  function onChange(delta, editor) {\n    var session = editor.session;\n    session.$bidiHandler.currentRow = null;\n\n    if (session.$bidiHandler.isRtlLine(delta.start.row) && delta.action === 'insert' && delta.lines.length > 1) {\n      for (var row = delta.start.row; row < delta.end.row; row++) {\n        if (session.getLine(row + 1).charAt(0) !== session.$bidiHandler.RLE) session.doc.$lines[row + 1] = session.$bidiHandler.RLE + session.getLine(row + 1);\n      }\n    }\n  }\n\n  function updateLineDirection(e, renderer) {\n    var session = renderer.session;\n    var $bidiHandler = session.$bidiHandler;\n    var cells = renderer.$textLayer.$lines.cells;\n    var width = renderer.layerConfig.width - renderer.layerConfig.padding + \"px\";\n    cells.forEach(function (cell) {\n      var style = cell.element.style;\n\n      if ($bidiHandler && $bidiHandler.isRtlLine(cell.row)) {\n        style.direction = \"rtl\";\n        style.textAlign = \"right\";\n        style.width = width;\n      } else {\n        style.direction = \"\";\n        style.textAlign = \"\";\n        style.width = \"\";\n      }\n    });\n  }\n\n  function clearTextLayer(renderer) {\n    var lines = renderer.$textLayer.$lines;\n    lines.cells.forEach(clear);\n    lines.cellCache.forEach(clear);\n\n    function clear(cell) {\n      var style = cell.element.style;\n      style.direction = style.textAlign = style.width = \"\";\n    }\n  }\n});\n\n(function () {\n  ace.require([\"ace/ext/rtl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/ext-rtl.js"],"names":["ace","define","require","exports","module","commands","name","bindKey","win","mac","exec","editor","session","$bidiHandler","setRtlDirection","readOnly","Editor","defineOptions","prototype","rtlText","set","val","on","onChange","onChangeSelection","renderer","updateLineDirection","onCommandEmitted","addCommands","off","removeCommands","clearTextLayer","updateFull","rtl","$isRtl","setOption","seenBidi","e","lead","getSelection","isRtlLine","row","column","isMoveLeftOperation","moveCursorTo","getLine","length","isEmpty","setPosition","commadEvent","test","command","delta","currentRow","start","action","lines","end","charAt","RLE","doc","$lines","cells","$textLayer","width","layerConfig","padding","forEach","cell","style","element","direction","textAlign","clear","cellCache","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/ext/rtl\",[\"require\",\"exports\",\"module\",\"ace/editor\",\"ace/config\"], function(require, exports, module) {\n\"use strict\";\n\nvar commands = [{\n    name: \"leftToRight\",\n    bindKey: { win: \"Ctrl-Alt-Shift-L\", mac: \"Command-Alt-Shift-L\" },\n    exec: function(editor) {\n        editor.session.$bidiHandler.setRtlDirection(editor, false);\n    },\n    readOnly: true\n}, {\n    name: \"rightToLeft\",\n    bindKey: { win: \"Ctrl-Alt-Shift-R\",  mac: \"Command-Alt-Shift-R\" },\n    exec: function(editor) {\n        editor.session.$bidiHandler.setRtlDirection(editor, true);\n    },\n    readOnly: true\n}];\n\nvar Editor = require(\"../editor\").Editor;\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    rtlText: {\n        set: function(val) {\n            if (val) {\n                this.on(\"change\", onChange);\n                this.on(\"changeSelection\", onChangeSelection);\n                this.renderer.on(\"afterRender\", updateLineDirection);\n                this.commands.on(\"exec\", onCommandEmitted);\n                this.commands.addCommands(commands);\n            } else {\n                this.off(\"change\", onChange);\n                this.off(\"changeSelection\", onChangeSelection);\n                this.renderer.off(\"afterRender\", updateLineDirection);\n                this.commands.off(\"exec\", onCommandEmitted);\n                this.commands.removeCommands(commands);\n                clearTextLayer(this.renderer);\n            }\n            this.renderer.updateFull();\n        }\n    },\n    rtl: {\n        set: function(val) {\n            this.session.$bidiHandler.$isRtl = val;\n            if (val) {\n                this.setOption(\"rtlText\", false);\n                this.renderer.on(\"afterRender\", updateLineDirection);\n                this.session.$bidiHandler.seenBidi = true;\n            } else {\n                this.renderer.off(\"afterRender\", updateLineDirection);\n                clearTextLayer(this.renderer);\n            }\n            this.renderer.updateFull();\n        }\n    }\n});\nfunction onChangeSelection(e, editor) {\n    var lead = editor.getSelection().lead;\n    if (editor.session.$bidiHandler.isRtlLine(lead.row)) {\n        if (lead.column === 0) {\n            if (editor.session.$bidiHandler.isMoveLeftOperation && lead.row > 0) {\n                editor.getSelection().moveCursorTo(lead.row - 1, editor.session.getLine(lead.row - 1).length);\n            } else {\n                if (editor.getSelection().isEmpty())\n                    lead.column += 1;\n                else\n                    lead.setPosition(lead.row, lead.column + 1);\n            }\n        }\n    }\n}\n\nfunction onCommandEmitted(commadEvent) {\n    commadEvent.editor.session.$bidiHandler.isMoveLeftOperation = /gotoleft|selectleft|backspace|removewordleft/.test(commadEvent.command.name);\n}\nfunction onChange(delta, editor) {\n    var session = editor.session;\n    session.$bidiHandler.currentRow = null;\n    if (session.$bidiHandler.isRtlLine(delta.start.row) && delta.action === 'insert' && delta.lines.length > 1) {\n        for (var row = delta.start.row; row < delta.end.row; row++) {\n            if (session.getLine(row + 1).charAt(0) !== session.$bidiHandler.RLE)\n                session.doc.$lines[row + 1] = session.$bidiHandler.RLE + session.getLine(row + 1);\n        }\n    }\n}\n\nfunction updateLineDirection(e, renderer) {\n    var session = renderer.session;\n    var $bidiHandler = session.$bidiHandler;\n    var cells = renderer.$textLayer.$lines.cells;\n    var width = renderer.layerConfig.width - renderer.layerConfig.padding + \"px\";\n    cells.forEach(function(cell) {\n        var style = cell.element.style;\n        if ($bidiHandler && $bidiHandler.isRtlLine(cell.row)) {\n            style.direction = \"rtl\";\n            style.textAlign = \"right\";\n            style.width = width;\n        } else {\n            style.direction = \"\";\n            style.textAlign = \"\";\n            style.width = \"\";\n        }\n    });\n}\n\nfunction clearTextLayer(renderer) {\n    var lines = renderer.$textLayer.$lines;\n    lines.cells.forEach(clear);\n    lines.cellCache.forEach(clear);\n    function clear(cell) {\n        var style = cell.element.style;\n        style.direction = style.textAlign = style.width = \"\";\n    }\n}\n\n});                (function() {\n                    ace.require([\"ace/ext/rtl\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}