{"ast":null,"code":"ace.define(\"ace/snippets/python\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"snippet #!\\n\\\n\t#!/usr/bin/env python\\n\\\nsnippet imp\\n\\\n\timport ${1:module}\\n\\\nsnippet from\\n\\\n\tfrom ${1:package} import ${2:module}\\n\\\n# Module Docstring\\n\\\nsnippet docs\\n\\\n\t'''\\n\\\n\tFile: ${1:FILENAME:file_name}\\n\\\n\tAuthor: ${2:author}\\n\\\n\tDescription: ${3}\\n\\\n\t'''\\n\\\nsnippet wh\\n\\\n\twhile ${1:condition}:\\n\\\n\t\t${2:# TODO: write code...}\\n\\\n# dowh - does the same as do...while in other languages\\n\\\nsnippet dowh\\n\\\n\twhile True:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\t\tif ${2:condition}:\\n\\\n\t\t\tbreak\\n\\\nsnippet with\\n\\\n\twith ${1:expr} as ${2:var}:\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# New Class\\n\\\nsnippet cl\\n\\\n\tclass ${1:ClassName}(${2:object}):\\n\\\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\n\t\tdef __init__(self, ${4:arg}):\\n\\\n\t\t\t${5:super($1, self).__init__()}\\n\\\n\t\t\tself.$4 = $4\\n\\\n\t\t\t${6}\\n\\\n# New Function\\n\\\nsnippet def\\n\\\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\n\t\t${4:# TODO: write code...}\\n\\\nsnippet deff\\n\\\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# New Method\\n\\\nsnippet defs\\n\\\n\tdef ${1:mname}(self, ${2:arg}):\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# New Property\\n\\\nsnippet property\\n\\\n\tdef ${1:foo}():\\n\\\n\t\tdoc = \\\"${2:The $1 property.}\\\"\\n\\\n\t\tdef fget(self):\\n\\\n\t\t\t${3:return self._$1}\\n\\\n\t\tdef fset(self, value):\\n\\\n\t\t\t${4:self._$1 = value}\\n\\\n# Ifs\\n\\\nsnippet if\\n\\\n\tif ${1:condition}:\\n\\\n\t\t${2:# TODO: write code...}\\n\\\nsnippet el\\n\\\n\telse:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\nsnippet ei\\n\\\n\telif ${1:condition}:\\n\\\n\t\t${2:# TODO: write code...}\\n\\\n# For\\n\\\nsnippet for\\n\\\n\tfor ${1:item} in ${2:items}:\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# Encodes\\n\\\nsnippet cutf8\\n\\\n\t# -*- coding: utf-8 -*-\\n\\\nsnippet clatin1\\n\\\n\t# -*- coding: latin-1 -*-\\n\\\nsnippet cascii\\n\\\n\t# -*- coding: ascii -*-\\n\\\n# Lambda\\n\\\nsnippet ld\\n\\\n\t${1:var} = lambda ${2:vars} : ${3:action}\\n\\\nsnippet .\\n\\\n\tself.\\n\\\nsnippet try Try/Except\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\nsnippet try Try/Except/Else\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\n\telse:\\n\\\n\t\t${5:# TODO: write code...}\\n\\\nsnippet try Try/Except/Finally\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\n\tfinally:\\n\\\n\t\t${5:# TODO: write code...}\\n\\\nsnippet try Try/Except/Else/Finally\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\n\telse:\\n\\\n\t\t${5:# TODO: write code...}\\n\\\n\tfinally:\\n\\\n\t\t${6:# TODO: write code...}\\n\\\n# if __name__ == '__main__':\\n\\\nsnippet ifmain\\n\\\n\tif __name__ == '__main__':\\n\\\n\t\t${1:main()}\\n\\\n# __magic__\\n\\\nsnippet _\\n\\\n\t__${1:init}__${2}\\n\\\n# python debugger (pdb)\\n\\\nsnippet pdb\\n\\\n\timport pdb; pdb.set_trace()\\n\\\n# ipython debugger (ipdb)\\n\\\nsnippet ipdb\\n\\\n\timport ipdb; ipdb.set_trace()\\n\\\n# ipython debugger (pdbbb)\\n\\\nsnippet pdbbb\\n\\\n\timport pdbpp; pdbpp.set_trace()\\n\\\nsnippet pprint\\n\\\n\timport pprint; pprint.pprint(${1})${2}\\n\\\nsnippet \\\"\\n\\\n\t\\\"\\\"\\\"\\n\\\n\t${1:doc}\\n\\\n\t\\\"\\\"\\\"\\n\\\n# test function/method\\n\\\nsnippet test\\n\\\n\tdef test_${1:description}(${2:self}):\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# test case\\n\\\nsnippet testcase\\n\\\n\tclass ${1:ExampleCase}(unittest.TestCase):\\n\\\n\t\t\\n\\\n\t\tdef test_${2:description}(self):\\n\\\n\t\t\t${3:# TODO: write code...}\\n\\\nsnippet fut\\n\\\n\tfrom __future__ import ${1}\\n\\\n#getopt\\n\\\nsnippet getopt\\n\\\n\ttry:\\n\\\n\t\t# Short option syntax: \\\"hv:\\\"\\n\\\n\t\t# Long option syntax: \\\"help\\\" or \\\"verbose=\\\"\\n\\\n\t\topts, args = getopt.getopt(sys.argv[1:], \\\"${1:short_options}\\\", [${2:long_options}])\\n\\\n\t\\n\\\n\texcept getopt.GetoptError, err:\\n\\\n\t\t# Print debug info\\n\\\n\t\tprint str(err)\\n\\\n\t\t${3:error_action}\\n\\\n\\n\\\n\tfor option, argument in opts:\\n\\\n\t\tif option in (\\\"-h\\\", \\\"--help\\\"):\\n\\\n\t\t\t${4}\\n\\\n\t\telif option in (\\\"-v\\\", \\\"--verbose\\\"):\\n\\\n\t\t\tverbose = argument\\n\\\n\";\n  exports.scope = \"python\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/python\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/snippets/python.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,qBAAX,EAAiC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAjC,EAAiE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACpG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AA+JAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,QAAhB;AAEC,CApKD;;AAoKmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,qBAAD,CAAZ,EAAqC,UAASK,CAAT,EAAY;AAC7C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/python\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\nexports.snippetText = \"snippet #!\\n\\\n\t#!/usr/bin/env python\\n\\\nsnippet imp\\n\\\n\timport ${1:module}\\n\\\nsnippet from\\n\\\n\tfrom ${1:package} import ${2:module}\\n\\\n# Module Docstring\\n\\\nsnippet docs\\n\\\n\t'''\\n\\\n\tFile: ${1:FILENAME:file_name}\\n\\\n\tAuthor: ${2:author}\\n\\\n\tDescription: ${3}\\n\\\n\t'''\\n\\\nsnippet wh\\n\\\n\twhile ${1:condition}:\\n\\\n\t\t${2:# TODO: write code...}\\n\\\n# dowh - does the same as do...while in other languages\\n\\\nsnippet dowh\\n\\\n\twhile True:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\t\tif ${2:condition}:\\n\\\n\t\t\tbreak\\n\\\nsnippet with\\n\\\n\twith ${1:expr} as ${2:var}:\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# New Class\\n\\\nsnippet cl\\n\\\n\tclass ${1:ClassName}(${2:object}):\\n\\\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\n\t\tdef __init__(self, ${4:arg}):\\n\\\n\t\t\t${5:super($1, self).__init__()}\\n\\\n\t\t\tself.$4 = $4\\n\\\n\t\t\t${6}\\n\\\n# New Function\\n\\\nsnippet def\\n\\\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\n\t\t\\\"\\\"\\\"${3:docstring for $1}\\\"\\\"\\\"\\n\\\n\t\t${4:# TODO: write code...}\\n\\\nsnippet deff\\n\\\n\tdef ${1:fname}(${2:`indent('.') ? 'self' : ''`}):\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# New Method\\n\\\nsnippet defs\\n\\\n\tdef ${1:mname}(self, ${2:arg}):\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# New Property\\n\\\nsnippet property\\n\\\n\tdef ${1:foo}():\\n\\\n\t\tdoc = \\\"${2:The $1 property.}\\\"\\n\\\n\t\tdef fget(self):\\n\\\n\t\t\t${3:return self._$1}\\n\\\n\t\tdef fset(self, value):\\n\\\n\t\t\t${4:self._$1 = value}\\n\\\n# Ifs\\n\\\nsnippet if\\n\\\n\tif ${1:condition}:\\n\\\n\t\t${2:# TODO: write code...}\\n\\\nsnippet el\\n\\\n\telse:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\nsnippet ei\\n\\\n\telif ${1:condition}:\\n\\\n\t\t${2:# TODO: write code...}\\n\\\n# For\\n\\\nsnippet for\\n\\\n\tfor ${1:item} in ${2:items}:\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# Encodes\\n\\\nsnippet cutf8\\n\\\n\t# -*- coding: utf-8 -*-\\n\\\nsnippet clatin1\\n\\\n\t# -*- coding: latin-1 -*-\\n\\\nsnippet cascii\\n\\\n\t# -*- coding: ascii -*-\\n\\\n# Lambda\\n\\\nsnippet ld\\n\\\n\t${1:var} = lambda ${2:vars} : ${3:action}\\n\\\nsnippet .\\n\\\n\tself.\\n\\\nsnippet try Try/Except\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\nsnippet try Try/Except/Else\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\n\telse:\\n\\\n\t\t${5:# TODO: write code...}\\n\\\nsnippet try Try/Except/Finally\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\n\tfinally:\\n\\\n\t\t${5:# TODO: write code...}\\n\\\nsnippet try Try/Except/Else/Finally\\n\\\n\ttry:\\n\\\n\t\t${1:# TODO: write code...}\\n\\\n\texcept ${2:Exception}, ${3:e}:\\n\\\n\t\t${4:raise $3}\\n\\\n\telse:\\n\\\n\t\t${5:# TODO: write code...}\\n\\\n\tfinally:\\n\\\n\t\t${6:# TODO: write code...}\\n\\\n# if __name__ == '__main__':\\n\\\nsnippet ifmain\\n\\\n\tif __name__ == '__main__':\\n\\\n\t\t${1:main()}\\n\\\n# __magic__\\n\\\nsnippet _\\n\\\n\t__${1:init}__${2}\\n\\\n# python debugger (pdb)\\n\\\nsnippet pdb\\n\\\n\timport pdb; pdb.set_trace()\\n\\\n# ipython debugger (ipdb)\\n\\\nsnippet ipdb\\n\\\n\timport ipdb; ipdb.set_trace()\\n\\\n# ipython debugger (pdbbb)\\n\\\nsnippet pdbbb\\n\\\n\timport pdbpp; pdbpp.set_trace()\\n\\\nsnippet pprint\\n\\\n\timport pprint; pprint.pprint(${1})${2}\\n\\\nsnippet \\\"\\n\\\n\t\\\"\\\"\\\"\\n\\\n\t${1:doc}\\n\\\n\t\\\"\\\"\\\"\\n\\\n# test function/method\\n\\\nsnippet test\\n\\\n\tdef test_${1:description}(${2:self}):\\n\\\n\t\t${3:# TODO: write code...}\\n\\\n# test case\\n\\\nsnippet testcase\\n\\\n\tclass ${1:ExampleCase}(unittest.TestCase):\\n\\\n\t\t\\n\\\n\t\tdef test_${2:description}(self):\\n\\\n\t\t\t${3:# TODO: write code...}\\n\\\nsnippet fut\\n\\\n\tfrom __future__ import ${1}\\n\\\n#getopt\\n\\\nsnippet getopt\\n\\\n\ttry:\\n\\\n\t\t# Short option syntax: \\\"hv:\\\"\\n\\\n\t\t# Long option syntax: \\\"help\\\" or \\\"verbose=\\\"\\n\\\n\t\topts, args = getopt.getopt(sys.argv[1:], \\\"${1:short_options}\\\", [${2:long_options}])\\n\\\n\t\\n\\\n\texcept getopt.GetoptError, err:\\n\\\n\t\t# Print debug info\\n\\\n\t\tprint str(err)\\n\\\n\t\t${3:error_action}\\n\\\n\\n\\\n\tfor option, argument in opts:\\n\\\n\t\tif option in (\\\"-h\\\", \\\"--help\\\"):\\n\\\n\t\t\t${4}\\n\\\n\t\telif option in (\\\"-v\\\", \\\"--verbose\\\"):\\n\\\n\t\t\tverbose = argument\\n\\\n\";\nexports.scope = \"python\";\n\n});                (function() {\n                    ace.require([\"ace/snippets/python\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}