{"ast":null,"code":"import { contains } from \"../utils/utils\";\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [MISMATCHED_TOKEN_EXCEPTION, NO_VIABLE_ALT_EXCEPTION, EARLY_EXIT_EXCEPTION, NOT_ALL_INPUT_PARSED_EXCEPTION];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES); // hacks to bypass no support for custom Errors in javascript/typescript\n\nexport function isRecognitionException(error) {\n  // can't do instanceof on hacked custom js exceptions\n  return contains(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexport function MismatchedTokenException(message, token, previousToken) {\n  this.name = MISMATCHED_TOKEN_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n} // must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\n\nMismatchedTokenException.prototype = Error.prototype;\nexport function NoViableAltException(message, token, previousToken) {\n  this.name = NO_VIABLE_ALT_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nexport function NotAllInputParsedException(message, token) {\n  this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nexport function EarlyExitException(message, token, previousToken) {\n  this.name = EARLY_EXIT_EXCEPTION;\n  this.message = message;\n  this.token = token;\n  this.previousToken = previousToken;\n  this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;","map":{"version":3,"sources":["../../../src/parse/exceptions_public.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,gBAAzB;AAGA,IAAM,0BAA0B,GAAG,0BAAnC;AACA,IAAM,uBAAuB,GAAG,sBAAhC;AACA,IAAM,oBAAoB,GAAG,oBAA7B;AACA,IAAM,8BAA8B,GAAG,4BAAvC;AAEA,IAAM,2BAA2B,GAAG,CAClC,0BADkC,EAElC,uBAFkC,EAGlC,oBAHkC,EAIlC,8BAJkC,CAApC;AAOA,MAAM,CAAC,MAAP,CAAc,2BAAd,E,CAEA;;AACA,OAAM,SAAU,sBAAV,CAAiC,KAAjC,EAA6C;AACjD;AACA,SAAO,QAAQ,CAAC,2BAAD,EAA8B,KAAK,CAAC,IAApC,CAAf;AACD;AAED,OAAM,SAAU,wBAAV,CACJ,OADI,EAEJ,KAFI,EAGJ,aAHI,EAGiB;AAErB,OAAK,IAAL,GAAY,0BAAZ;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,aAAL,GAAqB,aAArB;AACA,OAAK,cAAL,GAAsB,EAAtB;AACD,C,CAED;AACA;;AACA,wBAAwB,CAAC,SAAzB,GAAqC,KAAK,CAAC,SAA3C;AAEA,OAAM,SAAU,oBAAV,CACJ,OADI,EAEJ,KAFI,EAGJ,aAHI,EAGiB;AAErB,OAAK,IAAL,GAAY,uBAAZ;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,aAAL,GAAqB,aAArB;AACA,OAAK,cAAL,GAAsB,EAAtB;AACD;AAED,oBAAoB,CAAC,SAArB,GAAiC,KAAK,CAAC,SAAvC;AAEA,OAAM,SAAU,0BAAV,CAAqC,OAArC,EAAsD,KAAtD,EAAmE;AACvE,OAAK,IAAL,GAAY,8BAAZ;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,cAAL,GAAsB,EAAtB;AACD;AAED,0BAA0B,CAAC,SAA3B,GAAuC,KAAK,CAAC,SAA7C;AAEA,OAAM,SAAU,kBAAV,CACJ,OADI,EAEJ,KAFI,EAGJ,aAHI,EAGiB;AAErB,OAAK,IAAL,GAAY,oBAAZ;AACA,OAAK,OAAL,GAAe,OAAf;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,aAAL,GAAqB,aAArB;AACA,OAAK,cAAL,GAAsB,EAAtB;AACD;AAED,kBAAkB,CAAC,SAAnB,GAA+B,KAAK,CAAC,SAArC","sourceRoot":"","sourcesContent":["import { contains } from \"../utils/utils\";\nvar MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nvar NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nvar EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nvar NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\nvar RECOGNITION_EXCEPTION_NAMES = [\n    MISMATCHED_TOKEN_EXCEPTION,\n    NO_VIABLE_ALT_EXCEPTION,\n    EARLY_EXIT_EXCEPTION,\n    NOT_ALL_INPUT_PARSED_EXCEPTION\n];\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error) {\n    // can't do instanceof on hacked custom js exceptions\n    return contains(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\nexport function MismatchedTokenException(message, token, previousToken) {\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\n// must use the \"Error.prototype\" instead of \"new Error\"\n// because the stack trace points to where \"new Error\" was invoked\"\nMismatchedTokenException.prototype = Error.prototype;\nexport function NoViableAltException(message, token, previousToken) {\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nNoViableAltException.prototype = Error.prototype;\nexport function NotAllInputParsedException(message, token) {\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.resyncedTokens = [];\n}\nNotAllInputParsedException.prototype = Error.prototype;\nexport function EarlyExitException(message, token, previousToken) {\n    this.name = EARLY_EXIT_EXCEPTION;\n    this.message = message;\n    this.token = token;\n    this.previousToken = previousToken;\n    this.resyncedTokens = [];\n}\nEarlyExitException.prototype = Error.prototype;\n//# sourceMappingURL=exceptions_public.js.map"]},"metadata":{},"sourceType":"module"}