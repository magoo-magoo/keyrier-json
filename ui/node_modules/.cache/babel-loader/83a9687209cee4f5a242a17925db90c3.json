{"ast":null,"code":"import { isDebugMode } from 'core/misc/debug';\nimport { getAppVersion } from 'core/misc/utils'; // tslint:disable:no-console\n\nexport const logError = (error, payload) => {\n  console.error('Keyrier', error);\n\n  if (typeof payload !== 'undefined') {\n    console.error(payload);\n  }\n};\nexport const logWarning = (message, payload) => {\n  if (typeof payload === 'undefined') {\n    console.warn('Keyrier', message);\n  } else console.warn('Keyrier', message, payload);\n};\nexport const logDebug = (message, payload) => {\n  if (typeof payload === 'undefined') {\n    console.debug('Keyrier', message);\n  } else console.debug('Keyrier', message, payload);\n};\nexport const logPerf = (name, duration, customProperties) => {\n  if (isDebugMode()) {\n    const appVersion = getAppVersion();\n    const payload = {\n      name,\n      duration,\n      appVersion,\n      ...customProperties,\n      location: window.location.href\n    };\n    logEvents.enqueue(payload);\n  }\n};\n\nclass Queue {\n  constructor() {\n    this.queue = [];\n    this.offset = 0;\n  }\n\n  // Returns the length of the queue.\n  getLength() {\n    return this.queue.length - this.offset;\n  } // Returns true if the queue is empty, and false otherwise.\n\n\n  isEmpty() {\n    return this.queue.length === 0;\n  }\n  /* Enqueues the specified item. The parameter is:\n   *\n   * item - the item to enqueue\n   */\n\n\n  enqueue(item) {\n    this.queue.push(item);\n  }\n  /* Dequeues an item and returns it. If the queue is empty, the value\n   * 'undefined' is returned.\n   */\n\n\n  dequeue() {\n    // if the queue is empty, return immediately\n    if (this.queue.length === 0) {\n      return undefined;\n    } // store the item at the front of the queue\n\n\n    const item = this.queue[this.offset]; // increment the offset and remove the free space if necessary\n\n    if (++this.offset * 2 >= this.queue.length) {\n      this.queue = this.queue.slice(this.offset);\n      this.offset = 0;\n    } // return the dequeued item\n\n\n    return item;\n  }\n  /* Returns the item at the front of the queue (without dequeuing it). If the\n   * queue is empty then undefined is returned.\n   */\n\n\n  peek() {\n    return this.queue.length > 0 ? this.queue[this.offset] : undefined;\n  }\n\n}\n\nexport const logEvents = new Queue();\nwindow.__PERF_EVENT_LOGS = logEvents;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/core/logging/logger.ts"],"names":["isDebugMode","getAppVersion","logError","error","payload","console","logWarning","message","warn","logDebug","debug","logPerf","name","duration","customProperties","appVersion","location","window","href","logEvents","enqueue","Queue","queue","offset","getLength","length","isEmpty","item","push","dequeue","undefined","slice","peek","__PERF_EVENT_LOGS"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,SAASC,aAAT,QAA8B,iBAA9B,C,CAEA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAwBC,OAAxB,KAA0C;AAC9DC,EAAAA,OAAO,CAACF,KAAR,CAAc,SAAd,EAAyBA,KAAzB;;AACA,MAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAChCC,IAAAA,OAAO,CAACF,KAAR,CAAcC,OAAd;AACH;AACJ,CALM;AAOP,OAAO,MAAME,UAAU,GAAG,CAACC,OAAD,EAAkBH,OAAlB,KAAoC;AAC1D,MAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAChCC,IAAAA,OAAO,CAACG,IAAR,CAAa,SAAb,EAAwBD,OAAxB;AACH,GAFD,MAEOF,OAAO,CAACG,IAAR,CAAa,SAAb,EAAwBD,OAAxB,EAAiCH,OAAjC;AACV,CAJM;AAMP,OAAO,MAAMK,QAAQ,GAAG,CAACF,OAAD,EAAkBH,OAAlB,KAAoC;AACxD,MAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAChCC,IAAAA,OAAO,CAACK,KAAR,CAAc,SAAd,EAAyBH,OAAzB;AACH,GAFD,MAEOF,OAAO,CAACK,KAAR,CAAc,SAAd,EAAyBH,OAAzB,EAAkCH,OAAlC;AACV,CAJM;AAMP,OAAO,MAAMO,OAAO,GAAG,CAACC,IAAD,EAAeC,QAAf,EAAkCC,gBAAlC,KAA6D;AAChF,MAAId,WAAW,EAAf,EAAmB;AACf,UAAMe,UAAU,GAAGd,aAAa,EAAhC;AACA,UAAMG,OAAO,GAAG;AAAEQ,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBE,MAAAA,UAAlB;AAA8B,SAAGD,gBAAjC;AAAmDE,MAAAA,QAAQ,EAAEC,MAAM,CAACD,QAAP,CAAgBE;AAA7E,KAAhB;AACAC,IAAAA,SAAS,CAACC,OAAV,CAAkBhB,OAAlB;AACH;AACJ,CANM;;AAQP,MAAMiB,KAAN,CAAqB;AAAA;AAAA,SAETC,KAFS,GAEI,EAFJ;AAAA,SAGTC,MAHS,GAGA,CAHA;AAAA;;AAKjB;AACOC,EAAAA,SAAP,GAAmB;AACf,WAAO,KAAKF,KAAL,CAAWG,MAAX,GAAoB,KAAKF,MAAhC;AACH,GARgB,CAUjB;;;AACOG,EAAAA,OAAP,GAAiB;AACb,WAAO,KAAKJ,KAAL,CAAWG,MAAX,KAAsB,CAA7B;AACH;AAED;;;;;;AAIOL,EAAAA,OAAP,CAAeO,IAAf,EAAwB;AACpB,SAAKL,KAAL,CAAWM,IAAX,CAAgBD,IAAhB;AACH;AAED;;;;;AAGOE,EAAAA,OAAP,GAAiB;AACb;AACA,QAAI,KAAKP,KAAL,CAAWG,MAAX,KAAsB,CAA1B,EAA6B;AACzB,aAAOK,SAAP;AACH,KAJY,CAMb;;;AACA,UAAMH,IAAI,GAAG,KAAKL,KAAL,CAAW,KAAKC,MAAhB,CAAb,CAPa,CASb;;AACA,QAAI,EAAE,KAAKA,MAAP,GAAgB,CAAhB,IAAqB,KAAKD,KAAL,CAAWG,MAApC,EAA4C;AACxC,WAAKH,KAAL,GAAa,KAAKA,KAAL,CAAWS,KAAX,CAAiB,KAAKR,MAAtB,CAAb;AACA,WAAKA,MAAL,GAAc,CAAd;AACH,KAbY,CAeb;;;AACA,WAAOI,IAAP;AACH;AAED;;;;;AAGOK,EAAAA,IAAP,GAAc;AACV,WAAO,KAAKV,KAAL,CAAWG,MAAX,GAAoB,CAApB,GAAwB,KAAKH,KAAL,CAAW,KAAKC,MAAhB,CAAxB,GAAkDO,SAAzD;AACH;;AAlDgB;;AAqDrB,OAAO,MAAMX,SAAS,GAAG,IAAIE,KAAJ,EAAlB;AACLJ,MAAD,CAAgBgB,iBAAhB,GAAoCd,SAApC","sourcesContent":["import { isDebugMode } from 'core/misc/debug'\nimport { getAppVersion } from 'core/misc/utils'\n\n// tslint:disable:no-console\n\nexport const logError = (error: string | Error, payload?: any) => {\n    console.error('Keyrier', error)\n    if (typeof payload !== 'undefined') {\n        console.error(payload)\n    }\n}\n\nexport const logWarning = (message: string, payload?: any) => {\n    if (typeof payload === 'undefined') {\n        console.warn('Keyrier', message)\n    } else console.warn('Keyrier', message, payload)\n}\n\nexport const logDebug = (message: string, payload?: any) => {\n    if (typeof payload === 'undefined') {\n        console.debug('Keyrier', message)\n    } else console.debug('Keyrier', message, payload)\n}\n\nexport const logPerf = (name: string, duration?: number, customProperties?: any) => {\n    if (isDebugMode()) {\n        const appVersion = getAppVersion()\n        const payload = { name, duration, appVersion, ...customProperties, location: window.location.href }\n        logEvents.enqueue(payload)\n    }\n}\n\nclass Queue<T = any> {\n    // initialise the queue and offset\n    private queue: T[] = []\n    private offset = 0\n\n    // Returns the length of the queue.\n    public getLength() {\n        return this.queue.length - this.offset\n    }\n\n    // Returns true if the queue is empty, and false otherwise.\n    public isEmpty() {\n        return this.queue.length === 0\n    }\n\n    /* Enqueues the specified item. The parameter is:\n     *\n     * item - the item to enqueue\n     */\n    public enqueue(item: T) {\n        this.queue.push(item)\n    }\n\n    /* Dequeues an item and returns it. If the queue is empty, the value\n     * 'undefined' is returned.\n     */\n    public dequeue() {\n        // if the queue is empty, return immediately\n        if (this.queue.length === 0) {\n            return undefined\n        }\n\n        // store the item at the front of the queue\n        const item = this.queue[this.offset]\n\n        // increment the offset and remove the free space if necessary\n        if (++this.offset * 2 >= this.queue.length) {\n            this.queue = this.queue.slice(this.offset)\n            this.offset = 0\n        }\n\n        // return the dequeued item\n        return item\n    }\n\n    /* Returns the item at the front of the queue (without dequeuing it). If the\n     * queue is empty then undefined is returned.\n     */\n    public peek() {\n        return this.queue.length > 0 ? this.queue[this.offset] : undefined\n    }\n}\n\nexport const logEvents = new Queue()\n;(window as any).__PERF_EVENT_LOGS = logEvents\n"]},"metadata":{},"sourceType":"module"}