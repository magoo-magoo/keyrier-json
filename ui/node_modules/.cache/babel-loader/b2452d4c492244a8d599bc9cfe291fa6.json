{"ast":null,"code":"ace.define(\"ace/mode/gitignore_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var GitignoreHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: /^\\s*#.*$/\n      }, {\n        token: \"keyword\",\n        // negated patterns\n        regex: /^\\s*!.*$/\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  GitignoreHighlightRules.metaData = {\n    fileTypes: ['gitignore'],\n    name: 'Gitignore'\n  };\n  oop.inherits(GitignoreHighlightRules, TextHighlightRules);\n  exports.GitignoreHighlightRules = GitignoreHighlightRules;\n});\nace.define(\"ace/mode/gitignore\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/gitignore_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var GitignoreHighlightRules = require(\"./gitignore_highlight_rules\").GitignoreHighlightRules;\n\n  var Mode = function () {\n    this.HighlightRules = GitignoreHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gitignore\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/gitignore\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-gitignore.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","GitignoreHighlightRules","$rules","token","regex","normalizeRules","metaData","fileTypes","name","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","call","prototype","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,oCAAX,EAAgD,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,+BAA5C,CAAhD,EAA8H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACjK;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAD,CAAP,CAAkCI,kBAA3D;;AAEA,MAAIC,uBAAuB,GAAG,YAAW;AACrC,SAAKC,MAAL,GAAc;AACV,eAAU,CACN;AACIC,QAAAA,KAAK,EAAG,SADZ;AAEIC,QAAAA,KAAK,EAAG;AAFZ,OADM,EAIH;AACCD,QAAAA,KAAK,EAAG,SADT;AACoB;AACnBC,QAAAA,KAAK,EAAG;AAFT,OAJG;AADA,KAAd;AAYA,SAAKC,cAAL;AACH,GAdD;;AAgBAJ,EAAAA,uBAAuB,CAACK,QAAxB,GAAmC;AAC/BC,IAAAA,SAAS,EAAE,CAAC,WAAD,CADoB;AAE/BC,IAAAA,IAAI,EAAE;AAFyB,GAAnC;AAKAT,EAAAA,GAAG,CAACU,QAAJ,CAAaR,uBAAb,EAAsCD,kBAAtC;AAEAH,EAAAA,OAAO,CAACI,uBAAR,GAAkCA,uBAAlC;AACC,CA9BD;AAgCAP,GAAG,CAACC,MAAJ,CAAW,oBAAX,EAAgC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,eAA5C,EAA4D,oCAA5D,CAAhC,EAAmI,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACtK;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAIc,QAAQ,GAAGd,OAAO,CAAC,QAAD,CAAP,CAAkBe,IAAjC;;AACA,MAAIV,uBAAuB,GAAGL,OAAO,CAAC,6BAAD,CAAP,CAAuCK,uBAArE;;AAEA,MAAIU,IAAI,GAAG,YAAW;AAClB,SAAKC,cAAL,GAAsBX,uBAAtB;AACA,SAAKY,UAAL,GAAkB,KAAKC,iBAAvB;AACH,GAHD;;AAIAf,EAAAA,GAAG,CAACU,QAAJ,CAAaE,IAAb,EAAmBD,QAAnB;AAEA,GAAC,YAAW;AACR,SAAKK,gBAAL,GAAwB,GAAxB;AACA,SAAKC,GAAL,GAAW,oBAAX;AACH,GAHD,EAGGC,IAHH,CAGQN,IAAI,CAACO,SAHb;AAKArB,EAAAA,OAAO,CAACc,IAAR,GAAeA,IAAf;AACC,CAnBD;;AAmBmB,CAAC,YAAW;AACXjB,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,oBAAD,CAAZ,EAAoC,UAASuB,CAAT,EAAY;AAC5C,QAAI,OAAOrB,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBsB,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/mode/gitignore_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar GitignoreHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : /^\\s*#.*$/\n            }, {\n                token : \"keyword\", // negated patterns\n                regex : /^\\s*!.*$/\n            }\n        ]\n    };\n    \n    this.normalizeRules();\n};\n\nGitignoreHighlightRules.metaData = {\n    fileTypes: ['gitignore'],\n    name: 'Gitignore'\n};\n\noop.inherits(GitignoreHighlightRules, TextHighlightRules);\n\nexports.GitignoreHighlightRules = GitignoreHighlightRules;\n});\n\nace.define(\"ace/mode/gitignore\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/gitignore_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar GitignoreHighlightRules = require(\"./gitignore_highlight_rules\").GitignoreHighlightRules;\n\nvar Mode = function() {\n    this.HighlightRules = GitignoreHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/gitignore\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/gitignore\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}