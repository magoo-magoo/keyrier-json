{"ast":null,"code":"ace.define(\"ace/ext/whitespace\", [\"require\", \"exports\", \"module\", \"ace/lib/lang\"], function (require, exports, module) {\n  \"use strict\";\n\n  var lang = require(\"../lib/lang\");\n\n  exports.$detectIndentation = function (lines, fallback) {\n    var stats = [];\n    var changes = [];\n    var tabIndents = 0;\n    var prevSpaces = 0;\n    var max = Math.min(lines.length, 1000);\n\n    for (var i = 0; i < max; i++) {\n      var line = lines[i];\n      if (!/^\\s*[^*+\\-\\s]/.test(line)) continue;\n\n      if (line[0] == \"\\t\") {\n        tabIndents++;\n        prevSpaces = -Number.MAX_VALUE;\n      } else {\n        var spaces = line.match(/^ */)[0].length;\n\n        if (spaces && line[spaces] != \"\\t\") {\n          var diff = spaces - prevSpaces;\n          if (diff > 0 && !(prevSpaces % diff) && !(spaces % diff)) changes[diff] = (changes[diff] || 0) + 1;\n          stats[spaces] = (stats[spaces] || 0) + 1;\n        }\n\n        prevSpaces = spaces;\n      }\n\n      while (i < max && line[line.length - 1] == \"\\\\\") line = lines[i++];\n    }\n\n    function getScore(indent) {\n      var score = 0;\n\n      for (var i = indent; i < stats.length; i += indent) score += stats[i] || 0;\n\n      return score;\n    }\n\n    var changesTotal = changes.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    var first = {\n      score: 0,\n      length: 0\n    };\n    var spaceIndents = 0;\n\n    for (var i = 1; i < 12; i++) {\n      var score = getScore(i);\n\n      if (i == 1) {\n        spaceIndents = score;\n        score = stats[1] ? 0.9 : 0.8;\n        if (!stats.length) score = 0;\n      } else score /= spaceIndents;\n\n      if (changes[i]) score += changes[i] / changesTotal;\n      if (score > first.score) first = {\n        score: score,\n        length: i\n      };\n    }\n\n    if (first.score && first.score > 1.4) var tabLength = first.length;\n\n    if (tabIndents > spaceIndents + 1) {\n      if (tabLength == 1 || spaceIndents < tabIndents / 4 || first.score < 1.8) tabLength = undefined;\n      return {\n        ch: \"\\t\",\n        length: tabLength\n      };\n    }\n\n    if (spaceIndents > tabIndents + 1) return {\n      ch: \" \",\n      length: tabLength\n    };\n  };\n\n  exports.detectIndentation = function (session) {\n    var lines = session.getLines(0, 1000);\n    var indent = exports.$detectIndentation(lines) || {};\n    if (indent.ch) session.setUseSoftTabs(indent.ch == \" \");\n    if (indent.length) session.setTabSize(indent.length);\n    return indent;\n  };\n\n  exports.trimTrailingSpace = function (session, options) {\n    var doc = session.getDocument();\n    var lines = doc.getAllLines();\n    var min = options && options.trimEmpty ? -1 : 0;\n    var cursors = [],\n        ci = -1;\n\n    if (options && options.keepCursorPosition) {\n      if (session.selection.rangeCount) {\n        session.selection.rangeList.ranges.forEach(function (x, i, ranges) {\n          var next = ranges[i + 1];\n          if (next && next.cursor.row == x.cursor.row) return;\n          cursors.push(x.cursor);\n        });\n      } else {\n        cursors.push(session.selection.getCursor());\n      }\n\n      ci = 0;\n    }\n\n    var cursorRow = cursors[ci] && cursors[ci].row;\n\n    for (var i = 0, l = lines.length; i < l; i++) {\n      var line = lines[i];\n      var index = line.search(/\\s+$/);\n\n      if (i == cursorRow) {\n        if (index < cursors[ci].column && index > min) index = cursors[ci].column;\n        ci++;\n        cursorRow = cursors[ci] ? cursors[ci].row : -1;\n      }\n\n      if (index > min) doc.removeInLine(i, index, line.length);\n    }\n  };\n\n  exports.convertIndentation = function (session, ch, len) {\n    var oldCh = session.getTabString()[0];\n    var oldLen = session.getTabSize();\n    if (!len) len = oldLen;\n    if (!ch) ch = oldCh;\n    var tab = ch == \"\\t\" ? ch : lang.stringRepeat(ch, len);\n    var doc = session.doc;\n    var lines = doc.getAllLines();\n    var cache = {};\n    var spaceCache = {};\n\n    for (var i = 0, l = lines.length; i < l; i++) {\n      var line = lines[i];\n      var match = line.match(/^\\s*/)[0];\n\n      if (match) {\n        var w = session.$getStringScreenWidth(match)[0];\n        var tabCount = Math.floor(w / oldLen);\n        var reminder = w % oldLen;\n        var toInsert = cache[tabCount] || (cache[tabCount] = lang.stringRepeat(tab, tabCount));\n        toInsert += spaceCache[reminder] || (spaceCache[reminder] = lang.stringRepeat(\" \", reminder));\n\n        if (toInsert != match) {\n          doc.removeInLine(i, 0, match.length);\n          doc.insertInLine({\n            row: i,\n            column: 0\n          }, toInsert);\n        }\n      }\n    }\n\n    session.setTabSize(len);\n    session.setUseSoftTabs(ch == \" \");\n  };\n\n  exports.$parseStringArg = function (text) {\n    var indent = {};\n    if (/t/.test(text)) indent.ch = \"\\t\";else if (/s/.test(text)) indent.ch = \" \";\n    var m = text.match(/\\d+/);\n    if (m) indent.length = parseInt(m[0], 10);\n    return indent;\n  };\n\n  exports.$parseArg = function (arg) {\n    if (!arg) return {};\n    if (typeof arg == \"string\") return exports.$parseStringArg(arg);\n    if (typeof arg.text == \"string\") return exports.$parseStringArg(arg.text);\n    return arg;\n  };\n\n  exports.commands = [{\n    name: \"detectIndentation\",\n    description: \"Detect indentation from content\",\n    exec: function (editor) {\n      exports.detectIndentation(editor.session);\n    }\n  }, {\n    name: \"trimTrailingSpace\",\n    description: \"Trim trailing whitespace\",\n    exec: function (editor, args) {\n      exports.trimTrailingSpace(editor.session, args);\n    }\n  }, {\n    name: \"convertIndentation\",\n    description: \"Convert indentation to ...\",\n    exec: function (editor, arg) {\n      var indent = exports.$parseArg(arg);\n      exports.convertIndentation(editor.session, indent.ch, indent.length);\n    }\n  }, {\n    name: \"setIndentation\",\n    description: \"Set indentation\",\n    exec: function (editor, arg) {\n      var indent = exports.$parseArg(arg);\n      indent.length && editor.session.setTabSize(indent.length);\n      indent.ch && editor.session.setUseSoftTabs(indent.ch == \" \");\n    }\n  }];\n});\n\n(function () {\n  ace.require([\"ace/ext/whitespace\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/ext-whitespace.js"],"names":["ace","define","require","exports","module","lang","$detectIndentation","lines","fallback","stats","changes","tabIndents","prevSpaces","max","Math","min","length","i","line","test","Number","MAX_VALUE","spaces","match","diff","getScore","indent","score","changesTotal","reduce","a","b","first","spaceIndents","tabLength","undefined","ch","detectIndentation","session","getLines","setUseSoftTabs","setTabSize","trimTrailingSpace","options","doc","getDocument","getAllLines","trimEmpty","cursors","ci","keepCursorPosition","selection","rangeCount","rangeList","ranges","forEach","x","next","cursor","row","push","getCursor","cursorRow","l","index","search","column","removeInLine","convertIndentation","len","oldCh","getTabString","oldLen","getTabSize","tab","stringRepeat","cache","spaceCache","w","$getStringScreenWidth","tabCount","floor","reminder","toInsert","insertInLine","$parseStringArg","text","m","parseInt","$parseArg","arg","commands","name","description","exec","editor","args"],"mappings":"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","sourcesContent":["ace.define(\"ace/ext/whitespace\",[\"require\",\"exports\",\"module\",\"ace/lib/lang\"], function(require, exports, module) {\n\"use strict\";\n\nvar lang = require(\"../lib/lang\");\nexports.$detectIndentation = function(lines, fallback) {\n    var stats = [];\n    var changes = [];\n    var tabIndents = 0;\n    var prevSpaces = 0;\n    var max = Math.min(lines.length, 1000);\n    for (var i = 0; i < max; i++) {\n        var line = lines[i];\n        if (!/^\\s*[^*+\\-\\s]/.test(line))\n            continue;\n\n        if (line[0] == \"\\t\") {\n            tabIndents++;\n            prevSpaces = -Number.MAX_VALUE;\n        } else {\n            var spaces = line.match(/^ */)[0].length;\n            if (spaces && line[spaces] != \"\\t\") {\n                var diff = spaces - prevSpaces;\n                if (diff > 0 && !(prevSpaces%diff) && !(spaces%diff))\n                    changes[diff] = (changes[diff] || 0) + 1;\n    \n                stats[spaces] = (stats[spaces] || 0) + 1;\n            }\n            prevSpaces = spaces;\n        }\n        while (i < max && line[line.length - 1] == \"\\\\\")\n            line = lines[i++];\n    }\n    \n    function getScore(indent) {\n        var score = 0;\n        for (var i = indent; i < stats.length; i += indent)\n            score += stats[i] || 0;\n        return score;\n    }\n\n    var changesTotal = changes.reduce(function(a,b){return a+b;}, 0);\n\n    var first = {score: 0, length: 0};\n    var spaceIndents = 0;\n    for (var i = 1; i < 12; i++) {\n        var score = getScore(i);\n        if (i == 1) {\n            spaceIndents = score;\n            score = stats[1] ? 0.9 : 0.8;\n            if (!stats.length)\n                score = 0;\n        } else\n            score /= spaceIndents;\n\n        if (changes[i])\n            score += changes[i] / changesTotal;\n\n        if (score > first.score)\n            first = {score: score, length: i};\n    }\n\n    if (first.score && first.score > 1.4)\n        var tabLength = first.length;\n\n    if (tabIndents > spaceIndents + 1) {\n        if (tabLength == 1 || spaceIndents < tabIndents / 4 || first.score < 1.8)\n            tabLength = undefined;\n        return {ch: \"\\t\", length: tabLength};\n    }\n    if (spaceIndents > tabIndents + 1)\n        return {ch: \" \", length: tabLength};\n};\n\nexports.detectIndentation = function(session) {\n    var lines = session.getLines(0, 1000);\n    var indent = exports.$detectIndentation(lines) || {};\n\n    if (indent.ch)\n        session.setUseSoftTabs(indent.ch == \" \");\n\n    if (indent.length)\n        session.setTabSize(indent.length);\n    return indent;\n};\nexports.trimTrailingSpace = function(session, options) {\n    var doc = session.getDocument();\n    var lines = doc.getAllLines();\n    \n    var min = options && options.trimEmpty ? -1 : 0;\n    var cursors = [], ci = -1;\n    if (options && options.keepCursorPosition) {\n        if (session.selection.rangeCount) {\n            session.selection.rangeList.ranges.forEach(function(x, i, ranges) {\n               var next = ranges[i + 1];\n               if (next && next.cursor.row == x.cursor.row)\n                  return;\n              cursors.push(x.cursor);\n            });\n        } else {\n            cursors.push(session.selection.getCursor());\n        }\n        ci = 0;\n    }\n    var cursorRow = cursors[ci] && cursors[ci].row;\n\n    for (var i = 0, l=lines.length; i < l; i++) {\n        var line = lines[i];\n        var index = line.search(/\\s+$/);\n\n        if (i == cursorRow) {\n            if (index < cursors[ci].column && index > min)\n               index = cursors[ci].column;\n            ci++;\n            cursorRow = cursors[ci] ? cursors[ci].row : -1;\n        }\n\n        if (index > min)\n            doc.removeInLine(i, index, line.length);\n    }\n};\n\nexports.convertIndentation = function(session, ch, len) {\n    var oldCh = session.getTabString()[0];\n    var oldLen = session.getTabSize();\n    if (!len) len = oldLen;\n    if (!ch) ch = oldCh;\n\n    var tab = ch == \"\\t\" ? ch: lang.stringRepeat(ch, len);\n\n    var doc = session.doc;\n    var lines = doc.getAllLines();\n\n    var cache = {};\n    var spaceCache = {};\n    for (var i = 0, l=lines.length; i < l; i++) {\n        var line = lines[i];\n        var match = line.match(/^\\s*/)[0];\n        if (match) {\n            var w = session.$getStringScreenWidth(match)[0];\n            var tabCount = Math.floor(w/oldLen);\n            var reminder = w%oldLen;\n            var toInsert = cache[tabCount] || (cache[tabCount] = lang.stringRepeat(tab, tabCount));\n            toInsert += spaceCache[reminder] || (spaceCache[reminder] = lang.stringRepeat(\" \", reminder));\n\n            if (toInsert != match) {\n                doc.removeInLine(i, 0, match.length);\n                doc.insertInLine({row: i, column: 0}, toInsert);\n            }\n        }\n    }\n    session.setTabSize(len);\n    session.setUseSoftTabs(ch == \" \");\n};\n\nexports.$parseStringArg = function(text) {\n    var indent = {};\n    if (/t/.test(text))\n        indent.ch = \"\\t\";\n    else if (/s/.test(text))\n        indent.ch = \" \";\n    var m = text.match(/\\d+/);\n    if (m)\n        indent.length = parseInt(m[0], 10);\n    return indent;\n};\n\nexports.$parseArg = function(arg) {\n    if (!arg)\n        return {};\n    if (typeof arg == \"string\")\n        return exports.$parseStringArg(arg);\n    if (typeof arg.text == \"string\")\n        return exports.$parseStringArg(arg.text);\n    return arg;\n};\n\nexports.commands = [{\n    name: \"detectIndentation\",\n    description: \"Detect indentation from content\",\n    exec: function(editor) {\n        exports.detectIndentation(editor.session);\n    }\n}, {\n    name: \"trimTrailingSpace\",\n    description: \"Trim trailing whitespace\",\n    exec: function(editor, args) {\n        exports.trimTrailingSpace(editor.session, args);\n    }\n}, {\n    name: \"convertIndentation\",\n    description: \"Convert indentation to ...\",\n    exec: function(editor, arg) {\n        var indent = exports.$parseArg(arg);\n        exports.convertIndentation(editor.session, indent.ch, indent.length);\n    }\n}, {\n    name: \"setIndentation\",\n    description: \"Set indentation\",\n    exec: function(editor, arg) {\n        var indent = exports.$parseArg(arg);\n        indent.length && editor.session.setTabSize(indent.length);\n        indent.ch && editor.session.setUseSoftTabs(indent.ch == \" \");\n    }\n}];\n\n});                (function() {\n                    ace.require([\"ace/ext/whitespace\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}