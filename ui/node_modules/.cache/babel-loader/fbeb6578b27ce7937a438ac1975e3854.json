{"ast":null,"code":"import { createToken as e, Lexer as n, CstParser as t } from \"chevrotain\";\n\nfunction r(e, n) {\n  e.prototype = Object.create(n.prototype), e.prototype.constructor = e, e.__proto__ = n;\n}\n\nvar i = new RegExp(\"(\\\"[a-zA-Z0-9%\\\\s-&(){}\\\\[\\\\]$\\\\*!\\\\\\\\@/,;:=ë#+-<>?^']*\\\")|('[a-zA-Z0-9%\\\\s-&(){}\\\\[\\\\]$\\\\*!\\\\\\\\@/,;:=ë#+-<>?^\\\"]*')\"),\n    a = e({\n  name: \"Identifier\",\n  pattern: /[a-zA-Z]+[\\w.]*/\n}),\n    o = e({\n  name: \"WhiteSpace\",\n  pattern: /\\s+/,\n  group: n.SKIPPED\n}),\n    u = e({\n  name: \"Select\",\n  pattern: /SELECT/i,\n  longer_alt: a\n}),\n    s = e({\n  name: \"From\",\n  pattern: /FROM/i,\n  longer_alt: a\n}),\n    l = e({\n  name: \"Where\",\n  pattern: /WHERE/i,\n  longer_alt: a\n}),\n    c = e({\n  name: \"Comma\",\n  pattern: /,/\n}),\n    E = e({\n  name: \"Like\",\n  pattern: /like/i,\n  longer_alt: a\n}),\n    p = e({\n  name: \"Limit\",\n  pattern: /limit/i,\n  longer_alt: a\n}),\n    f = e({\n  name: \"Null\",\n  pattern: /NULL/i,\n  longer_alt: a\n}),\n    m = e({\n  name: \"In\",\n  pattern: /in/i,\n  longer_alt: a\n}),\n    L = e({\n  name: \"IsNot\",\n  pattern: /is\\s+not/i,\n  longer_alt: a\n}),\n    O = e({\n  name: \"Is\",\n  pattern: /is/i,\n  longer_alt: a\n}),\n    S = e({\n  name: \"NotLike\",\n  pattern: /NOT\\s+LIKE/i\n}),\n    U = e({\n  name: \"OrderBy\",\n  pattern: /ORDER\\s+BY+/i\n}),\n    C = e({\n  name: \"OrderByDirection\",\n  pattern: /(ASC|DESC)/i,\n  longer_alt: a\n}),\n    h = e({\n  name: \"As\",\n  pattern: /AS/i,\n  longer_alt: a\n}),\n    v = e({\n  name: \"OrAnd\",\n  pattern: /(AND|OR)/i,\n  longer_alt: a\n}),\n    A = e({\n  name: \"Star\",\n  pattern: /\\*/\n}),\n    N = e({\n  name: \"Integer\",\n  pattern: /0|[1-9]\\d*/\n}),\n    g = e({\n  name: \"StringToken\",\n  pattern: i\n}),\n    T = e({\n  name: \"GreaterOrEqualThan\",\n  pattern: />=/\n}),\n    M = e({\n  name: \"GreaterThan\",\n  pattern: />/\n}),\n    R = e({\n  name: \"LessOrEqualThan\",\n  pattern: /<=/\n}),\n    B = e({\n  name: \"LessThan\",\n  pattern: /</\n}),\n    y = e({\n  name: \"Equal\",\n  pattern: /=/\n}),\n    d = e({\n  name: \"NotEqual\",\n  pattern: /(!=|<>)/\n}),\n    I = e({\n  name: \"OpenParenthesis\",\n  pattern: /\\(/\n}),\n    _ = e({\n  name: \"CloseParenthesis\",\n  pattern: /\\)/\n}),\n    x = {\n  WhiteSpace: o,\n  Select: u,\n  From: s,\n  Where: l,\n  Comma: c,\n  Like: E,\n  Limit: p,\n  Null: f,\n  In: m,\n  IsNot: L,\n  Is: O,\n  NotLike: S,\n  OrderBy: U,\n  OrderByDirection: C,\n  As: h,\n  OrAnd: v,\n  Identifier: a,\n  Star: A,\n  Integer: N,\n  StringToken: g,\n  Equal: y,\n  NotEqual: d,\n  GreaterOrEqualThan: T,\n  GreaterThan: M,\n  LessOrEqualThan: R,\n  LessThan: B,\n  OpenParenthesis: I,\n  CloseParenthesis: _\n},\n    P = new n(Object.values(x)),\n    k = function (e) {\n  function n(n) {\n    var t;\n    return (t = e.call(this, x, n) || this).cols = t.RULE(\"cols\", function () {\n      t.OR([{\n        ALT: function () {\n          return t.CONSUME(A, {\n            LABEL: \"value\"\n          });\n        }\n      }, {\n        ALT: function () {\n          t.OR1([{\n            ALT: function () {\n              return t.CONSUME(g, {\n                LABEL: \"value\"\n              });\n            }\n          }, {\n            ALT: function () {\n              return t.CONSUME(a, {\n                LABEL: \"value\"\n              });\n            }\n          }]), t.OPTION(function () {\n            t.CONSUME(h), t.OR2([{\n              ALT: function () {\n                return t.CONSUME1(g, {\n                  LABEL: \"name\"\n                });\n              }\n            }, {\n              ALT: function () {\n                return t.CONSUME1(a, {\n                  LABEL: \"name\"\n                });\n              }\n            }]);\n          });\n        }\n      }]);\n    }), t.projection = t.RULE(\"projection\", function () {\n      t.OR([{\n        ALT: function () {\n          return t.AT_LEAST_ONE_SEP({\n            SEP: c,\n            DEF: function () {\n              t.SUBRULE(t.cols);\n            }\n          });\n        }\n      }]);\n    }), t.selectStatement = t.RULE(\"selectStatement\", function () {\n      t.SUBRULE(t.selectClause), t.SUBRULE(t.fromClause), t.OPTION(function () {\n        t.SUBRULE(t.whereClause);\n      }), t.OPTION2(function () {\n        t.SUBRULE(t.orderByClause);\n      }), t.OPTION3(function () {\n        t.SUBRULE(t.limitClause);\n      });\n    }), t.selectClause = t.RULE(\"selectClause\", function () {\n      t.CONSUME(u), t.SUBRULE(t.projection);\n    }), t.fromClause = t.RULE(\"fromClause\", function () {\n      t.CONSUME(s), t.OR([{\n        ALT: function () {\n          return t.CONSUME(a, {\n            LABEL: \"table\"\n          });\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(g, {\n            LABEL: \"table\"\n          });\n        }\n      }]), t.OPTION(function () {\n        return t.CONSUME2(a, {\n          LABEL: \"alias\"\n        });\n      });\n    }), t.whereClause = t.RULE(\"whereClause\", function () {\n      t.CONSUME(l), t.SUBRULE(t.expression);\n    }), t.expression = t.RULE(\"expression\", function () {\n      t.MANY_SEP({\n        SEP: v,\n        DEF: function () {\n          return t.SUBRULE(t.subExpression), v.name;\n        }\n      });\n    }), t.subExpression = t.RULE(\"subExpression\", function () {\n      t.SUBRULE(t.atomicExpression, {\n        LABEL: \"left\"\n      }), t.SUBRULE(t.relationalOperator), t.SUBRULE2(t.atomicExpression, {\n        LABEL: \"right\"\n      });\n    }), t.atomicExpression = t.RULE(\"atomicExpression\", function () {\n      t.OR([{\n        ALT: function () {\n          return t.CONSUME(N);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(f);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(a);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(g);\n        }\n      }, {\n        ALT: function () {\n          t.CONSUME(I), t.MANY_SEP({\n            SEP: c,\n            DEF: function () {\n              t.OR1([{\n                ALT: function () {\n                  return t.CONSUME1(N, {\n                    LABEL: \"in\"\n                  });\n                }\n              }, {\n                ALT: function () {\n                  return t.CONSUME1(g, {\n                    LABEL: \"in\"\n                  });\n                }\n              }]);\n            }\n          }), t.CONSUME(_);\n        }\n      }]);\n    }), t.relationalOperator = t.RULE(\"relationalOperator\", function () {\n      t.OR([{\n        ALT: function () {\n          return t.CONSUME(T);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(M);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(R);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(B);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(y);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(d);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(E);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(S);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(m);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(L);\n        }\n      }, {\n        ALT: function () {\n          return t.CONSUME(O);\n        }\n      }]);\n    }), t.orderByClause = t.RULE(\"orderByClause\", function () {\n      t.CONSUME(U), t.CONSUME(a), t.OPTION({\n        DEF: function () {\n          return t.CONSUME(C);\n        }\n      });\n    }), t.limitClause = t.RULE(\"limitClause\", function () {\n      t.CONSUME(p), t.CONSUME(N);\n    }), t.performSelfAnalysis(), t;\n  }\n\n  return r(n, e), n;\n}(t),\n    b = (new k(), new k()),\n    w = new (function (e) {\n  function n() {\n    var n;\n    return (n = e.call(this) || this).validateVisitor(), n;\n  }\n\n  r(n, e);\n  var t = n.prototype;\n  return t.selectStatement = function (e) {\n    return {\n      fields: this.visit(e.selectClause),\n      source: this.visit(e.fromClause),\n      where: this.visit(e.whereClause),\n      order: this.visit(e.orderByClause),\n      limit: this.visit(e.limitClause)\n    };\n  }, t.selectClause = function (e) {\n    return this.visit(e.projection);\n  }, t.cols = function (e) {\n    var n = e.value[0].image;\n    e.value[0].tokenType === x.StringToken && (n = j(n));\n    var t = e.name && e.name[0] ? e.name[0].image : n;\n    return e.name && e.name[0].tokenType === x.StringToken && (t = j(t)), {\n      name: t,\n      value: n\n    };\n  }, t.projection = function (e) {\n    var n = this,\n        t = e.cols.map(function (e) {\n      return n.visit(e);\n    }),\n        r = [];\n    return t.forEach(function (e) {\n      var n = e.value,\n          t = D(e.name),\n          i = t.pathArray,\n          a = t.propertyName,\n          o = D(n);\n      r.push({\n        name: {\n          value: a,\n          values: i\n        },\n        field: {\n          value: o.propertyName,\n          values: o.pathArray\n        }\n      });\n    }), r;\n  }, t.fromClause = function (e) {\n    var n,\n        t = e.table[0].image;\n    e.table[0].tokenType === x.StringToken && (t = j(t));\n    var r = (null == (n = e.alias) ? void 0 : n.length) ? e.alias[0].image : t;\n    return {\n      name: {\n        value: t,\n        values: D(t).pathArray\n      },\n      alias: {\n        value: r,\n        values: D(r).pathArray\n      }\n    };\n  }, t.whereClause = function (e) {\n    return {\n      conditions: this.visit(e.expression)\n    };\n  }, t.limitClause = function (e) {\n    return {\n      value: {\n        value: parseInt(e.Integer[0].image)\n      }\n    };\n  }, t.orderByClause = function (e) {\n    var n = D(e.Identifier[0].image);\n    return {\n      orderings: [{\n        value: {\n          value: n.propertyName,\n          values: n.pathArray\n        },\n        direction: e.OrderByDirection && e.OrderByDirection[0].image\n      }]\n    };\n  }, t.expression = function (e, n) {\n    var t;\n    if (void 0 === n && (n = 0), (null == (t = e.subExpression) ? void 0 : t.length) - n == 1) return this.visit(e.subExpression[n]);\n    var r = this.visit(e.subExpression[n]),\n        i = this.OrAnd(e.OrAnd[n]);\n    return {\n      left: r,\n      right: this.expression(e, ++n),\n      operation: i\n    };\n  }, t.subExpression = function (e) {\n    var n = this.visit(e.left[0]),\n        t = this.visit(e.relationalOperator),\n        r = this.visit(e.right[0]);\n    return {\n      left: {\n        value: n,\n        values: D(n).pathArray\n      },\n      operation: t,\n      right: {\n        value: r,\n        values: D(r).pathArray\n      }\n    };\n  }, t.atomicExpression = function (e) {\n    for (var n = 0, t = Object.entries(e); n < t.length; n++) {\n      var r = t[n],\n          i = r[0],\n          a = r[1];\n      if (\"in\" === i) return a.map(function (e) {\n        return e.tokenType === N ? parseInt(e.image) : j(e.image);\n      }).map(function (e) {\n        return {\n          value: e\n        };\n      });\n      if (\"Integer\" === i) return parseInt(a[0].image);\n      if (\"Null\" === i) return null;\n      if (\"Identifier\" === i) return a[0].image;\n      if (\"StringToken\" === i) return j(a[0].image);\n    }\n\n    return null;\n  }, t.relationalOperator = function (e) {\n    return Object.values(e)[0][0].image;\n  }, t.OrAnd = function (e) {\n    return e.image;\n  }, n;\n}(b.getBaseCstVisitorConstructor()))(),\n    D = function (e) {\n  var n = String(e).split(\".\");\n  return {\n    propertyName: n[n.length - 1],\n    pathArray: n\n  };\n},\n    j = function (e) {\n  return e.substring(1, e.length - 1);\n},\n    q = {\n  parse: function (e) {\n    var n,\n        t = function (e) {\n      var n = P.tokenize(e);\n      if (n.errors.length > 0) throw Error(JSON.stringify(n.errors));\n      return n;\n    }(e);\n\n    if (b.input = t.tokens, n = b.selectStatement(), b.errors.length > 0) throw Error(JSON.stringify(b.errors));\n    return w.visit(n);\n  }\n};\n\nexport default q;","map":{"version":3,"sources":["../sql/lexer.ts","../sql/parser.ts","../sql/actions-visitor.ts","../index.ts"],"names":["stringTokenRegex","RegExp","Identifier","createToken","name","pattern","WhiteSpace","group","Lexer","SKIPPED","Select","longer_alt","From","Where","Comma","Like","Limit","Null","In","IsNot","Is","NotLike","OrderBy","OrderByDirection","As","OrAnd","Star","Integer","StringToken","GreaterOrEqualThan","GreaterThan","LessOrEqualThan","LessThan","Equal","NotEqual","OpenParenthesis","CloseParenthesis","tokenVocabulary","SelectLexer","Object","values","inputText","lexingResult","tokenize","errors","length","Error","JSON","stringify","SelectParser","CstParser","config","_this","cols","RULE","OR","ALT","CONSUME","LABEL","OR1","OPTION","OR2","CONSUME1","projection","AT_LEAST_ONE_SEP","SEP","DEF","SUBRULE","selectStatement","selectClause","fromClause","whereClause","OPTION2","orderByClause","OPTION3","limitClause","CONSUME2","expression","MANY_SEP","subExpression","atomicExpression","relationalOperator","SUBRULE2","performSelfAnalysis","parserInstance","getBaseCstVisitorConstructor","validateVisitor","ctx","this","visit","fields","source","where","order","limit","value","image","tokenType","convertStringTokenToJsString","map","_this2","x","forEach","pathArray","namePathArray","propertyName","namePropertyName","splitPropertyPath","field","push","tableName","table","alias","conditions","parseInt","direction","orderings","i","left","operation","right","context","entries","key","token","toAstVisitorInstance","lexResult","lex","input","tokens","cst","stringPath","String","split","str","substring","parse"],"mappings":";;;;AAEA;;AAAA,IACMA,CAAAA,GAAmB,IAAIC,MAAJ,CAAIA,sHAAJ,CADzB;AAAA,IAKaC,CAAAA,GAAaC,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,YAAR;AAAsBC,EAAAA,OAAAA,EAAS;AAA/B,CAAZF,CAL1B;AAAA,IAMaG,CAAAA,GAAaH,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,YAAR;AAAsBC,EAAAA,OAAAA,EAAS,KAA/B;AAAsCE,EAAAA,KAAAA,EAAOC,CAAAA,CAAMC;AAAnD,CAAZN,CAN1B;AAAA,IAOaO,CAAAA,GAASP,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,QAAR;AAAkBC,EAAAA,OAAAA,EAAS,SAA3B;AAAsCM,EAAAA,UAAAA,EAAYT;AAAlD,CAAZC,CAPtB;AAAA,IAQaS,CAAAA,GAAOT,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,MAAR;AAAgBC,EAAAA,OAAAA,EAAS,OAAzB;AAAkCM,EAAAA,UAAAA,EAAYT;AAA9C,CAAZC,CARpB;AAAA,IASaU,CAAAA,GAAQV,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,OAAR;AAAiBC,EAAAA,OAAAA,EAAS,QAA1B;AAAoCM,EAAAA,UAAAA,EAAYT;AAAhD,CAAZC,CATrB;AAAA,IAUaW,CAAAA,GAAQX,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,OAAR;AAAiBC,EAAAA,OAAAA,EAAS;AAA1B,CAAZF,CAVrB;AAAA,IAWaY,CAAAA,GAAOZ,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,MAAR;AAAgBC,EAAAA,OAAAA,EAAS,OAAzB;AAAkCM,EAAAA,UAAAA,EAAYT;AAA9C,CAAZC,CAXpB;AAAA,IAYaa,CAAAA,GAAQb,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,OAAR;AAAiBC,EAAAA,OAAAA,EAAS,QAA1B;AAAoCM,EAAAA,UAAAA,EAAYT;AAAhD,CAAZC,CAZrB;AAAA,IAaac,CAAAA,GAAOd,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,MAAR;AAAgBC,EAAAA,OAAAA,EAAS,OAAzB;AAAkCM,EAAAA,UAAAA,EAAYT;AAA9C,CAAZC,CAbpB;AAAA,IAcae,CAAAA,GAAKf,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,IAAR;AAAcC,EAAAA,OAAAA,EAAS,KAAvB;AAA8BM,EAAAA,UAAAA,EAAYT;AAA1C,CAAZC,CAdlB;AAAA,IAeagB,CAAAA,GAAQhB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,OAAR;AAAiBC,EAAAA,OAAAA,EAAS,WAA1B;AAAuCM,EAAAA,UAAAA,EAAYT;AAAnD,CAAZC,CAfrB;AAAA,IAgBaiB,CAAAA,GAAKjB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,IAAR;AAAcC,EAAAA,OAAAA,EAAS,KAAvB;AAA8BM,EAAAA,UAAAA,EAAYT;AAA1C,CAAZC,CAhBlB;AAAA,IAiBakB,CAAAA,GAAUlB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,SAAR;AAAmBC,EAAAA,OAAAA,EAAS;AAA5B,CAAZF,CAjBvB;AAAA,IAkBamB,CAAAA,GAAUnB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,SAAR;AAAmBC,EAAAA,OAAAA,EAAS;AAA5B,CAAZF,CAlBvB;AAAA,IAmBaoB,CAAAA,GAAmBpB,CAAAA,CAAY;AACxCC,EAAAA,IAAAA,EAAM,kBADkC;AAExCC,EAAAA,OAAAA,EAAS,aAF+B;AAGxCM,EAAAA,UAAAA,EAAYT;AAH4B,CAAZC,CAnBhC;AAAA,IAwBaqB,CAAAA,GAAKrB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,IAAR;AAAcC,EAAAA,OAAAA,EAAS,KAAvB;AAA8BM,EAAAA,UAAAA,EAAYT;AAA1C,CAAZC,CAxBlB;AAAA,IAyBasB,CAAAA,GAAQtB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,OAAR;AAAiBC,EAAAA,OAAAA,EAAS,WAA1B;AAAuCM,EAAAA,UAAAA,EAAYT;AAAnD,CAAZC,CAzBrB;AAAA,IA0BauB,CAAAA,GAAOvB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,MAAR;AAAgBC,EAAAA,OAAAA,EAAS;AAAzB,CAAZF,CA1BpB;AAAA,IA2BawB,CAAAA,GAAUxB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,SAAR;AAAmBC,EAAAA,OAAAA,EAAS;AAA5B,CAAZF,CA3BvB;AAAA,IA4BayB,CAAAA,GAAczB,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,aAAR;AAAuBC,EAAAA,OAAAA,EAASL;AAAhC,CAAZG,CA5B3B;AAAA,IA6Ba0B,CAAAA,GAAqB1B,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,oBAAR;AAA8BC,EAAAA,OAAAA,EAAS;AAAvC,CAAZF,CA7BlC;AAAA,IA8Ba2B,CAAAA,GAAc3B,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,aAAR;AAAuBC,EAAAA,OAAAA,EAAS;AAAhC,CAAZF,CA9B3B;AAAA,IA+Ba4B,CAAAA,GAAkB5B,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,iBAAR;AAA2BC,EAAAA,OAAAA,EAAS;AAApC,CAAZF,CA/B/B;AAAA,IAgCa6B,CAAAA,GAAW7B,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,UAAR;AAAoBC,EAAAA,OAAAA,EAAS;AAA7B,CAAZF,CAhCxB;AAAA,IAiCa8B,CAAAA,GAAQ9B,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,OAAR;AAAiBC,EAAAA,OAAAA,EAAS;AAA1B,CAAZF,CAjCrB;AAAA,IAkCa+B,CAAAA,GAAW/B,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,UAAR;AAAoBC,EAAAA,OAAAA,EAAS;AAA7B,CAAZF,CAlCxB;AAAA,IAmCagC,CAAAA,GAAkBhC,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,iBAAR;AAA2BC,EAAAA,OAAAA,EAAS;AAApC,CAAZF,CAnC/B;AAAA,IAoCaiC,CAAAA,GAAmBjC,CAAAA,CAAY;AAAEC,EAAAA,IAAAA,EAAM,kBAAR;AAA4BC,EAAAA,OAAAA,EAAS;AAArC,CAAZF,CApChC;AAAA,IAsCakC,CAAAA,GAAkB;AAC3B/B,EAAAA,UAAAA,EAAAA,CAD2B;AAE3BI,EAAAA,MAAAA,EAAAA,CAF2B;AAG3BE,EAAAA,IAAAA,EAAAA,CAH2B;AAI3BC,EAAAA,KAAAA,EAAAA,CAJ2B;AAK3BC,EAAAA,KAAAA,EAAAA,CAL2B;AAM3BC,EAAAA,IAAAA,EAAAA,CAN2B;AAO3BC,EAAAA,KAAAA,EAAAA,CAP2B;AAQ3BC,EAAAA,IAAAA,EAAAA,CAR2B;AAS3BC,EAAAA,EAAAA,EAAAA,CAT2B;AAU3BC,EAAAA,KAAAA,EAAAA,CAV2B;AAW3BC,EAAAA,EAAAA,EAAAA,CAX2B;AAY3BC,EAAAA,OAAAA,EAAAA,CAZ2B;AAa3BC,EAAAA,OAAAA,EAAAA,CAb2B;AAc3BC,EAAAA,gBAAAA,EAAAA,CAd2B;AAe3BC,EAAAA,EAAAA,EAAAA,CAf2B;AAgB3BC,EAAAA,KAAAA,EAAAA,CAhB2B;AAkB3BvB,EAAAA,UAAAA,EAAAA,CAlB2B;AAoB3BwB,EAAAA,IAAAA,EAAAA,CApB2B;AAqB3BC,EAAAA,OAAAA,EAAAA,CArB2B;AAsB3BC,EAAAA,WAAAA,EAAAA,CAtB2B;AAwB3BK,EAAAA,KAAAA,EAAAA,CAxB2B;AAyB3BC,EAAAA,QAAAA,EAAAA,CAzB2B;AA0B3BL,EAAAA,kBAAAA,EAAAA,CA1B2B;AA2B3BC,EAAAA,WAAAA,EAAAA,CA3B2B;AA4B3BC,EAAAA,eAAAA,EAAAA,CA5B2B;AA6B3BC,EAAAA,QAAAA,EAAAA,CA7B2B;AA+B3BG,EAAAA,eAAAA,EAAAA,CA/B2B;AAgC3BC,EAAAA,gBAAAA,EAAAA;AAhC2B,CAtC/B;AAAA,IA2EME,CAAAA,GAAc,IAAI9B,CAAJ,CAAU+B,MAAAA,CAAOC,MAAPD,CAAcF,CAAdE,CAAV,CA3EpB;AAAA,ICyCMU,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA;AAaF,WAAA,CAAA,CAAYE,CAAZ,EAAYA;AAAAA,QAAAA,CAAAA;AAAAA,WAAAA,CACRC,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAMf,CAANe,EAAuBD,CAAvBC,KAAuBD,IADfA,EAGHE,IAHGF,GAGIC,CAAAA,CAAKE,IAALF,CAAU,MAAVA,EAAkB,YAAA;AAC1BA,MAAAA,CAAAA,CAAKG,EAALH,CAAQ,CACJ;AAAEI,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB/B,CAAnB,EAAyB;AAAEgC,YAAAA,KAAAA,EA3BvC;AA2BqC,WAAzB,CAAA;AA3BZ;AA2BK,OADI,EAEJ;AACIF,QAAAA,GAAAA,EAAK,YAAA;AACDJ,UAAAA,CAAAA,CAAKO,GAALP,CAAS,CACL;AACII,YAAAA,GAAAA,EAAK,YAAA;AAAA,qBAAA,CAAA,CAAWC,OAAX,CAAmB7B,CAAnB,EAAgC;AAAE8B,gBAAAA,KAAAA,EAhC5D;AAgC0D,eAAhC,CAAA;AAhC1B;AA+BiB,WADK,EAIL;AACIF,YAAAA,GAAAA,EAAK,YAAA;AAAA,qBAAA,CAAA,CAAWC,OAAX,CAAmBvD,CAAnB,EAA+B;AAAEwD,gBAAAA,KAAAA,EAnC3D;AAmCyD,eAA/B,CAAA;AAnC1B;AAkCiB,WAJK,CAATN,GAQAA,CAAAA,CAAKQ,MAALR,CAAY,YAAA;AACRA,YAAAA,CAAAA,CAAKK,OAALL,CAAa5B,CAAb4B,GACAA,CAAAA,CAAKS,GAALT,CAAS,CACL;AACII,cAAAA,GAAAA,EAAK,YAAA;AAAA,uBAAA,CAAA,CAAWM,QAAX,CAAoBlC,CAApB,EAAiC;AAAE8B,kBAAAA,KAAAA,EAxClE;AAwCgE,iBAAjC,CAAA;AAxC/B;AAuCsB,aADK,EAIL;AACIF,cAAAA,GAAAA,EAAK,YAAA;AAAA,uBAAA,CAAA,CAAWM,QAAX,CAAoB5D,CAApB,EAAgC;AAAEwD,kBAAAA,KAAAA,EA3CjE;AA2C+D,iBAAhC,CAAA;AA3C/B;AA0CsB,aAJK,CAATN,CADAA;AArClB,WAoCcA,CARAA;AA5Bd;AA0BM,OAFI,CAARA;AAxBF,KAuBUA,CAHJD,EAgCRC,CAAAA,CAAKW,UAALX,GAAkBA,CAAAA,CAAKE,IAALF,CAAU,YAAVA,EAAwB,YAAA;AACtCA,MAAAA,CAAAA,CAAKG,EAALH,CAAQ,CACJ;AACII,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CACIQ,gBADJ,CACqB;AAClBC,YAAAA,GAAAA,EAAKnD,CADa;AAElBoD,YAAAA,GAAAA,EAAK,YAAA;AACDd,cAAAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKC,IAAlBD;AAAkBC;AAHJ,WADrB,CAAA;AAIyBA;AALlC,OADI,CAARD;AAMsCC,KAPxBD,CAhCVD,EA8CRC,CAAAA,CAAKgB,eAALhB,GAAuBA,CAAAA,CAAKE,IAALF,CAAU,iBAAVA,EAA6B,YAAA;AAChDA,MAAAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKiB,YAAlBjB,GACAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKkB,UAAlBlB,CADAA,EAEAA,CAAAA,CAAKQ,MAALR,CAAY,YAAA;AACRA,QAAAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKmB,WAAlBnB;AAAkBmB,OADtBnB,CAFAA,EAKAA,CAAAA,CAAKoB,OAALpB,CAAa,YAAA;AACTA,QAAAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKqB,aAAlBrB;AAAkBqB,OADtBrB,CALAA,EAQAA,CAAAA,CAAKsB,OAALtB,CAAa,YAAA;AACTA,QAAAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKuB,WAAlBvB;AAAkBuB,OADtBvB,CARAA;AASsBuB,KAVHvB,CA9CfD,EA4DRC,CAAAA,CAAKiB,YAALjB,GAAoBA,CAAAA,CAAKE,IAALF,CAAU,cAAVA,EAA0B,YAAA;AAC1CA,MAAAA,CAAAA,CAAKK,OAALL,CAAa1C,CAAb0C,GACAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKW,UAAlBX,CADAA;AACkBW,KAFFX,CA5DZD,EAiERC,CAAAA,CAAKkB,UAALlB,GAAkBA,CAAAA,CAAKE,IAALF,CAAU,YAAVA,EAAwB,YAAA;AACtCA,MAAAA,CAAAA,CAAKK,OAALL,CAAaxC,CAAbwC,GACAA,CAAAA,CAAKG,EAALH,CAAQ,CACJ;AACII,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBvD,CAAnB,EAA+B;AAAEwD,YAAAA,KAAAA,EA1F/C;AA0F6C,WAA/B,CAAA;AA1Fd;AAyFK,OADI,EAIJ;AACIF,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB7B,CAAnB,EAAgC;AAAE8B,YAAAA,KAAAA,EA7FhD;AA6F8C,WAAhC,CAAA;AA7Fd;AA4FK,OAJI,CAARN,CADAA,EASAA,CAAAA,CAAKQ,MAALR,CAAY,YAAA;AAAA,eAAA,CAAA,CAAWwB,QAAX,CAAoB1E,CAApB,EAAgC;AAAEwD,UAAAA,KAAAA,EA9F/C;AA8F6C,SAAhC,CAAA;AA9Fb,OA8FCN,CATAA;AArFD,KAoFeA,CAjEVD,EA8ERC,CAAAA,CAAKmB,WAALnB,GAAmBA,CAAAA,CAAKE,IAALF,CAAU,aAAVA,EAAyB,YAAA;AACxCA,MAAAA,CAAAA,CAAKK,OAALL,CAAavC,CAAbuC,GACAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAKyB,UAAlBzB,CADAA;AACkByB,KAFHzB,CA9EXD,EAmFRC,CAAAA,CAAKyB,UAALzB,GAAkBA,CAAAA,CAAKE,IAALF,CAAU,YAAVA,EAAwB,YAAA;AACtCA,MAAAA,CAAAA,CAAK0B,QAAL1B,CAAc;AACVa,QAAAA,GAAAA,EAAKxC,CADK;AAEVyC,QAAAA,GAAAA,EAAK,YAAA;AAGD,iBAFAd,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAK2B,aAAlB3B,GAEO3B,CAAAA,CAAMrB,IAAb;AAAaA;AALP,OAAdgD;AAKqBhD,KANPgD,CAnFVD,EA8FRC,CAAAA,CAAK2B,aAAL3B,GAAqBA,CAAAA,CAAKE,IAALF,CAAU,eAAVA,EAA2B,YAAA;AAC5CA,MAAAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAK4B,gBAAlB5B,EAAoC;AAAEM,QAAAA,KAAAA,EAjHxC;AAiHsC,OAApCN,GACAA,CAAAA,CAAKe,OAALf,CAAaA,CAAAA,CAAK6B,kBAAlB7B,CADAA,EAEAA,CAAAA,CAAK8B,QAAL9B,CAAcA,CAAAA,CAAK4B,gBAAnB5B,EAAqC;AAAEM,QAAAA,KAAAA,EAlHxC;AAkHsC,OAArCN,CAFAA;AAhHD,KA+GkBA,CA9FbD,EAoGRC,CAAAA,CAAK4B,gBAAL5B,GAAwBA,CAAAA,CAAKE,IAALF,CAAU,kBAAVA,EAA8B,YAAA;AAClDA,MAAAA,CAAAA,CAAKG,EAALH,CAAQ,CACJ;AAAEI,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB9B,CAAnB,CAAA;AAAmBA;AAA1B,OADI,EAEJ;AAAE6B,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBxC,CAAnB,CAAA;AAAmBA;AAA1B,OAFI,EAGJ;AAAEuC,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBvD,CAAnB,CAAA;AAAmBA;AAA1B,OAHI,EAIJ;AAAEsD,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB7B,CAAnB,CAAA;AAAmBA;AAA1B,OAJI,EAKJ;AACI4B,QAAAA,GAAAA,EAAK,YAAA;AACDJ,UAAAA,CAAAA,CAAKK,OAALL,CAAajB,CAAbiB,GACAA,CAAAA,CAAK0B,QAAL1B,CAAc;AACVa,YAAAA,GAAAA,EAAKnD,CADK;AAEVoD,YAAAA,GAAAA,EAAK,YAAA;AACDd,cAAAA,CAAAA,CAAKO,GAALP,CAAS,CACL;AACII,gBAAAA,GAAAA,EAAK,YAAA;AAAA,yBAAA,CAAA,CAAWM,QAAX,CAAoBnC,CAApB,EAA6B;AAAE+B,oBAAAA,KAAAA,EAlIpE;AAkIkE,mBAA7B,CAAA;AAlIrC;AAiI4B,eADK,EAIL;AACIF,gBAAAA,GAAAA,EAAK,YAAA;AAAA,yBAAA,CAAA,CAAWM,QAAX,CAAoBlC,CAApB,EAAiC;AAAE8B,oBAAAA,KAAAA,EArIxE;AAqIsE,mBAAjC,CAAA;AArIrC;AAoI4B,eAJK,CAATN;AAhIxB;AA6H8B,WAAdA,CADAA,EAcAA,CAAAA,CAAKK,OAALL,CAAahB,CAAbgB,CAdAA;AAcahB;AAhBrB,OALI,CAARgB;AAqByBhB,KAtBLgB,CApGhBD,EAgIRC,CAAAA,CAAK6B,kBAAL7B,GAA0BA,CAAAA,CAAKE,IAALF,CAAU,oBAAVA,EAAgC,YAAA;AACtDA,MAAAA,CAAAA,CAAKG,EAALH,CAAQ,CACJ;AAAEI,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB5B,CAAnB,CAAA;AAAmBA;AAA1B,OADI,EAEJ;AAAE2B,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB3B,CAAnB,CAAA;AAAmBA;AAA1B,OAFI,EAGJ;AAAE0B,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB1B,CAAnB,CAAA;AAAmBA;AAA1B,OAHI,EAIJ;AAAEyB,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBzB,CAAnB,CAAA;AAAmBA;AAA1B,OAJI,EAKJ;AAAEwB,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBxB,CAAnB,CAAA;AAAmBA;AAA1B,OALI,EAMJ;AAAEuB,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBvB,CAAnB,CAAA;AAAmBA;AAA1B,OANI,EAOJ;AAAEsB,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmB1C,CAAnB,CAAA;AAAmBA;AAA1B,OAPI,EAQJ;AAAEyC,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBpC,CAAnB,CAAA;AAAmBA;AAA1B,OARI,EASJ;AAAEmC,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBvC,CAAnB,CAAA;AAAmBA;AAA1B,OATI,EAUJ;AAAEsC,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBtC,CAAnB,CAAA;AAAmBA;AAA1B,OAVI,EAWJ;AAAEqC,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWC,OAAX,CAAmBrC,CAAnB,CAAA;AAAmBA;AAA1B,OAXI,CAARgC;AAW8BhC,KAZRgC,CAhIlBD,EAgJRC,CAAAA,CAAKqB,aAALrB,GAAqBA,CAAAA,CAAKE,IAALF,CAAU,eAAVA,EAA2B,YAAA;AAC5CA,MAAAA,CAAAA,CAAKK,OAALL,CAAa9B,CAAb8B,GACAA,CAAAA,CAAKK,OAALL,CAAalD,CAAbkD,CADAA,EAEAA,CAAAA,CAAKQ,MAALR,CAAY;AACRc,QAAAA,GAAAA,EAAK,YAAA;AAAA,iBAAA,CAAA,CAAWT,OAAX,CAAmBlC,CAAnB,CAAA;AAAmBA;AADhB,OAAZ6B,CAFAA;AAG4B7B,KAJX6B,CAhJbD,EAwJRC,CAAAA,CAAKuB,WAALvB,GAAmBA,CAAAA,CAAKE,IAALF,CAAU,aAAVA,EAAyB,YAAA;AACxCA,MAAAA,CAAAA,CAAKK,OAALL,CAAapC,CAAboC,GACAA,CAAAA,CAAKK,OAALL,CAAazB,CAAbyB,CADAA;AACazB,KAFEyB,CAxJXD,EA6JRC,CAAAA,CAAK+B,mBAAL/B,EA7JQD,EA6JHgC,CA7JGhC;AA6JHgC;;AAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,CA1KPlC,CAAqBC,CAArBD,CDzCN;AAAA,IEGMmC,CAAAA,IDoNiB,IAAInC,CAAJ,ICpNA,IAAIA,CAAJ,EAAjBmC,CFHN;AAAA,IE+MMyC,CAAAA,GAAuB,KAAA,UAAA,CAAA,EAAA;AAxMzB,WAAA,CAAA,GAAA;AAAA,QAAA,CAAA;AAAA,WAAA,CACIzE,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,KAAAA,IADJ,EAESkC,eAFT,IAESA,CAFT;AAESA;;AAAAA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,MAAAA,CAAAA,GAAAA,CAAAA,CAAAA,SAAAA;AAAAA,SAAAA,CAAAA,CAGFlB,eAHEkB,GAGFlB,UAAgBmB,CAAhBnB,EAAgBmB;AAYnB,WAAO;AACHG,MAAAA,MAAAA,EANWF,KAAKC,KAALD,CAAWD,CAAAA,CAAIlB,YAAfmB,CAKR;AAEHG,MAAAA,MAAAA,EANSH,KAAKC,KAALD,CAAWD,CAAAA,CAAIjB,UAAfkB,CAIN;AAGHI,MAAAA,KAAAA,EANUJ,KAAKC,KAALD,CAAWD,CAAAA,CAAIhB,WAAfiB,CAGP;AAIHK,MAAAA,KAAAA,EANUL,KAAKC,KAALD,CAAWD,CAAAA,CAAId,aAAfe,CAEP;AAKHM,MAAAA,KAAAA,EANUN,KAAKC,KAALD,CAAWD,CAAAA,CAAIZ,WAAfa;AACP,KAAP;AAD6Bb,GAdxBW,EAcwBX,CAAAA,CAU1BN,YAV0BM,GAU1BN,UAAakB,CAAblB,EAAakB;AAEhB,WADgBC,KAAKC,KAALD,CAAWD,CAAAA,CAAIxB,UAAfyB,CAChB;AAD+BzB,GAzB1BuB,EAyB0BvB,CAAAA,CAI5BV,IAJ4BU,GAI5BV,UAAKkC,CAALlC,EAAKkC;AACR,QAAIQ,CAAAA,GAAQR,CAAAA,CAAIQ,KAAJR,CAAU,CAAVA,EAAaS,KAAzB;AAEIT,IAAAA,CAAAA,CAAIQ,KAAJR,CAAU,CAAVA,EAAaU,SAAbV,KAA2BlD,CAAAA,CAAgBT,WAA3C2D,KACAQ,CAAAA,GAAQG,CAAAA,CAA6BH,CAA7BG,CADRX;AAIJ,QAAInF,CAAAA,GAAOmF,CAAAA,CAAInF,IAAJmF,IAAYA,CAAAA,CAAInF,IAAJmF,CAAS,CAATA,CAAZA,GAA0BA,CAAAA,CAAInF,IAAJmF,CAAS,CAATA,EAAYS,KAAtCT,GAA8CQ,CAAzD;AAKA,WAHIR,CAAAA,CAAInF,IAAJmF,IAAYA,CAAAA,CAAInF,IAAJmF,CAAS,CAATA,EAAYU,SAAZV,KAA0BlD,CAAAA,CAAgBT,WAAtD2D,KACAnF,CAAAA,GAAO8F,CAAAA,CAA6B9F,CAA7B8F,CADPX,GAGG;AACHnF,MAAAA,IAAAA,EAAAA,CADG;AAEH2F,MAAAA,KAAAA,EAAAA;AAFG,KAAP;AAEIA,GA3CCT,EA2CDS,CAAAA,CAIDhC,UAJCgC,GAIDhC,UAAWwB,CAAXxB,EAAWwB;AAAAA,QAAAA,CAAAA,GAAAA,IAAAA;AAAAA,QACRlC,CAAAA,GAA0CkC,CAAAA,CAAIlC,IAAJkC,CAASY,GAATZ,CAAa,UAAA,CAAA,EAAA;AAAA,aAAKa,CAAAA,CAAKX,KAALW,CAAWC,CAAXD,CAAL;AAAgBC,KAA7Bd,CADlCA;AAAAA,QAERG,CAAAA,GAAkB,EAFVH;AAkBd,WAfAlC,CAAAA,CAAKiD,OAALjD,CAAa,UAAA,CAAA,EAAA;AAAA,UAAS0C,CAAAA,GAAAA,CAAAA,CAAAA,KAAT;AAAA,UAASA,CAAAA,GACmDY,CAAAA,CAAAA,CAAAA,CADzDvG,IACyDuG,CAD5D;AAAA,UACUH,CAAAA,GAAAA,CAAAA,CAAXD,SADC;AAAA,UACuCG,CAAAA,GAAAA,CAAAA,CAAdD,YADzB;AAAA,UACyBA,CAAAA,GACqCE,CAAAA,CAAkBZ,CAAlBY,CAF9D;AAaTjB,MAAAA,CAAAA,CAAOmB,IAAPnB,CAVqB;AACjBtF,QAAAA,IAAAA,EAAM;AACF2F,UAAAA,KAAAA,EAAOW,CADL;AAEFlE,UAAAA,MAAAA,EAAQgE;AAFN,SADW;AAKjBI,QAAAA,KAAAA,EAAO;AACHb,UAAAA,KAAAA,EAAAA,CAAAA,CAP2BU,YAMxB;AAEHjE,UAAAA,MAAAA,EAAAA,CAAAA,CARA+D;AAMG;AALU,OAUrBb;AAXQa,KAFZlD,GAeOqC,CAAP;AAAOA,GAjEFJ,EAiEEI,CAAAA,CAGJpB,UAHIoB,GAGJpB,UAAWiB,CAAXjB,EAAWiB;AAAAA,QAAAA,CAAAA;AAAAA,QACVuB,CAAAA,GAAoBvB,CAAAA,CAAIwB,KAAJxB,CAAU,CAAVA,EAAaS,KADvBT;AAEVA,IAAAA,CAAAA,CAAIwB,KAAJxB,CAAU,CAAVA,EAAaU,SAAbV,KAA2BlD,CAAAA,CAAgBT,WAA3C2D,KACAuB,CAAAA,GAAYZ,CAAAA,CAA6BY,CAA7BZ,CADZX;AAGJ,QAAMyB,CAAAA,GAAAA,CAAAA,SAAAA,CAAAA,GAAQzB,CAAAA,CAAIyB,KAAZA,IAAYA,KAAAA,CAAZA,GAAYA,CAAAA,CAAOnE,MAAnBmE,IAA4BzB,CAAAA,CAAIyB,KAAJzB,CAAU,CAAVA,EAAaS,KAAzCgB,GAAiDF,CAAvD;AACA,WAAO;AACH1G,MAAAA,IAAAA,EAAM;AACF2F,QAAAA,KAAAA,EAAOe,CADL;AAEFtE,QAAAA,MAAAA,EAAQmE,CAAAA,CAAkBG,CAAlBH,CAAAA,CAA6BJ;AAFnC,OADH;AAKHS,MAAAA,KAAAA,EAAO;AACHjB,QAAAA,KAAAA,EAAOiB,CADJ;AAEHxE,QAAAA,MAAAA,EAAQmE,CAAAA,CAAkBK,CAAlBL,CAAAA,CAAyBJ;AAF9B;AALJ,KAAP;AAOyCA,GAjFpCjB,EAiFoCiB,CAAAA,CAKtChC,WALsCgC,GAKtChC,UAAYgB,CAAZhB,EAAYgB;AAGf,WAAO;AACH0B,MAAAA,UAAAA,EAHezB,KAAKC,KAALD,CAAWD,CAAAA,CAAIV,UAAfW;AAEZ,KAAP;AAFkCX,GAvF7BS,EAuF6BT,CAAAA,CAO/BF,WAP+BE,GAO/BF,UAAYY,CAAZZ,EAAYY;AAEf,WAAO;AACHQ,MAAAA,KAAAA,EAAO;AACHA,QAAAA,KAAAA,EAHMmB,QAAAA,CAAS3B,CAAAA,CAAI5D,OAAJ4D,CAAY,CAAZA,EAAeS,KAAxBkB;AAEH;AADJ,KAAP;AADsClB,GA/FjCV,EA+FiCU,CAAAA,CAOnCvB,aAPmCuB,GAOnCvB,UAAcc,CAAdd,EAAcc;AAAAA,QAAAA,CAAAA,GACmBoB,CAAAA,CAAkBpB,CAAAA,CAAIrF,UAAJqF,CAAe,CAAfA,EAAkBS,KAApCW,CADnBpB;AAYjB,WAAO;AACH6B,MAAAA,SAAAA,EAAW,CATS;AACpBrB,QAAAA,KAAAA,EAAO;AACHA,UAAAA,KAAAA,EAAAA,CAAAA,CALWU,YAIR;AAEHjE,UAAAA,MAAAA,EAAAA,CAAAA,CANA+D;AAIG,SADa;AAKpBY,QAAAA,SAAAA,EAPc5B,CAAAA,CAAIhE,gBAAJgE,IAAyBA,CAAAA,CAAIhE,gBAAJgE,CAAqB,CAArBA,EAAwBS;AAE3C,OAST;AADR,KAAP;AAVmEA,GAxG9DV,EAwG8DU,CAAAA,CAehEnB,UAfgEmB,GAehEnB,UACHU,CADGV,EAMHwC,CANGxC,EAMHwC;AAAAA,QAAAA,CAAAA;AAEA,QAAA,KAAA,CAAA,KAFAA,CAEA,KAFAA,CAAAA,GAAY,CAEZ,GAFY,CAAA,SAAA,CAAA,GAER9B,CAAAA,CAAIR,aAFI,IAEJA,KAAAA,CAFI,GAEJA,CAAAA,CAAelC,MAFX,IAEoBwE,CAFpB,IAE0B,CAAtC,EAEI,OADa7B,KAAKC,KAALD,CAAWD,CAAAA,CAAIR,aAAJQ,CAAkB8B,CAAlB9B,CAAXC,CACb;AAEJ,QAAM8B,CAAAA,GAAO9B,KAAKC,KAALD,CAAWD,CAAAA,CAAIR,aAAJQ,CAAkB8B,CAAlB9B,CAAXC,CAAb;AAAA,QAEM+B,CAAAA,GAAY/B,KAAK/D,KAAL+D,CAAWD,CAAAA,CAAI9D,KAAJ8D,CAAU8B,CAAV9B,CAAXC,CAFlB;AAKA,WAAO;AACH8B,MAAAA,IAAAA,EAAAA,CADG;AAEHE,MAAAA,KAAAA,EAJmBhC,KAAKX,UAALW,CAAgBD,CAAhBC,EAAgBD,EAAO8B,CAAvB7B,CAEhB;AAGH+B,MAAAA,SAAAA,EAAAA;AAHG,KAAP;AAGIA,GA3ICjC,EA2IDiC,CAAAA,CAIDxC,aAJCwC,GAIDxC,UAAcQ,CAAdR,EAAcQ;AAKjB,QAAM+B,CAAAA,GAAO9B,KAAKC,KAALD,CAAWD,CAAAA,CAAI+B,IAAJ/B,CAAS,CAATA,CAAXC,CAAb;AAAA,QACM+B,CAAAA,GAAY/B,KAAKC,KAALD,CAAWD,CAAAA,CAAIN,kBAAfO,CADlB;AAAA,QAEMgC,CAAAA,GAAQhC,KAAKC,KAALD,CAAWD,CAAAA,CAAIiC,KAAJjC,CAAU,CAAVA,CAAXC,CAFd;AAIA,WAAO;AACH8B,MAAAA,IAAAA,EAAM;AAAEvB,QAAAA,KAAAA,EAAOuB,CAAT;AAAe9E,QAAAA,MAAAA,EAAQmE,CAAAA,CAAkBW,CAAlBX,CAAAA,CAAwBJ;AAA/C,OADH;AAEHgB,MAAAA,SAAAA,EAAAA,CAFG;AAGHC,MAAAA,KAAAA,EAAO;AAAEzB,QAAAA,KAAAA,EAAOyB,CAAT;AAAgBhF,QAAAA,MAAAA,EAAQmE,CAAAA,CAAkBa,CAAlBb,CAAAA,CAAyBJ;AAAjD;AAHJ,KAAP;AAG4DA,GA3JvDjB,EA2JuDiB,CAAAA,CAIzDvB,gBAJyDuB,GAIzDvB,UAAiByC,CAAjBzC,EAAiByC;AAEpB,SADA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAgBlF,MAAAA,CAAOmF,OAAPnF,CAAekF,CAAflF,CAChB,EAD+BkF,CAAAA,GAAAA,CAAAA,CAAAA,MAC/B,EAD+BA,CAAAA,EAC/B,EAAkC;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,UAAxBE,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAwB;AAAA,UAAnB5B,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAmB;AAC9B,UAAY,SAAR4B,CAAJ,EACI,OAAO5B,CAAAA,CACFI,GADEJ,CACE,UAAA,CAAA,EAAA;AACD,eAAIM,CAAAA,CAAEJ,SAAFI,KAAgB1E,CAAhB0E,GACOa,QAAAA,CAASb,CAAAA,CAAEL,KAAXkB,CADPb,GAGGH,CAAAA,CAA6BG,CAAAA,CAAEL,KAA/BE,CAHP;AAGsCF,OALvCD,EAOFI,GAPEJ,CAOE,UAAA,CAAA,EAAA;AAAA,eAAU;AAAEA,UAAAA,KAAAA,EAAAA;AAAF,SAAV;AAAYA,OAPdA,CAAP;AASJ,UAAY,cAAR4B,CAAJ,EACI,OAAOT,QAAAA,CAASnB,CAAAA,CAAM,CAANA,CAAAA,CAASC,KAAlBkB,CAAP;AAEJ,UAAY,WAARS,CAAJ,EACI,OAAA,IAAA;AAEJ,UAAY,iBAARA,CAAJ,EACI,OAAO5B,CAAAA,CAAM,CAANA,CAAAA,CAASC,KAAhB;AAEJ,UAAY,kBAAR2B,CAAJ,EACI,OAAOzB,CAAAA,CAA6BH,CAAAA,CAAM,CAANA,CAAAA,CAASC,KAAtCE,CAAP;AAGR;;AAAA,WAAA,IAAA;AAAA,GAzLKZ,EAyLL,CAAA,CAGGL,kBAHH,GAGGA,UAAmBM,CAAnBN,EAAmBM;AAEtB,WADehD,MAAAA,CAAOC,MAAPD,CAAcgD,CAAdhD,EACD,CADCA,EACE,CADFA,EACKyD,KAApB;AAAoBA,GA9LfV,EA8LeU,CAAAA,CAGjBvE,KAHiBuE,GAGjBvE,UAAMmG,CAANnG,EAAMmG;AACT,WAAOA,CAAAA,CAAM5B,KAAb;AAAaA,GAlMRV,EAkMQU,CAlMRV;AAkMQU,CAIQ,CA3MuCZ,CAAAA,CAAeC,4BAAfD,EA2MvC,CAAA,GF/M7B;AAAA,IEgOMuB,CAAAA,GAAoB,UAACwB,CAAD,EAACA;AACvB,MAAM5B,CAAAA,GAAY6B,MAAAA,CAAOD,CAAPC,CAAAA,CAAmBC,KAAnBD,CAAyB,GAAzBA,CAAlB;AAEA,SAAO;AAAE3B,IAAAA,YAAAA,EAAcF,CAAAA,CAAUA,CAAAA,CAAU1D,MAAV0D,GAAmB,CAA7BA,CAAhB;AAAiDA,IAAAA,SAAAA,EAAAA;AAAjD,GAAP;AAAwDA,CFnO5D;AAAA,IEsOML,CAAAA,GAA+B,UAACoC,CAAD,EAACA;AAAAA,SAAgBA,CAAAA,CAAIC,SAAJD,CAAc,CAAdA,EAAiBA,CAAAA,CAAIzF,MAAJyF,GAAa,CAA9BA,CAAhBA;AAA8C,CFtOpF;AAAA,IEsOoF,CAAA,GCtOrE;AACXE,EAAAA,KAAAA,EDgNU,UAAC/F,CAAD,EAACA;AACX,QAGIyF,CAHJ;AAAA,QAAMJ,CAAAA,GFrIS,UAACrF,CAAD,EAACA;AAChB,UAAMC,CAAAA,GAAeJ,CAAAA,CAAYK,QAAZL,CAAqBG,CAArBH,CAArB;AAEA,UAAII,CAAAA,CAAaE,MAAbF,CAAoBG,MAApBH,GAA6B,CAAjC,EACI,MAAMI,KAAAA,CAAMC,IAAAA,CAAKC,SAALD,CAAeL,CAAAA,CAAaE,MAA5BG,CAAND,CAAN;AAGJ,aAAOJ,CAAP;AE8HkBqF,KFrIH,CEqIOtF,CFrIP,CEqIf;;AAOA,QALA2C,CAAAA,CAAe4C,KAAf5C,GAAuB0C,CAAAA,CAAUG,MAAjC7C,EAGA8C,CAAAA,GAAM9C,CAAAA,CAAehB,eAAfgB,EAHNA,EAKIA,CAAAA,CAAexC,MAAfwC,CAAsBvC,MAAtBuC,GAA+B,CAAnC,EACI,MAAMtC,KAAAA,CAAMC,IAAAA,CAAKC,SAALD,CAAeqC,CAAAA,CAAexC,MAA9BG,CAAND,CAAN;AAGJ,WADY+E,CAAAA,CAAqBpC,KAArBoC,CAA2BK,CAA3BL,CACZ;AADuCK;AC5N5B,CHAf;;AE4N2CA,eAAAA,CAAAA","sourcesContent":["import { createToken, Lexer } from 'chevrotain'\n\nconst stringTokenCharacterRegexString = 'a-zA-Z0-9%\\\\s-&(){}\\\\[\\\\]$\\\\*!\\\\\\\\@/,;:=ë#+-<>?^'\nconst stringTokenRegex = new RegExp(\n    `(\"[${stringTokenCharacterRegexString}']*\")|('[${stringTokenCharacterRegexString}\"]*')`\n)\n\nexport const Identifier = createToken({ name: 'Identifier', pattern: /[a-zA-Z]+[\\w.]*/ })\nexport const WhiteSpace = createToken({ name: 'WhiteSpace', pattern: /\\s+/, group: Lexer.SKIPPED })\nexport const Select = createToken({ name: 'Select', pattern: /SELECT/i, longer_alt: Identifier })\nexport const From = createToken({ name: 'From', pattern: /FROM/i, longer_alt: Identifier })\nexport const Where = createToken({ name: 'Where', pattern: /WHERE/i, longer_alt: Identifier })\nexport const Comma = createToken({ name: 'Comma', pattern: /,/ })\nexport const Like = createToken({ name: 'Like', pattern: /like/i, longer_alt: Identifier })\nexport const Limit = createToken({ name: 'Limit', pattern: /limit/i, longer_alt: Identifier })\nexport const Null = createToken({ name: 'Null', pattern: /NULL/i, longer_alt: Identifier })\nexport const In = createToken({ name: 'In', pattern: /in/i, longer_alt: Identifier })\nexport const IsNot = createToken({ name: 'IsNot', pattern: /is\\s+not/i, longer_alt: Identifier })\nexport const Is = createToken({ name: 'Is', pattern: /is/i, longer_alt: Identifier })\nexport const NotLike = createToken({ name: 'NotLike', pattern: /NOT\\s+LIKE/i })\nexport const OrderBy = createToken({ name: 'OrderBy', pattern: /ORDER\\s+BY+/i })\nexport const OrderByDirection = createToken({\n    name: 'OrderByDirection',\n    pattern: /(ASC|DESC)/i,\n    longer_alt: Identifier,\n})\nexport const As = createToken({ name: 'As', pattern: /AS/i, longer_alt: Identifier })\nexport const OrAnd = createToken({ name: 'OrAnd', pattern: /(AND|OR)/i, longer_alt: Identifier })\nexport const Star = createToken({ name: 'Star', pattern: /\\*/ })\nexport const Integer = createToken({ name: 'Integer', pattern: /0|[1-9]\\d*/ })\nexport const StringToken = createToken({ name: 'StringToken', pattern: stringTokenRegex })\nexport const GreaterOrEqualThan = createToken({ name: 'GreaterOrEqualThan', pattern: />=/ })\nexport const GreaterThan = createToken({ name: 'GreaterThan', pattern: />/ })\nexport const LessOrEqualThan = createToken({ name: 'LessOrEqualThan', pattern: /<=/ })\nexport const LessThan = createToken({ name: 'LessThan', pattern: /</ })\nexport const Equal = createToken({ name: 'Equal', pattern: /=/ })\nexport const NotEqual = createToken({ name: 'NotEqual', pattern: /(!=|<>)/ })\nexport const OpenParenthesis = createToken({ name: 'OpenParenthesis', pattern: /\\(/ })\nexport const CloseParenthesis = createToken({ name: 'CloseParenthesis', pattern: /\\)/ })\n\nexport const tokenVocabulary = {\n    WhiteSpace,\n    Select,\n    From,\n    Where,\n    Comma,\n    Like,\n    Limit,\n    Null,\n    In,\n    IsNot,\n    Is,\n    NotLike,\n    OrderBy,\n    OrderByDirection,\n    As,\n    OrAnd,\n\n    Identifier,\n\n    Star,\n    Integer,\n    StringToken,\n\n    Equal,\n    NotEqual,\n    GreaterOrEqualThan,\n    GreaterThan,\n    LessOrEqualThan,\n    LessThan,\n\n    OpenParenthesis,\n    CloseParenthesis,\n} as const\n\nexport type Token = keyof typeof tokenVocabulary\n\nconst SelectLexer = new Lexer(Object.values(tokenVocabulary))\n\nexport const lex = (inputText: string) => {\n    const lexingResult = SelectLexer.tokenize(inputText)\n\n    if (lexingResult.errors.length > 0) {\n        throw Error(JSON.stringify(lexingResult.errors))\n    }\n\n    return lexingResult\n}\n","import { CstNode, CstParser } from 'chevrotain'\nimport {\n    As,\n    CloseParenthesis,\n    Comma,\n    Equal,\n    From,\n    GreaterOrEqualThan,\n    GreaterThan,\n    Identifier,\n    In,\n    Integer,\n    Is,\n    IsNot,\n    LessOrEqualThan,\n    LessThan,\n    lex as selectLexer,\n    Like,\n    Limit,\n    NotEqual,\n    NotLike,\n    Null,\n    OpenParenthesis,\n    OrAnd,\n    OrderBy,\n    OrderByDirection,\n    Select,\n    Star,\n    StringToken,\n    tokenVocabulary,\n    Where,\n} from './lexer'\n\nexport const labels = {\n    value: 'value',\n    table: 'table',\n    name: 'name',\n    alias: 'alias',\n    left: 'left',\n    right: 'right',\n    in: 'in',\n} as const\n\nclass SelectParser extends CstParser {\n    public selectStatement: (idxInCallingRule?: number | undefined, ...args: any[]) => CstNode | CstNode[]\n    public fromClause: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public selectClause: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public whereClause: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public relationalOperator: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public orderByClause: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public limitClause: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public atomicExpression: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public expression: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public subExpression: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public projection: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    public cols: (idxInCallingRule?: number | undefined, ...args: any[]) => any\n    constructor(config?: any) {\n        super(tokenVocabulary, config)\n\n        this.cols = this.RULE('cols', () => {\n            this.OR([\n                { ALT: () => this.CONSUME(Star, { LABEL: labels.value }) },\n                {\n                    ALT: () => {\n                        this.OR1([\n                            {\n                                ALT: () => this.CONSUME(StringToken, { LABEL: labels.value }),\n                            },\n                            {\n                                ALT: () => this.CONSUME(Identifier, { LABEL: labels.value }),\n                            },\n                        ])\n                        this.OPTION(() => {\n                            this.CONSUME(As)\n                            this.OR2([\n                                {\n                                    ALT: () => this.CONSUME1(StringToken, { LABEL: labels.name }),\n                                },\n                                {\n                                    ALT: () => this.CONSUME1(Identifier, { LABEL: labels.name }),\n                                },\n                            ])\n                        })\n                    },\n                },\n            ])\n        })\n\n        this.projection = this.RULE('projection', () => {\n            this.OR([\n                {\n                    ALT: () =>\n                        this.AT_LEAST_ONE_SEP({\n                            SEP: Comma,\n                            DEF: () => {\n                                this.SUBRULE(this.cols)\n                            },\n                        }),\n                },\n            ])\n        })\n\n        this.selectStatement = this.RULE('selectStatement', () => {\n            this.SUBRULE(this.selectClause)\n            this.SUBRULE(this.fromClause)\n            this.OPTION(() => {\n                this.SUBRULE(this.whereClause)\n            })\n            this.OPTION2(() => {\n                this.SUBRULE(this.orderByClause)\n            })\n            this.OPTION3(() => {\n                this.SUBRULE(this.limitClause)\n            })\n        })\n\n        this.selectClause = this.RULE('selectClause', () => {\n            this.CONSUME(Select)\n            this.SUBRULE(this.projection)\n        })\n\n        this.fromClause = this.RULE('fromClause', () => {\n            this.CONSUME(From)\n            this.OR([\n                {\n                    ALT: () => this.CONSUME(Identifier, { LABEL: labels.table }),\n                },\n                {\n                    ALT: () => this.CONSUME(StringToken, { LABEL: labels.table }),\n                },\n            ])\n            this.OPTION(() => this.CONSUME2(Identifier, { LABEL: labels.alias }))\n        })\n\n        this.whereClause = this.RULE('whereClause', () => {\n            this.CONSUME(Where)\n            this.SUBRULE(this.expression)\n        })\n\n        this.expression = this.RULE('expression', () => {\n            this.MANY_SEP({\n                SEP: OrAnd,\n                DEF: () => {\n                    this.SUBRULE(this.subExpression)\n\n                    return OrAnd.name\n                },\n            })\n        })\n\n        this.subExpression = this.RULE('subExpression', () => {\n            this.SUBRULE(this.atomicExpression, { LABEL: labels.left })\n            this.SUBRULE(this.relationalOperator)\n            this.SUBRULE2(this.atomicExpression, { LABEL: labels.right })\n        })\n\n        this.atomicExpression = this.RULE('atomicExpression', () => {\n            this.OR([\n                { ALT: () => this.CONSUME(Integer) },\n                { ALT: () => this.CONSUME(Null) },\n                { ALT: () => this.CONSUME(Identifier) },\n                { ALT: () => this.CONSUME(StringToken) },\n                {\n                    ALT: () => {\n                        this.CONSUME(OpenParenthesis)\n                        this.MANY_SEP({\n                            SEP: Comma,\n                            DEF: () => {\n                                this.OR1([\n                                    {\n                                        ALT: () => this.CONSUME1(Integer, { LABEL: labels.in }),\n                                    },\n                                    {\n                                        ALT: () => this.CONSUME1(StringToken, { LABEL: labels.in }),\n                                    },\n                                ])\n                            },\n                        })\n                        this.CONSUME(CloseParenthesis)\n                    },\n                },\n            ])\n        })\n\n        this.relationalOperator = this.RULE('relationalOperator', () => {\n            this.OR([\n                { ALT: () => this.CONSUME(GreaterOrEqualThan) },\n                { ALT: () => this.CONSUME(GreaterThan) },\n                { ALT: () => this.CONSUME(LessOrEqualThan) },\n                { ALT: () => this.CONSUME(LessThan) },\n                { ALT: () => this.CONSUME(Equal) },\n                { ALT: () => this.CONSUME(NotEqual) },\n                { ALT: () => this.CONSUME(Like) },\n                { ALT: () => this.CONSUME(NotLike) },\n                { ALT: () => this.CONSUME(In) },\n                { ALT: () => this.CONSUME(IsNot) },\n                { ALT: () => this.CONSUME(Is) },\n            ])\n        })\n\n        this.orderByClause = this.RULE('orderByClause', () => {\n            this.CONSUME(OrderBy)\n            this.CONSUME(Identifier)\n            this.OPTION({\n                DEF: () => this.CONSUME(OrderByDirection),\n            })\n        })\n\n        this.limitClause = this.RULE('limitClause', () => {\n            this.CONSUME(Limit)\n            this.CONSUME(Integer)\n        })\n\n        this.performSelfAnalysis()\n    }\n}\n\nconst parserInstance = new SelectParser()\n\nconst parse = (inputText: string) => {\n    const lexResult = selectLexer(inputText)\n\n    parserInstance.input = lexResult.tokens\n\n    parserInstance.selectStatement()\n\n    if (parserInstance.errors.length > 0) {\n        throw Error(parserInstance.errors[0].message)\n    }\n}\n\nexport { parserInstance, SelectParser, parse }\n","import { CstNode, ICstVisitor, IToken } from 'chevrotain'\nimport { Integer, lex, Token, tokenVocabulary } from './lexer'\nimport { SelectParser } from './parser'\nimport { Field, Operand, Order, ordering, From, SQLTree } from './SqlTree'\n\nconst parserInstance = new SelectParser()\nconst BaseSQLVisitor: new (arg?: any) => ICstVisitor<number, any> = parserInstance.getBaseCstVisitorConstructor()\n\nclass SQLToAstVisitor extends BaseSQLVisitor {\n    constructor() {\n        super()\n        this.validateVisitor()\n    }\n\n    public selectStatement(ctx: {\n        selectClause: CstNode | CstNode[]\n        fromClause: CstNode | CstNode[]\n        whereClause: CstNode | CstNode[]\n        orderByClause: CstNode | CstNode[]\n        limitClause: CstNode | CstNode[]\n    }) {\n        const select = this.visit(ctx.selectClause)\n        const from = this.visit(ctx.fromClause)\n        const where = this.visit(ctx.whereClause)\n        const order = this.visit(ctx.orderByClause)\n        const limit = this.visit(ctx.limitClause)\n        return {\n            fields: select,\n            source: from,\n            where,\n            order,\n            limit,\n        } as const\n    }\n\n    public selectClause(ctx: { projection: CstNode | CstNode[] }) {\n        const columns = this.visit(ctx.projection)\n        return columns\n    }\n\n    public cols(ctx: { name: IToken[]; value: IToken[] }) {\n        let value = ctx.value[0].image\n\n        if (ctx.value[0].tokenType === tokenVocabulary.StringToken) {\n            value = convertStringTokenToJsString(value)\n        }\n\n        let name = ctx.name && ctx.name[0] ? ctx.name[0].image : value\n\n        if (ctx.name && ctx.name[0].tokenType === tokenVocabulary.StringToken) {\n            name = convertStringTokenToJsString(name)\n        }\n        return {\n            name,\n            value,\n        }\n    }\n\n    public projection(ctx: { cols: CstNode[] }) {\n        const cols: { value: string; name: string }[] = ctx.cols.map(x => this.visit(x)) as any\n        const fields: Field[] = []\n        cols.forEach(({ name, value }) => {\n            const { pathArray: namePathArray, propertyName: namePropertyName } = splitPropertyPath(name)\n            const { pathArray: fieldPathArray, propertyName: fieldPropertyName } = splitPropertyPath(value)\n            const field: Field = {\n                name: {\n                    value: namePropertyName,\n                    values: namePathArray,\n                },\n                field: {\n                    value: fieldPropertyName,\n                    values: fieldPathArray,\n                },\n            }\n            fields.push(field)\n        })\n        return fields\n    }\n\n    public fromClause(ctx: { table: Array<IToken>; alias: Array<IToken> }): From {\n        let tableName: string = ctx.table[0].image\n        if (ctx.table[0].tokenType === tokenVocabulary.StringToken) {\n            tableName = convertStringTokenToJsString(tableName)\n        }\n        const alias = ctx.alias?.length ? ctx.alias[0].image : tableName\n        return {\n            name: {\n                value: tableName,\n                values: splitPropertyPath(tableName).pathArray,\n            },\n            alias: {\n                value: alias,\n                values: splitPropertyPath(alias).pathArray,\n            },\n        }\n    }\n\n    public whereClause(ctx: { expression: CstNode | CstNode[] }) {\n        const conditions = this.visit(ctx.expression)\n\n        return {\n            conditions,\n        } as const\n    }\n\n    public limitClause(ctx: { Integer: IToken[] }) {\n        const limit = parseInt(ctx.Integer[0].image)\n        return {\n            value: {\n                value: limit,\n            },\n        }\n    }\n    public orderByClause(ctx: { OrderBy: IToken[]; Identifier: IToken[]; OrderByDirection: IToken[] }): Order {\n        const { pathArray, propertyName } = splitPropertyPath(ctx.Identifier[0].image)\n        const direction = ctx.OrderByDirection && (ctx.OrderByDirection[0].image as 'asc' | 'desc')\n\n        const order: ordering = {\n            value: {\n                value: propertyName,\n                values: pathArray,\n            },\n            direction,\n        }\n\n        return {\n            orderings: [order],\n        }\n    }\n\n    public expression(\n        ctx: {\n            subExpression: Array<CstNode | CstNode[]>\n            OrAnd: Array<IToken>\n            right: Array<CstNode | CstNode[]>\n        },\n        i: number = 0\n    ) {\n        if (ctx.subExpression?.length - i === 1) {\n            const left = this.visit(ctx.subExpression[i])\n            return left\n        }\n        const left = this.visit(ctx.subExpression[i])\n\n        const operation = this.OrAnd(ctx.OrAnd[i])\n        const right: Operand = this.expression(ctx, ++i)\n\n        return {\n            left,\n            right,\n            operation,\n        }\n    }\n\n    public subExpression(ctx: {\n        left: Array<CstNode | CstNode[]>\n        relationalOperator: CstNode | CstNode[]\n        right: Array<CstNode | CstNode[]>\n    }) {\n        const left = this.visit(ctx.left[0])\n        const operation = this.visit(ctx.relationalOperator)\n        const right = this.visit(ctx.right[0])\n\n        return {\n            left: { value: left, values: splitPropertyPath(left).pathArray },\n            operation,\n            right: { value: right, values: splitPropertyPath(right).pathArray },\n        }\n    }\n\n    public atomicExpression(context: Record<Token | 'in', Array<IToken>>) {\n        const entries = Object.entries(context) as [keyof typeof context, Array<IToken>][]\n        for (let [key, value] of entries) {\n            if (key === 'in') {\n                return value\n                    .map(x => {\n                        if (x.tokenType === Integer) {\n                            return parseInt(x.image)\n                        }\n                        return convertStringTokenToJsString(x.image)\n                    })\n                    .map(value => ({ value }))\n            }\n            if (key === 'Integer') {\n                return parseInt(value[0].image)\n            }\n            if (key === 'Null') {\n                return null\n            }\n            if (key === 'Identifier') {\n                return value[0].image\n            }\n            if (key === 'StringToken') {\n                return convertStringTokenToJsString(value[0].image)\n            }\n        }\n        return null\n    }\n\n    public relationalOperator(ctx: Record<Token, Array<IToken>>) {\n        const values = Object.values(ctx)\n        return values[0][0].image\n    }\n\n    public OrAnd(token: IToken) {\n        return token.image\n    }\n}\n\nconst toAstVisitorInstance = new SQLToAstVisitor()\n\nconst toAst = (inputText: string) => {\n    const lexResult = lex(inputText)\n\n    parserInstance.input = lexResult.tokens\n    let cst: CstNode[] | CstNode\n\n    cst = parserInstance.selectStatement()\n\n    if (parserInstance.errors.length > 0) {\n        throw Error(JSON.stringify(parserInstance.errors))\n    }\n    const ast = toAstVisitorInstance.visit(cst)\n    return (ast as unknown) as SQLTree\n}\n\nconst splitPropertyPath = (stringPath: string | number) => {\n    const pathArray = String(stringPath).split('.')\n\n    return { propertyName: pathArray[pathArray.length - 1], pathArray }\n}\n\nconst convertStringTokenToJsString = (str: string) => str.substring(1, str.length - 1)\n\nexport { toAst }\n","import { toAst as parse } from './sql/actions-visitor'\n\nexport default {\n    parse,\n}\n"]},"metadata":{},"sourceType":"module"}