{"ast":null,"code":"// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nexport var BITS_FOR_METHOD_TYPE = 4;\nexport var BITS_FOR_OCCURRENCE_IDX = 8;\nexport var BITS_FOR_RULE_IDX = 12; // TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\n\nexport var BITS_FOR_ALT_IDX = 8; // short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n\n/* tslint:disable */\n\nexport var OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport var OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n/* tslint:enable */\n// this actually returns a number, but it is always used as a string (object prop key)\n\nexport function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n  /* tslint:disable */\n  return occurrence | dslMethodIdx | ruleIdx;\n  /* tslint:enable */\n}\nvar BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;","map":{"version":3,"sources":["../../../../src/parse/grammar/keys.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,IAAM,oBAAoB,GAAG,CAA7B;AACP,OAAO,IAAM,uBAAuB,GAAG,CAAhC;AACP,OAAO,IAAM,iBAAiB,GAAG,EAA1B,C,CACP;;AACA,OAAO,IAAM,gBAAgB,GAAG,CAAzB,C,CAEP;AACA;AACA;;AACA;;AACA,OAAO,IAAM,MAAM,GAAG,KAAK,uBAApB;AACP,OAAO,IAAM,UAAU,GAAG,KAAK,uBAAxB;AACP,OAAO,IAAM,QAAQ,GAAG,KAAK,uBAAtB;AACP,OAAO,IAAM,gBAAgB,GAAG,KAAK,uBAA9B;AACP,OAAO,IAAM,YAAY,GAAG,KAAK,uBAA1B;AACP,OAAO,IAAM,oBAAoB,GAAG,KAAK,uBAAlC;AACP;AAEA;;AACA,OAAM,SAAU,2BAAV,CACJ,OADI,EAEJ,YAFI,EAGJ,UAHI,EAGc;AAElB;AACA,SAAO,UAAU,GAAG,YAAb,GAA4B,OAAnC;AACA;AACD;AAED,IAAM,sBAAsB,GAAG,KAAK,gBAApC","sourceRoot":"","sourcesContent":["// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\nexport var BITS_FOR_METHOD_TYPE = 4;\nexport var BITS_FOR_OCCURRENCE_IDX = 8;\nexport var BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport var BITS_FOR_ALT_IDX = 8;\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\n/* tslint:disable */\nexport var OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport var OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport var MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport var AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n/* tslint:enable */\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {\n    /* tslint:disable */\n    return occurrence | dslMethodIdx | ruleIdx;\n    /* tslint:enable */\n}\nvar BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n//# sourceMappingURL=keys.js.map"]},"metadata":{},"sourceType":"module"}