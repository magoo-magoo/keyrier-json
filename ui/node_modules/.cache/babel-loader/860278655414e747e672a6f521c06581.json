{"ast":null,"code":"import { configuration } from 'config';\nimport { logError } from 'core/logging/logger';\nimport localForage from 'localforage';\nimport lodash from 'lodash';\nimport { toast } from 'react-toastify';\nimport { getDefaultAppState, getDefaultUserSettingsState } from 'state/State';\n\nconst persistAppState = appstate => {\n  persist(configuration.storageKey.appState, appstate);\n};\n\nconst persistUserSettings = userSettings => {\n  persist(configuration.storageKey.userSettings, userSettings);\n};\n\nconst getUserSettings = () => loadUserSettings(configuration.storageKey.userSettings);\n\nconst getAppState = () => loadAppState(configuration.storageKey.appState);\n\nconst persist = async (key, value) => {\n  try {\n    await localForage.setItem(key, value);\n  } catch (error) {\n    toast.warn(`Error while saving ${key} to storage. ${error}`);\n  }\n};\n\nconst getDefault = key => {\n  switch (key) {\n    case configuration.storageKey.appState:\n      return getDefaultAppState();\n\n    case configuration.storageKey.userSettings:\n      return getDefaultUserSettingsState();\n\n    default:\n      throw new Error(`no defaul value for ${key}`);\n  }\n};\n\nconst loadAppState = async key => {\n  let present = getDefault(key);\n\n  try {\n    const savedState = await localForage.getItem(key);\n    return lodash.merge({\n      present\n    }, savedState !== null && savedState !== void 0 ? savedState : {});\n  } catch (error) {\n    logError(error);\n  }\n\n  return {};\n};\n\nconst loadUserSettings = async key => {\n  let state = getDefault(key);\n\n  try {\n    const savedState = await localForage.getItem(key);\n    return lodash.merge(state, savedState !== null && savedState !== void 0 ? savedState : {});\n  } catch (error) {\n    logError(error);\n  }\n\n  return {};\n};\n\nexport default {\n  getAppState,\n  getUserSettings,\n  persistAppState,\n  persistUserSettings\n};","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/store/persistence.ts"],"names":["configuration","logError","localForage","lodash","toast","getDefaultAppState","getDefaultUserSettingsState","persistAppState","appstate","persist","storageKey","appState","persistUserSettings","userSettings","getUserSettings","loadUserSettings","getAppState","loadAppState","key","value","setItem","error","warn","getDefault","Error","present","savedState","getItem","merge","state"],"mappings":"AAAA,SAASA,aAAT,QAA8B,QAA9B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,SAAmBC,kBAAnB,EAAuCC,2BAAvC,QAA6F,aAA7F;;AAEA,MAAMC,eAAe,GAAIC,QAAD,IAA0C;AAC9DC,EAAAA,OAAO,CAACT,aAAa,CAACU,UAAd,CAAyBC,QAA1B,EAAoCH,QAApC,CAAP;AACH,CAFD;;AAIA,MAAMI,mBAAmB,GAAIC,YAAD,IAAqC;AAC7DJ,EAAAA,OAAO,CAACT,aAAa,CAACU,UAAd,CAAyBG,YAA1B,EAAwCA,YAAxC,CAAP;AACH,CAFD;;AAIA,MAAMC,eAAe,GAAG,MAAMC,gBAAgB,CAACf,aAAa,CAACU,UAAd,CAAyBG,YAA1B,CAA9C;;AACA,MAAMG,WAAW,GAAG,MAAMC,YAAY,CAACjB,aAAa,CAACU,UAAd,CAAyBC,QAA1B,CAAtC;;AAEA,MAAMF,OAAO,GAAG,OAAOS,GAAP,EAAoBC,KAApB,KAAkD;AAC9D,MAAI;AACA,UAAMjB,WAAW,CAACkB,OAAZ,CAAoBF,GAApB,EAAyBC,KAAzB,CAAN;AACH,GAFD,CAEE,OAAOE,KAAP,EAAc;AACZjB,IAAAA,KAAK,CAACkB,IAAN,CAAY,sBAAqBJ,GAAI,gBAAeG,KAAM,EAA1D;AACH;AACJ,CAND;;AAQA,MAAME,UAAU,GAAIL,GAAD,IAAiB;AAChC,UAAQA,GAAR;AACI,SAAKlB,aAAa,CAACU,UAAd,CAAyBC,QAA9B;AACI,aAAON,kBAAkB,EAAzB;;AACJ,SAAKL,aAAa,CAACU,UAAd,CAAyBG,YAA9B;AACI,aAAOP,2BAA2B,EAAlC;;AACJ;AACI,YAAM,IAAIkB,KAAJ,CAAW,uBAAsBN,GAAI,EAArC,CAAN;AANR;AAQH,CATD;;AAWA,MAAMD,YAAY,GAAG,MAAOC,GAAP,IAAuB;AACxC,MAAIO,OAAO,GAAGF,UAAU,CAACL,GAAD,CAAxB;;AACA,MAAI;AACA,UAAMQ,UAAU,GAAG,MAAMxB,WAAW,CAACyB,OAAZ,CAAgDT,GAAhD,CAAzB;AACA,WAAOf,MAAM,CAACyB,KAAP,CAAa;AAAEH,MAAAA;AAAF,KAAb,EAA0BC,UAA1B,aAA0BA,UAA1B,cAA0BA,UAA1B,GAAwC,EAAxC,CAAP;AACH,GAHD,CAGE,OAAOL,KAAP,EAAc;AACZpB,IAAAA,QAAQ,CAACoB,KAAD,CAAR;AACH;;AAED,SAAO,EAAP;AACH,CAVD;;AAWA,MAAMN,gBAAgB,GAAG,MAAOG,GAAP,IAAuB;AAC5C,MAAIW,KAAK,GAAGN,UAAU,CAACL,GAAD,CAAtB;;AACA,MAAI;AACA,UAAMQ,UAAU,GAAG,MAAMxB,WAAW,CAACyB,OAAZ,CAAuCT,GAAvC,CAAzB;AACA,WAAOf,MAAM,CAACyB,KAAP,CAAaC,KAAb,EAAoBH,UAApB,aAAoBA,UAApB,cAAoBA,UAApB,GAAkC,EAAlC,CAAP;AACH,GAHD,CAGE,OAAOL,KAAP,EAAc;AACZpB,IAAAA,QAAQ,CAACoB,KAAD,CAAR;AACH;;AAED,SAAO,EAAP;AACH,CAVD;;AAYA,eAAe;AACXL,EAAAA,WADW;AAEXF,EAAAA,eAFW;AAGXP,EAAAA,eAHW;AAIXK,EAAAA;AAJW,CAAf","sourcesContent":["import { configuration } from 'config'\nimport { logError } from 'core/logging/logger'\nimport localForage from 'localforage'\nimport lodash from 'lodash'\nimport { toast } from 'react-toastify'\nimport { StateWithHistory } from 'redux-undo'\nimport { AppState, getDefaultAppState, getDefaultUserSettingsState, UserSettingsState } from 'state/State'\n\nconst persistAppState = (appstate: StateWithHistory<AppState>) => {\n    persist(configuration.storageKey.appState, appstate)\n}\n\nconst persistUserSettings = (userSettings: UserSettingsState) => {\n    persist(configuration.storageKey.userSettings, userSettings)\n}\n\nconst getUserSettings = () => loadUserSettings(configuration.storageKey.userSettings) as Promise<UserSettingsState>\nconst getAppState = () => loadAppState(configuration.storageKey.appState) as Promise<StateWithHistory<AppState>>\n\nconst persist = async (key: string, value: object | undefined) => {\n    try {\n        await localForage.setItem(key, value)\n    } catch (error) {\n        toast.warn(`Error while saving ${key} to storage. ${error}`)\n    }\n}\n\nconst getDefault = (key: string) => {\n    switch (key) {\n        case configuration.storageKey.appState:\n            return getDefaultAppState()\n        case configuration.storageKey.userSettings:\n            return getDefaultUserSettingsState()\n        default:\n            throw new Error(`no defaul value for ${key}`)\n    }\n}\n\nconst loadAppState = async (key: string) => {\n    let present = getDefault(key)\n    try {\n        const savedState = await localForage.getItem<StateWithHistory<AppState>>(key)\n        return lodash.merge({ present }, savedState ?? {})\n    } catch (error) {\n        logError(error)\n    }\n\n    return {}\n}\nconst loadUserSettings = async (key: string) => {\n    let state = getDefault(key)\n    try {\n        const savedState = await localForage.getItem<UserSettingsState>(key)\n        return lodash.merge(state, savedState ?? {})\n    } catch (error) {\n        logError(error)\n    }\n\n    return {}\n}\n\nexport default {\n    getAppState,\n    getUserSettings,\n    persistAppState,\n    persistUserSettings,\n}\n"]},"metadata":{},"sourceType":"module"}