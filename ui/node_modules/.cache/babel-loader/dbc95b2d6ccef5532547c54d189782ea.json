{"ast":null,"code":"ace.define(\"ace/mode/rust_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\n\n  var RustHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: 'variable.other.source.rust',\n        regex: '\\'[a-zA-Z_][a-zA-Z0-9_]*(?![\\\\\\'])'\n      }, {\n        token: 'string.quoted.single.source.rust',\n        regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\"\n      }, {\n        token: 'identifier',\n        regex: /r#[a-zA-Z_][a-zA-Z0-9_]*\\b/\n      }, {\n        stateName: \"bracketedComment\",\n        onMatch: function (value, currentState, stack) {\n          stack.unshift(this.next, value.length - 1, currentState);\n          return \"string.quoted.raw.source.rust\";\n        },\n        regex: /r#*\"/,\n        next: [{\n          onMatch: function (value, currentState, stack) {\n            var token = \"string.quoted.raw.source.rust\";\n\n            if (value.length >= stack[1]) {\n              if (value.length > stack[1]) token = \"invalid\";\n              stack.shift();\n              stack.shift();\n              this.next = stack.shift();\n            } else {\n              this.next = \"\";\n            }\n\n            return token;\n          },\n          regex: /\"#*/,\n          next: \"start\"\n        }, {\n          defaultToken: \"string.quoted.raw.source.rust\"\n        }]\n      }, {\n        token: 'string.quoted.double.source.rust',\n        regex: '\"',\n        push: [{\n          token: 'string.quoted.double.source.rust',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          token: 'constant.character.escape.source.rust',\n          regex: stringEscape\n        }, {\n          defaultToken: 'string.quoted.double.source.rust'\n        }]\n      }, {\n        token: ['keyword.source.rust', 'text', 'entity.name.function.source.rust'],\n        regex: '\\\\b(fn)(\\\\s+)((?:r#)?[a-zA-Z_][a-zA-Z0-9_]*)'\n      }, {\n        token: 'support.constant',\n        regex: '\\\\b[a-zA-Z_][\\\\w\\\\d]*::'\n      }, {\n        token: 'keyword.source.rust',\n        regex: '\\\\b(?:abstract|alignof|as|async|await|become|box|break|catch|continue|const|crate|default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\\\b'\n      }, {\n        token: 'storage.type.source.rust',\n        regex: '\\\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t)\\\\b'\n      }, {\n        token: 'variable.language.source.rust',\n        regex: '\\\\bself\\\\b'\n      }, {\n        token: 'comment.line.doc.source.rust',\n        regex: '//!.*$'\n      }, {\n        token: 'comment.line.double-dash.source.rust',\n        regex: '//.*$'\n      }, {\n        token: 'comment.start.block.source.rust',\n        regex: '/\\\\*',\n        stateName: 'comment',\n        push: [{\n          token: 'comment.start.block.source.rust',\n          regex: '/\\\\*',\n          push: 'comment'\n        }, {\n          token: 'comment.end.block.source.rust',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block.source.rust'\n        }]\n      }, {\n        token: 'keyword.operator',\n        regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/\n      }, {\n        token: 'constant.language.source.rust',\n        regex: '\\\\b(?:true|false|Some|None|Ok|Err)\\\\b'\n      }, {\n        token: 'support.constant.source.rust',\n        regex: '\\\\b(?:EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|_IONBF|_IOLBF|BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO)\\\\b'\n      }, {\n        token: 'meta.preprocessor.source.rust',\n        regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b'\n      }, {\n        token: 'constant.numeric.source.rust',\n        regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/\n      }, {\n        token: 'constant.numeric.source.rust',\n        regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  RustHighlightRules.metaData = {\n    fileTypes: ['rs', 'rc'],\n    foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n    foldingStopMarker: '^\\\\s*\\\\}',\n    name: 'Rust',\n    scopeName: 'source.rust'\n  };\n  oop.inherits(RustHighlightRules, TextHighlightRules);\n  exports.RustHighlightRules = RustHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/rust\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/rust_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var RustHighlightRules = require(\"./rust_highlight_rules\").RustHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\",\n      nestable: true\n    };\n    this.$quotes = {\n      '\"': '\"'\n    };\n    this.$id = \"ace/mode/rust\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/rust\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-rust.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","stringEscape","source","RustHighlightRules","$rules","start","token","regex","stateName","onMatch","value","currentState","stack","unshift","next","length","shift","defaultToken","push","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","nestable","$quotes","$id"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,+BAAX,EAA2C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,+BAA5C,CAA3C,EAAyH,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC5J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAD,CAAP,CAAkCI,kBAA3D;;AAEA,MAAIC,YAAY,GAAG,qDAAqDC,MAAxE;;AACA,MAAIC,kBAAkB,GAAG,YAAW;AAEhC,SAAKC,MAAL,GAAc;AAAEC,MAAAA,KAAK,EAClB,CAAE;AAAEC,QAAAA,KAAK,EAAE,4BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAAF,EAEE;AAAED,QAAAA,KAAK,EAAE,kCAAT;AACEC,QAAAA,KAAK,EAAE,kBAAkBN,YAAlB,GAAiC;AAD1C,OAFF,EAIE;AAAEK,QAAAA,KAAK,EAAE,YAAT;AACEC,QAAAA,KAAK,EAAG;AADV,OAJF,EAME;AACGC,QAAAA,SAAS,EAAE,kBADd;AAEGC,QAAAA,OAAO,EAAG,UAASC,KAAT,EAAgBC,YAAhB,EAA8BC,KAA9B,EAAoC;AAC1CA,UAAAA,KAAK,CAACC,OAAN,CAAc,KAAKC,IAAnB,EAAyBJ,KAAK,CAACK,MAAN,GAAe,CAAxC,EAA2CJ,YAA3C;AACA,iBAAO,+BAAP;AACH,SALJ;AAMGJ,QAAAA,KAAK,EAAG,MANX;AAOGO,QAAAA,IAAI,EAAI,CACJ;AACIL,UAAAA,OAAO,EAAG,UAASC,KAAT,EAAgBC,YAAhB,EAA8BC,KAA9B,EAAqC;AAC3C,gBAAIN,KAAK,GAAG,+BAAZ;;AACA,gBAAII,KAAK,CAACK,MAAN,IAAgBH,KAAK,CAAC,CAAD,CAAzB,EAA8B;AAC1B,kBAAIF,KAAK,CAACK,MAAN,GAAeH,KAAK,CAAC,CAAD,CAAxB,EACIN,KAAK,GAAG,SAAR;AACJM,cAAAA,KAAK,CAACI,KAAN;AACAJ,cAAAA,KAAK,CAACI,KAAN;AACA,mBAAKF,IAAL,GAAYF,KAAK,CAACI,KAAN,EAAZ;AACH,aAND,MAMO;AACH,mBAAKF,IAAL,GAAY,EAAZ;AACH;;AACD,mBAAOR,KAAP;AACH,WAbL;AAcIC,UAAAA,KAAK,EAAG,KAdZ;AAeIO,UAAAA,IAAI,EAAI;AAfZ,SADI,EAiBD;AACCG,UAAAA,YAAY,EAAG;AADhB,SAjBC;AAPX,OANF,EAmCE;AAAEX,QAAAA,KAAK,EAAE,kCAAT;AACEC,QAAAA,KAAK,EAAE,GADT;AAEEW,QAAAA,IAAI,EACH,CAAE;AAAEZ,UAAAA,KAAK,EAAE,kCAAT;AACEC,UAAAA,KAAK,EAAE,GADT;AAEEO,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAER,UAAAA,KAAK,EAAE,uCAAT;AACEC,UAAAA,KAAK,EAAEN;AADT,SAHF,EAKE;AAAEgB,UAAAA,YAAY,EAAE;AAAhB,SALF;AAHH,OAnCF,EA4CE;AAAEX,QAAAA,KAAK,EAAE,CAAE,qBAAF,EAAyB,MAAzB,EAAiC,kCAAjC,CAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OA5CF,EA8CE;AAAED,QAAAA,KAAK,EAAE,kBAAT;AAA6BC,QAAAA,KAAK,EAAE;AAApC,OA9CF,EA+CE;AAAED,QAAAA,KAAK,EAAE,qBAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OA/CF,EAiDE;AAAED,QAAAA,KAAK,EAAE,0BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAjDF,EAmDE;AAAED,QAAAA,KAAK,EAAE,+BAAT;AAA0CC,QAAAA,KAAK,EAAE;AAAjD,OAnDF,EAqDE;AAAED,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OArDF,EAuDE;AAAED,QAAAA,KAAK,EAAE,sCAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAvDF,EAyDE;AAAED,QAAAA,KAAK,EAAE,iCAAT;AACEC,QAAAA,KAAK,EAAE,MADT;AAEEC,QAAAA,SAAS,EAAE,SAFb;AAGEU,QAAAA,IAAI,EACH,CAAE;AAAEZ,UAAAA,KAAK,EAAE,iCAAT;AACEC,UAAAA,KAAK,EAAE,MADT;AAEEW,UAAAA,IAAI,EAAE;AAFR,SAAF,EAGE;AAAEZ,UAAAA,KAAK,EAAE,+BAAT;AACEC,UAAAA,KAAK,EAAE,MADT;AAEEO,UAAAA,IAAI,EAAE;AAFR,SAHF,EAME;AAAEG,UAAAA,YAAY,EAAE;AAAhB,SANF;AAJH,OAzDF,EAqEE;AAAEX,QAAAA,KAAK,EAAE,kBAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OArEF,EAuEE;AAAED,QAAAA,KAAK,EAAG,sBAAV;AAAkCC,QAAAA,KAAK,EAAG;AAA1C,OAvEF,EAwEE;AAAED,QAAAA,KAAK,EAAG,cAAV;AAA0BC,QAAAA,KAAK,EAAG;AAAlC,OAxEF,EAyEE;AAAED,QAAAA,KAAK,EAAG,cAAV;AAA0BC,QAAAA,KAAK,EAAG;AAAlC,OAzEF,EA0EE;AAAED,QAAAA,KAAK,EAAE,+BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OA1EF,EA4EE;AAAED,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OA5EF,EA8EE;AAAED,QAAAA,KAAK,EAAE,+BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OA9EF,EAgFE;AAAED,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAhFF,EAkFE;AAAED,QAAAA,KAAK,EAAE,8BAAT;AACEC,QAAAA,KAAK,EAAE;AADT,OAlFF;AADW,KAAd;AAsFA,SAAKY,cAAL;AACH,GAzFD;;AA2FAhB,EAAAA,kBAAkB,CAACiB,QAAnB,GAA8B;AAAEC,IAAAA,SAAS,EAAE,CAAE,IAAF,EAAQ,IAAR,CAAb;AACxBC,IAAAA,kBAAkB,EAAE,4DADI;AAExBC,IAAAA,iBAAiB,EAAE,UAFK;AAGxBC,IAAAA,IAAI,EAAE,MAHkB;AAIxBC,IAAAA,SAAS,EAAE;AAJa,GAA9B;AAOA1B,EAAAA,GAAG,CAAC2B,QAAJ,CAAavB,kBAAb,EAAiCH,kBAAjC;AAEAH,EAAAA,OAAO,CAACM,kBAAR,GAA6BA,kBAA7B;AACC,CA5GD;AA8GAT,GAAG,CAACC,MAAJ,CAAW,yBAAX,EAAqC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,WAA5C,EAAwD,4BAAxD,CAArC,EAA4H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AACA,MAAI+B,KAAK,GAAG/B,OAAO,CAAC,aAAD,CAAP,CAAuB+B,KAAnC;;AACA,MAAIC,YAAY,GAAGhC,OAAO,CAAC,aAAD,CAAP,CAAuBiC,QAA1C;;AAEA,MAAIA,QAAQ,GAAGhC,OAAO,CAACgC,QAAR,GAAmB,UAASC,YAAT,EAAuB;AACrD,QAAIA,YAAJ,EAAkB;AACd,WAAKR,kBAAL,GAA0B,IAAIS,MAAJ,CACtB,KAAKT,kBAAL,CAAwBpB,MAAxB,CAA+B8B,OAA/B,CAAuC,WAAvC,EAAoD,MAAMF,YAAY,CAACzB,KAAvE,CADsB,CAA1B;AAGA,WAAKkB,iBAAL,GAAyB,IAAIQ,MAAJ,CACrB,KAAKR,iBAAL,CAAuBrB,MAAvB,CAA8B8B,OAA9B,CAAsC,WAAtC,EAAmD,MAAMF,YAAY,CAACG,GAAtE,CADqB,CAAzB;AAGH;AACJ,GATD;;AAUAlC,EAAAA,GAAG,CAAC2B,QAAJ,CAAaG,QAAb,EAAuBD,YAAvB;AAEA,GAAC,YAAW;AAER,SAAKN,kBAAL,GAA0B,kCAA1B;AACA,SAAKC,iBAAL,GAAyB,sCAAzB;AACA,SAAKW,wBAAL,GAA+B,sBAA/B;AACA,SAAKC,wBAAL,GAAgC,0BAAhC;AACA,SAAKC,aAAL,GAAqB,2BAArB;AACA,SAAKC,kBAAL,GAA0B,KAAKC,aAA/B;;AACA,SAAKA,aAAL,GAAqB,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkC;AACnD,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;;AAEA,UAAI,KAAKP,wBAAL,CAA8BU,IAA9B,CAAmCF,IAAnC,CAAJ,EAA8C;AAC1C,YAAI,CAAC,KAAKN,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAD,IAAkC,CAAC,KAAKP,wBAAL,CAA8BS,IAA9B,CAAmCF,IAAnC,CAAvC,EACI,OAAO,EAAP;AACP;;AAED,UAAIG,EAAE,GAAG,KAAKR,kBAAL,CAAwBE,OAAxB,EAAiCC,SAAjC,EAA4CC,GAA5C,CAAT;;AAEA,UAAI,CAACI,EAAD,IAAO,KAAKT,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAX,EACI,OAAO,OAAP,CAX+C,CAW/B;;AAEpB,aAAOG,EAAP;AACH,KAdD;;AAgBA,SAAKC,kBAAL,GAA0B,UAASP,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkCM,cAAlC,EAAkD;AACxE,UAAIL,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AAEA,UAAI,KAAKL,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAJ,EACI,OAAO,KAAKM,qBAAL,CAA2BT,OAA3B,EAAoCG,IAApC,EAA0CD,GAA1C,CAAP;AAEJ,UAAIQ,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAK3B,kBAAhB,CAAZ;;AACA,UAAI2B,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAd;AAEA,YAAIF,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKG,mBAAL,CAAyBb,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,YAAIG,KAAK,GAAGd,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASlC,MAA9C,EAAsD,CAAtD,CAAZ;;AAEA,YAAIsC,KAAK,IAAI,CAACA,KAAK,CAACE,WAAN,EAAd,EAAmC;AAC/B,cAAIR,cAAJ,EAAoB;AAChBM,YAAAA,KAAK,GAAG,KAAKG,eAAL,CAAqBjB,OAArB,EAA8BE,GAA9B,CAAR;AACH,WAFD,MAEO,IAAID,SAAS,IAAI,KAAjB,EACHa,KAAK,GAAG,IAAR;AACP;;AAED,eAAOA,KAAP;AACH;;AAED,UAAIb,SAAS,KAAK,WAAlB,EACI;AAEJ,UAAIS,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAK1B,iBAAhB,CAAZ;;AACA,UAAI0B,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC,CAAD,CAAL,CAASlC,MAA/B;AAEA,YAAIkC,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKQ,mBAAL,CAAyBlB,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,eAAOX,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAjC,EAAoC,CAAC,CAArC,CAAP;AACH;AACJ,KArCD;;AAuCA,SAAKM,eAAL,GAAuB,UAASjB,OAAT,EAAkBE,GAAlB,EAAuB;AAC1C,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AACA,UAAIiB,WAAW,GAAGhB,IAAI,CAACiB,MAAL,CAAY,IAAZ,CAAlB;AACA,UAAIC,QAAQ,GAAGnB,GAAf;AACA,UAAIoB,WAAW,GAAGnB,IAAI,CAAC3B,MAAvB;AACA0B,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAAZ;AACA,UAAIqB,MAAM,GAAGrB,GAAb;AACA,UAAIsB,MAAM,GAAGxB,OAAO,CAACyB,SAAR,EAAb;;AACA,aAAO,EAAEvB,GAAF,GAAQsB,MAAf,EAAuB;AACnBrB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAIwB,MAAM,GAAGvB,IAAI,CAACiB,MAAL,CAAY,IAAZ,CAAb;AACA,YAAIM,MAAM,KAAK,CAAC,CAAhB,EACI;AACJ,YAAKP,WAAW,GAAGO,MAAnB,EACI;AACJ,YAAIC,QAAQ,GAAG,KAAKpB,kBAAL,CAAwBP,OAAxB,EAAiC,KAAjC,EAAwCE,GAAxC,CAAf;;AAEA,YAAIyB,QAAJ,EAAc;AACV,cAAIA,QAAQ,CAAC7D,KAAT,CAAeoC,GAAf,IAAsBmB,QAA1B,EAAoC;AAChC;AACH,WAFD,MAEO,IAAIM,QAAQ,CAACX,WAAT,EAAJ,EAA4B;AAC/Bd,YAAAA,GAAG,GAAGyB,QAAQ,CAACjC,GAAT,CAAaQ,GAAnB;AACH,WAFM,MAEA,IAAIiB,WAAW,IAAIO,MAAnB,EAA2B;AAC9B;AACH;AACJ;;AACDH,QAAAA,MAAM,GAAGrB,GAAT;AACH;;AAED,aAAO,IAAId,KAAJ,CAAUiC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCvB,OAAO,CAACI,OAAR,CAAgBmB,MAAhB,EAAwB/C,MAAjE,CAAP;AACH,KA9BD;;AA+BA,SAAKiC,qBAAL,GAA6B,UAAST,OAAT,EAAkBG,IAAlB,EAAwBD,GAAxB,EAA6B;AACtD,UAAIoB,WAAW,GAAGnB,IAAI,CAACiB,MAAL,CAAY,MAAZ,CAAlB;AACA,UAAII,MAAM,GAAGxB,OAAO,CAACyB,SAAR,EAAb;AACA,UAAIJ,QAAQ,GAAGnB,GAAf;AAEA,UAAI0B,EAAE,GAAG,sCAAT;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,aAAO,EAAE3B,GAAF,GAAQsB,MAAf,EAAuB;AACnBrB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAI4B,CAAC,GAAGF,EAAE,CAACG,IAAH,CAAQ5B,IAAR,CAAR;AACA,YAAI,CAAC2B,CAAL,EAAQ;AACR,YAAIA,CAAC,CAAC,CAAD,CAAL,EAAUD,KAAK,GAAf,KACKA,KAAK;AAEV,YAAI,CAACA,KAAL,EAAY;AACf;;AAED,UAAIN,MAAM,GAAGrB,GAAb;;AACA,UAAIqB,MAAM,GAAGF,QAAb,EAAuB;AACnB,eAAO,IAAIjC,KAAJ,CAAUiC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCpB,IAAI,CAAC3B,MAA9C,CAAP;AACH;AACJ,KArBD;AAuBH,GArHD,EAqHGwD,IArHH,CAqHQ1C,QAAQ,CAAC2C,SArHjB;AAuHC,CA1ID;AA4IA9E,GAAG,CAACC,MAAJ,CAAW,eAAX,EAA2B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,eAA5C,EAA4D,+BAA5D,EAA4F,yBAA5F,CAA3B,EAAmJ,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACtL;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAI6E,QAAQ,GAAG7E,OAAO,CAAC,QAAD,CAAP,CAAkB8E,IAAjC;;AACA,MAAIvE,kBAAkB,GAAGP,OAAO,CAAC,wBAAD,CAAP,CAAkCO,kBAA3D;;AACA,MAAI0B,QAAQ,GAAGjC,OAAO,CAAC,kBAAD,CAAP,CAA4BiC,QAA3C;;AAEA,MAAI6C,IAAI,GAAG,YAAW;AAClB,SAAKC,cAAL,GAAsBxE,kBAAtB;AACA,SAAKyE,YAAL,GAAoB,IAAI/C,QAAJ,EAApB;AACA,SAAKgD,UAAL,GAAkB,KAAKC,iBAAvB;AACH,GAJD;;AAKA/E,EAAAA,GAAG,CAAC2B,QAAJ,CAAagD,IAAb,EAAmBD,QAAnB;AAEA,GAAC,YAAW;AACR,SAAKM,gBAAL,GAAwB,IAAxB;AACA,SAAKC,YAAL,GAAoB;AAAC3E,MAAAA,KAAK,EAAE,IAAR;AAAc4B,MAAAA,GAAG,EAAE,IAAnB;AAAyBgD,MAAAA,QAAQ,EAAE;AAAnC,KAApB;AACA,SAAKC,OAAL,GAAe;AAAE,WAAK;AAAP,KAAf;AACA,SAAKC,GAAL,GAAW,eAAX;AACH,GALD,EAKGZ,IALH,CAKQG,IAAI,CAACF,SALb;AAOA3E,EAAAA,OAAO,CAAC6E,IAAR,GAAeA,IAAf;AACC,CAvBD;;AAuBmB,CAAC,YAAW;AACXhF,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,eAAD,CAAZ,EAA+B,UAASyE,CAAT,EAAY;AACvC,QAAI,OAAOvE,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBwE,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/mode/rust_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\nvar RustHighlightRules = function() {\n\n    this.$rules = { start:\n       [ { token: 'variable.other.source.rust',\n           regex: '\\'[a-zA-Z_][a-zA-Z0-9_]*(?![\\\\\\'])' },\n         { token: 'string.quoted.single.source.rust',\n           regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\" },\n         { token: 'identifier',\n           regex:  /r#[a-zA-Z_][a-zA-Z0-9_]*\\b/ },\n         {\n            stateName: \"bracketedComment\",\n            onMatch : function(value, currentState, stack){\n                stack.unshift(this.next, value.length - 1, currentState);\n                return \"string.quoted.raw.source.rust\";\n            },\n            regex : /r#*\"/,\n            next  : [\n                {\n                    onMatch : function(value, currentState, stack) {\n                        var token = \"string.quoted.raw.source.rust\";\n                        if (value.length >= stack[1]) {\n                            if (value.length > stack[1])\n                                token = \"invalid\";\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack.shift();\n                        } else {\n                            this.next = \"\";\n                        }\n                        return token;\n                    },\n                    regex : /\"#*/,\n                    next  : \"start\"\n                }, {\n                    defaultToken : \"string.quoted.raw.source.rust\"\n                }\n            ]\n         },\n         { token: 'string.quoted.double.source.rust',\n           regex: '\"',\n           push: \n            [ { token: 'string.quoted.double.source.rust',\n                regex: '\"',\n                next: 'pop' },\n              { token: 'constant.character.escape.source.rust',\n                regex: stringEscape },\n              { defaultToken: 'string.quoted.double.source.rust' } ] },\n         { token: [ 'keyword.source.rust', 'text', 'entity.name.function.source.rust' ],\n           regex: '\\\\b(fn)(\\\\s+)((?:r#)?[a-zA-Z_][a-zA-Z0-9_]*)' },\n         { token: 'support.constant', regex: '\\\\b[a-zA-Z_][\\\\w\\\\d]*::' },\n         { token: 'keyword.source.rust',\n           regex: '\\\\b(?:abstract|alignof|as|async|await|become|box|break|catch|continue|const|crate|default|do|dyn|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\\\b' },\n         { token: 'storage.type.source.rust',\n           regex: '\\\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t)\\\\b' },\n         { token: 'variable.language.source.rust', regex: '\\\\bself\\\\b' },\n         \n         { token: 'comment.line.doc.source.rust',\n           regex: '//!.*$' },\n         { token: 'comment.line.double-dash.source.rust',\n           regex: '//.*$' },\n         { token: 'comment.start.block.source.rust',\n           regex: '/\\\\*',\n           stateName: 'comment',\n           push: \n            [ { token: 'comment.start.block.source.rust',\n                regex: '/\\\\*',\n                push: 'comment' },\n              { token: 'comment.end.block.source.rust',\n                regex: '\\\\*/',\n                next: 'pop' },\n              { defaultToken: 'comment.block.source.rust' } ] },\n         \n         { token: 'keyword.operator',\n           regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/ },\n         { token : \"punctuation.operator\", regex : /[?:,;.]/ },\n         { token : \"paren.lparen\", regex : /[\\[({]/ },\n         { token : \"paren.rparen\", regex : /[\\])}]/ },\n         { token: 'constant.language.source.rust',\n           regex: '\\\\b(?:true|false|Some|None|Ok|Err)\\\\b' },\n         { token: 'support.constant.source.rust',\n           regex: '\\\\b(?:EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|_IONBF|_IOLBF|BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO)\\\\b' },\n         { token: 'meta.preprocessor.source.rust',\n           regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b' },\n         { token: 'constant.numeric.source.rust',\n           regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/ },\n         { token: 'constant.numeric.source.rust',\n           regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/ } ] };\n    \n    this.normalizeRules();\n};\n\nRustHighlightRules.metaData = { fileTypes: [ 'rs', 'rc' ],\n      foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n      foldingStopMarker: '^\\\\s*\\\\}',\n      name: 'Rust',\n      scopeName: 'source.rust' };\n\n\noop.inherits(RustHighlightRules, TextHighlightRules);\n\nexports.RustHighlightRules = RustHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/rust\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/rust_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar RustHighlightRules = require(\"./rust_highlight_rules\").RustHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\", nestable: true};\n    this.$quotes = { '\"': '\"' };\n    this.$id = \"ace/mode/rust\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/rust\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}