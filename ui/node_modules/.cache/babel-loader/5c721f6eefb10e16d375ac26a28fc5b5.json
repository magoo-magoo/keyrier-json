{"ast":null,"code":"ace.define(\"ace/snippets/perl\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"# #!/usr/bin/perl\\n\\\nsnippet #!\\n\\\n\t#!/usr/bin/env perl\\n\\\n\\n\\\n# Hash Pointer\\n\\\nsnippet .\\n\\\n\t =>\\n\\\n# Function\\n\\\nsnippet sub\\n\\\n\tsub ${1:function_name} {\\n\\\n\t\t${2:#body ...}\\n\\\n\t}\\n\\\n# Conditional\\n\\\nsnippet if\\n\\\n\tif (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# Conditional if..else\\n\\\nsnippet ife\\n\\\n\tif (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n\telse {\\n\\\n\t\t${3:# else...}\\n\\\n\t}\\n\\\n# Conditional if..elsif..else\\n\\\nsnippet ifee\\n\\\n\tif (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n\telsif (${3}) {\\n\\\n\t\t${4:# elsif...}\\n\\\n\t}\\n\\\n\telse {\\n\\\n\t\t${5:# else...}\\n\\\n\t}\\n\\\n# Conditional One-line\\n\\\nsnippet xif\\n\\\n\t${1:expression} if ${2:condition};${3}\\n\\\n# Unless conditional\\n\\\nsnippet unless\\n\\\n\tunless (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# Unless conditional One-line\\n\\\nsnippet xunless\\n\\\n\t${1:expression} unless ${2:condition};${3}\\n\\\n# Try/Except\\n\\\nsnippet eval\\n\\\n\tlocal $@;\\n\\\n\teval {\\n\\\n\t\t${1:# do something risky...}\\n\\\n\t};\\n\\\n\tif (my $e = $@) {\\n\\\n\t\t${2:# handle failure...}\\n\\\n\t}\\n\\\n# While Loop\\n\\\nsnippet wh\\n\\\n\twhile (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# While Loop One-line\\n\\\nsnippet xwh\\n\\\n\t${1:expression} while ${2:condition};${3}\\n\\\n# C-style For Loop\\n\\\nsnippet cfor\\n\\\n\tfor (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {\\n\\\n\t\t${4:# body...}\\n\\\n\t}\\n\\\n# For loop one-line\\n\\\nsnippet xfor\\n\\\n\t${1:expression} for @${2:array};${3}\\n\\\n# Foreach Loop\\n\\\nsnippet for\\n\\\n\tforeach my $${1:x} (@${2:array}) {\\n\\\n\t\t${3:# body...}\\n\\\n\t}\\n\\\n# Foreach Loop One-line\\n\\\nsnippet fore\\n\\\n\t${1:expression} foreach @${2:array};${3}\\n\\\n# Package\\n\\\nsnippet package\\n\\\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`};\\n\\\n\\n\\\n\t${2}\\n\\\n\\n\\\n\t1;\\n\\\n\\n\\\n\t__END__\\n\\\n# Package syntax perl >= 5.14\\n\\\nsnippet packagev514\\n\\\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`} ${2:0.99};\\n\\\n\\n\\\n\t${3}\\n\\\n\\n\\\n\t1;\\n\\\n\\n\\\n\t__END__\\n\\\n#moose\\n\\\nsnippet moose\\n\\\n\tuse Moose;\\n\\\n\tuse namespace::autoclean;\\n\\\n\t${1:#}BEGIN {extends '${2:ParentClass}'};\\n\\\n\\n\\\n\t${3}\\n\\\n# parent\\n\\\nsnippet parent\\n\\\n\tuse parent qw(${1:Parent Class});\\n\\\n# Read File\\n\\\nsnippet slurp\\n\\\n\tmy $${1:var} = do { local $/; open my $file, '<', \\\"${2:file}\\\"; <$file> };\\n\\\n\t${3}\\n\\\n# strict warnings\\n\\\nsnippet strwar\\n\\\n\tuse strict;\\n\\\n\tuse warnings;\\n\\\n# older versioning with perlcritic bypass\\n\\\nsnippet vers\\n\\\n\t## no critic\\n\\\n\tour $VERSION = '${1:version}';\\n\\\n\teval $VERSION;\\n\\\n\t## use critic\\n\\\n# new 'switch' like feature\\n\\\nsnippet switch\\n\\\n\tuse feature 'switch';\\n\\\n\\n\\\n# Anonymous subroutine\\n\\\nsnippet asub\\n\\\n\tsub {\\n\\\n\t \t${1:# body }\\n\\\n\t}\\n\\\n\\n\\\n\\n\\\n\\n\\\n# Begin block\\n\\\nsnippet begin\\n\\\n\tBEGIN {\\n\\\n\t\t${1:# begin body}\\n\\\n\t}\\n\\\n\\n\\\n# call package function with some parameter\\n\\\nsnippet pkgmv\\n\\\n\t__PACKAGE__->${1:package_method}(${2:var})\\n\\\n\\n\\\n# call package function without a parameter\\n\\\nsnippet pkgm\\n\\\n\t__PACKAGE__->${1:package_method}()\\n\\\n\\n\\\n# call package \\\"get_\\\" function without a parameter\\n\\\nsnippet pkget\\n\\\n\t__PACKAGE__->get_${1:package_method}()\\n\\\n\\n\\\n# call package function with a parameter\\n\\\nsnippet pkgetv\\n\\\n\t__PACKAGE__->get_${1:package_method}(${2:var})\\n\\\n\\n\\\n# complex regex\\n\\\nsnippet qrx\\n\\\n\tqr/\\n\\\n\t     ${1:regex}\\n\\\n\t/xms\\n\\\n\\n\\\n#simpler regex\\n\\\nsnippet qr/\\n\\\n\tqr/${1:regex}/x\\n\\\n\\n\\\n#given\\n\\\nsnippet given\\n\\\n\tgiven ($${1:var}) {\\n\\\n\t\t${2:# cases}\\n\\\n\t\t${3:# default}\\n\\\n\t}\\n\\\n\\n\\\n# switch-like case\\n\\\nsnippet when\\n\\\n\twhen (${1:case}) {\\n\\\n\t\t${2:# body}\\n\\\n\t}\\n\\\n\\n\\\n# hash slice\\n\\\nsnippet hslice\\n\\\n\t@{ ${1:hash}  }{ ${2:array} }\\n\\\n\\n\\\n\\n\\\n# map\\n\\\nsnippet map\\n\\\n\tmap {  ${2: body }    }  ${1: @array } ;\\n\\\n\\n\\\n\\n\\\n\\n\\\n# Pod stub\\n\\\nsnippet ppod\\n\\\n\t=head1 NAME\\n\\\n\\n\\\n\t${1:ClassName} - ${2:ShortDesc}\\n\\\n\\n\\\n\t=head1 SYNOPSIS\\n\\\n\\n\\\n\t  use $1;\\n\\\n\\n\\\n\t  ${3:# synopsis...}\\n\\\n\\n\\\n\t=head1 DESCRIPTION\\n\\\n\\n\\\n\t${4:# longer description...}\\n\\\n\\n\\\n\\n\\\n\t=head1 INTERFACE\\n\\\n\\n\\\n\\n\\\n\t=head1 DEPENDENCIES\\n\\\n\\n\\\n\\n\\\n\t=head1 SEE ALSO\\n\\\n\\n\\\n\\n\\\n# Heading for a subroutine stub\\n\\\nsnippet psub\\n\\\n\t=head2 ${1:MethodName}\\n\\\n\\n\\\n\t${2:Summary....}\\n\\\n\\n\\\n# Heading for inline subroutine pod\\n\\\nsnippet psubi\\n\\\n\t=head2 ${1:MethodName}\\n\\\n\\n\\\n\t${2:Summary...}\\n\\\n\\n\\\n\\n\\\n\t=cut\\n\\\n# inline documented subroutine\\n\\\nsnippet subpod\\n\\\n\t=head2 $1\\n\\\n\\n\\\n\tSummary of $1\\n\\\n\\n\\\n\t=cut\\n\\\n\\n\\\n\tsub ${1:subroutine_name} {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# Subroutine signature\\n\\\nsnippet parg\\n\\\n\t=over 2\\n\\\n\\n\\\n\t=item\\n\\\n\tArguments\\n\\\n\\n\\\n\\n\\\n\t=over 3\\n\\\n\\n\\\n\t=item\\n\\\n\tC<${1:DataStructure}>\\n\\\n\\n\\\n\t  ${2:Sample}\\n\\\n\\n\\\n\\n\\\n\t=back\\n\\\n\\n\\\n\\n\\\n\t=item\\n\\\n\tReturn\\n\\\n\\n\\\n\t=over 3\\n\\\n\\n\\\n\\n\\\n\t=item\\n\\\n\tC<${3:...return data}>\\n\\\n\\n\\\n\\n\\\n\t=back\\n\\\n\\n\\\n\\n\\\n\t=back\\n\\\n\\n\\\n\\n\\\n\\n\\\n# Moose has\\n\\\nsnippet has\\n\\\n\thas ${1:attribute} => (\\n\\\n\t\tis\t    => '${2:ro|rw}',\\n\\\n\t\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',\\n\\\n\t\tdefault => sub {\\n\\\n\t\t\t${4:defaultvalue}\\n\\\n\t\t},\\n\\\n\t\t${5:# other attributes}\\n\\\n\t);\\n\\\n\\n\\\n\\n\\\n# override\\n\\\nsnippet override\\n\\\n\toverride ${1:attribute} => sub {\\n\\\n\t\t${2:# my $self = shift;};\\n\\\n\t\t${3:# my ($self, $args) = @_;};\\n\\\n\t};\\n\\\n\\n\\\n\\n\\\n# use test classes\\n\\\nsnippet tuse\\n\\\n\tuse Test::More;\\n\\\n\tuse Test::Deep; # (); # uncomment to stop prototype errors\\n\\\n\tuse Test::Exception;\\n\\\n\\n\\\n# local test lib\\n\\\nsnippet tlib\\n\\\n\tuse lib qw{ ./t/lib };\\n\\\n\\n\\\n#test methods\\n\\\nsnippet tmeths\\n\\\n\t$ENV{TEST_METHOD} = '${1:regex}';\\n\\\n\\n\\\n# runtestclass\\n\\\nsnippet trunner\\n\\\n\tuse ${1:test_class};\\n\\\n\t$1->runtests();\\n\\\n\\n\\\n# Test::Class-style test\\n\\\nsnippet tsub\\n\\\n\tsub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {\\n\\\n\t\tmy $self = shift;\\n\\\n\t\t${4:#  body}\\n\\\n\\n\\\n\t}\\n\\\n\\n\\\n# Test::Routine-style test\\n\\\nsnippet trsub\\n\\\n\ttest ${1:test_name} => { description => '${2:Description of test.}'} => sub {\\n\\\n\t\tmy ($self) = @_;\\n\\\n\t\t${3:# test code}\\n\\\n\t};\\n\\\n\\n\\\n#prep test method\\n\\\nsnippet tprep\\n\\\n\tsub prep${1:number}_${2:test_case} :Test(startup) {\\n\\\n\t\tmy $self = shift;\\n\\\n\t\t${4:#  body}\\n\\\n\t}\\n\\\n\\n\\\n# cause failures to print stack trace\\n\\\nsnippet debug_trace\\n\\\n\tuse Carp; # 'verbose';\\n\\\n\t# cloak \\\"die\\\"\\n\\\n\t# warn \\\"warning\\\"\\n\\\n\t$SIG{'__DIE__'} = sub {\\n\\\n\t\trequire Carp; Carp::confess\\n\\\n\t};\\n\\\n\\n\\\n\";\n  exports.scope = \"perl\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/perl\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/snippets/perl.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,mBAAX,EAA+B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAA/B,EAA+D,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAClG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AA4VAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,MAAhB;AAEC,CAjWD;;AAiWmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,mBAAD,CAAZ,EAAmC,UAASK,CAAT,EAAY;AAC3C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/perl\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\nexports.snippetText = \"# #!/usr/bin/perl\\n\\\nsnippet #!\\n\\\n\t#!/usr/bin/env perl\\n\\\n\\n\\\n# Hash Pointer\\n\\\nsnippet .\\n\\\n\t =>\\n\\\n# Function\\n\\\nsnippet sub\\n\\\n\tsub ${1:function_name} {\\n\\\n\t\t${2:#body ...}\\n\\\n\t}\\n\\\n# Conditional\\n\\\nsnippet if\\n\\\n\tif (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# Conditional if..else\\n\\\nsnippet ife\\n\\\n\tif (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n\telse {\\n\\\n\t\t${3:# else...}\\n\\\n\t}\\n\\\n# Conditional if..elsif..else\\n\\\nsnippet ifee\\n\\\n\tif (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n\telsif (${3}) {\\n\\\n\t\t${4:# elsif...}\\n\\\n\t}\\n\\\n\telse {\\n\\\n\t\t${5:# else...}\\n\\\n\t}\\n\\\n# Conditional One-line\\n\\\nsnippet xif\\n\\\n\t${1:expression} if ${2:condition};${3}\\n\\\n# Unless conditional\\n\\\nsnippet unless\\n\\\n\tunless (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# Unless conditional One-line\\n\\\nsnippet xunless\\n\\\n\t${1:expression} unless ${2:condition};${3}\\n\\\n# Try/Except\\n\\\nsnippet eval\\n\\\n\tlocal $@;\\n\\\n\teval {\\n\\\n\t\t${1:# do something risky...}\\n\\\n\t};\\n\\\n\tif (my $e = $@) {\\n\\\n\t\t${2:# handle failure...}\\n\\\n\t}\\n\\\n# While Loop\\n\\\nsnippet wh\\n\\\n\twhile (${1}) {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# While Loop One-line\\n\\\nsnippet xwh\\n\\\n\t${1:expression} while ${2:condition};${3}\\n\\\n# C-style For Loop\\n\\\nsnippet cfor\\n\\\n\tfor (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {\\n\\\n\t\t${4:# body...}\\n\\\n\t}\\n\\\n# For loop one-line\\n\\\nsnippet xfor\\n\\\n\t${1:expression} for @${2:array};${3}\\n\\\n# Foreach Loop\\n\\\nsnippet for\\n\\\n\tforeach my $${1:x} (@${2:array}) {\\n\\\n\t\t${3:# body...}\\n\\\n\t}\\n\\\n# Foreach Loop One-line\\n\\\nsnippet fore\\n\\\n\t${1:expression} foreach @${2:array};${3}\\n\\\n# Package\\n\\\nsnippet package\\n\\\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`};\\n\\\n\\n\\\n\t${2}\\n\\\n\\n\\\n\t1;\\n\\\n\\n\\\n\t__END__\\n\\\n# Package syntax perl >= 5.14\\n\\\nsnippet packagev514\\n\\\n\tpackage ${1:`substitute(Filename('', 'Page Title'), '^.', '\\\\u&', '')`} ${2:0.99};\\n\\\n\\n\\\n\t${3}\\n\\\n\\n\\\n\t1;\\n\\\n\\n\\\n\t__END__\\n\\\n#moose\\n\\\nsnippet moose\\n\\\n\tuse Moose;\\n\\\n\tuse namespace::autoclean;\\n\\\n\t${1:#}BEGIN {extends '${2:ParentClass}'};\\n\\\n\\n\\\n\t${3}\\n\\\n# parent\\n\\\nsnippet parent\\n\\\n\tuse parent qw(${1:Parent Class});\\n\\\n# Read File\\n\\\nsnippet slurp\\n\\\n\tmy $${1:var} = do { local $/; open my $file, '<', \\\"${2:file}\\\"; <$file> };\\n\\\n\t${3}\\n\\\n# strict warnings\\n\\\nsnippet strwar\\n\\\n\tuse strict;\\n\\\n\tuse warnings;\\n\\\n# older versioning with perlcritic bypass\\n\\\nsnippet vers\\n\\\n\t## no critic\\n\\\n\tour $VERSION = '${1:version}';\\n\\\n\teval $VERSION;\\n\\\n\t## use critic\\n\\\n# new 'switch' like feature\\n\\\nsnippet switch\\n\\\n\tuse feature 'switch';\\n\\\n\\n\\\n# Anonymous subroutine\\n\\\nsnippet asub\\n\\\n\tsub {\\n\\\n\t \t${1:# body }\\n\\\n\t}\\n\\\n\\n\\\n\\n\\\n\\n\\\n# Begin block\\n\\\nsnippet begin\\n\\\n\tBEGIN {\\n\\\n\t\t${1:# begin body}\\n\\\n\t}\\n\\\n\\n\\\n# call package function with some parameter\\n\\\nsnippet pkgmv\\n\\\n\t__PACKAGE__->${1:package_method}(${2:var})\\n\\\n\\n\\\n# call package function without a parameter\\n\\\nsnippet pkgm\\n\\\n\t__PACKAGE__->${1:package_method}()\\n\\\n\\n\\\n# call package \\\"get_\\\" function without a parameter\\n\\\nsnippet pkget\\n\\\n\t__PACKAGE__->get_${1:package_method}()\\n\\\n\\n\\\n# call package function with a parameter\\n\\\nsnippet pkgetv\\n\\\n\t__PACKAGE__->get_${1:package_method}(${2:var})\\n\\\n\\n\\\n# complex regex\\n\\\nsnippet qrx\\n\\\n\tqr/\\n\\\n\t     ${1:regex}\\n\\\n\t/xms\\n\\\n\\n\\\n#simpler regex\\n\\\nsnippet qr/\\n\\\n\tqr/${1:regex}/x\\n\\\n\\n\\\n#given\\n\\\nsnippet given\\n\\\n\tgiven ($${1:var}) {\\n\\\n\t\t${2:# cases}\\n\\\n\t\t${3:# default}\\n\\\n\t}\\n\\\n\\n\\\n# switch-like case\\n\\\nsnippet when\\n\\\n\twhen (${1:case}) {\\n\\\n\t\t${2:# body}\\n\\\n\t}\\n\\\n\\n\\\n# hash slice\\n\\\nsnippet hslice\\n\\\n\t@{ ${1:hash}  }{ ${2:array} }\\n\\\n\\n\\\n\\n\\\n# map\\n\\\nsnippet map\\n\\\n\tmap {  ${2: body }    }  ${1: @array } ;\\n\\\n\\n\\\n\\n\\\n\\n\\\n# Pod stub\\n\\\nsnippet ppod\\n\\\n\t=head1 NAME\\n\\\n\\n\\\n\t${1:ClassName} - ${2:ShortDesc}\\n\\\n\\n\\\n\t=head1 SYNOPSIS\\n\\\n\\n\\\n\t  use $1;\\n\\\n\\n\\\n\t  ${3:# synopsis...}\\n\\\n\\n\\\n\t=head1 DESCRIPTION\\n\\\n\\n\\\n\t${4:# longer description...}\\n\\\n\\n\\\n\\n\\\n\t=head1 INTERFACE\\n\\\n\\n\\\n\\n\\\n\t=head1 DEPENDENCIES\\n\\\n\\n\\\n\\n\\\n\t=head1 SEE ALSO\\n\\\n\\n\\\n\\n\\\n# Heading for a subroutine stub\\n\\\nsnippet psub\\n\\\n\t=head2 ${1:MethodName}\\n\\\n\\n\\\n\t${2:Summary....}\\n\\\n\\n\\\n# Heading for inline subroutine pod\\n\\\nsnippet psubi\\n\\\n\t=head2 ${1:MethodName}\\n\\\n\\n\\\n\t${2:Summary...}\\n\\\n\\n\\\n\\n\\\n\t=cut\\n\\\n# inline documented subroutine\\n\\\nsnippet subpod\\n\\\n\t=head2 $1\\n\\\n\\n\\\n\tSummary of $1\\n\\\n\\n\\\n\t=cut\\n\\\n\\n\\\n\tsub ${1:subroutine_name} {\\n\\\n\t\t${2:# body...}\\n\\\n\t}\\n\\\n# Subroutine signature\\n\\\nsnippet parg\\n\\\n\t=over 2\\n\\\n\\n\\\n\t=item\\n\\\n\tArguments\\n\\\n\\n\\\n\\n\\\n\t=over 3\\n\\\n\\n\\\n\t=item\\n\\\n\tC<${1:DataStructure}>\\n\\\n\\n\\\n\t  ${2:Sample}\\n\\\n\\n\\\n\\n\\\n\t=back\\n\\\n\\n\\\n\\n\\\n\t=item\\n\\\n\tReturn\\n\\\n\\n\\\n\t=over 3\\n\\\n\\n\\\n\\n\\\n\t=item\\n\\\n\tC<${3:...return data}>\\n\\\n\\n\\\n\\n\\\n\t=back\\n\\\n\\n\\\n\\n\\\n\t=back\\n\\\n\\n\\\n\\n\\\n\\n\\\n# Moose has\\n\\\nsnippet has\\n\\\n\thas ${1:attribute} => (\\n\\\n\t\tis\t    => '${2:ro|rw}',\\n\\\n\t\tisa \t=> '${3:Str|Int|HashRef|ArrayRef|etc}',\\n\\\n\t\tdefault => sub {\\n\\\n\t\t\t${4:defaultvalue}\\n\\\n\t\t},\\n\\\n\t\t${5:# other attributes}\\n\\\n\t);\\n\\\n\\n\\\n\\n\\\n# override\\n\\\nsnippet override\\n\\\n\toverride ${1:attribute} => sub {\\n\\\n\t\t${2:# my $self = shift;};\\n\\\n\t\t${3:# my ($self, $args) = @_;};\\n\\\n\t};\\n\\\n\\n\\\n\\n\\\n# use test classes\\n\\\nsnippet tuse\\n\\\n\tuse Test::More;\\n\\\n\tuse Test::Deep; # (); # uncomment to stop prototype errors\\n\\\n\tuse Test::Exception;\\n\\\n\\n\\\n# local test lib\\n\\\nsnippet tlib\\n\\\n\tuse lib qw{ ./t/lib };\\n\\\n\\n\\\n#test methods\\n\\\nsnippet tmeths\\n\\\n\t$ENV{TEST_METHOD} = '${1:regex}';\\n\\\n\\n\\\n# runtestclass\\n\\\nsnippet trunner\\n\\\n\tuse ${1:test_class};\\n\\\n\t$1->runtests();\\n\\\n\\n\\\n# Test::Class-style test\\n\\\nsnippet tsub\\n\\\n\tsub t${1:number}_${2:test_case} :Test(${3:num_of_tests}) {\\n\\\n\t\tmy $self = shift;\\n\\\n\t\t${4:#  body}\\n\\\n\\n\\\n\t}\\n\\\n\\n\\\n# Test::Routine-style test\\n\\\nsnippet trsub\\n\\\n\ttest ${1:test_name} => { description => '${2:Description of test.}'} => sub {\\n\\\n\t\tmy ($self) = @_;\\n\\\n\t\t${3:# test code}\\n\\\n\t};\\n\\\n\\n\\\n#prep test method\\n\\\nsnippet tprep\\n\\\n\tsub prep${1:number}_${2:test_case} :Test(startup) {\\n\\\n\t\tmy $self = shift;\\n\\\n\t\t${4:#  body}\\n\\\n\t}\\n\\\n\\n\\\n# cause failures to print stack trace\\n\\\nsnippet debug_trace\\n\\\n\tuse Carp; # 'verbose';\\n\\\n\t# cloak \\\"die\\\"\\n\\\n\t# warn \\\"warning\\\"\\n\\\n\t$SIG{'__DIE__'} = sub {\\n\\\n\t\trequire Carp; Carp::confess\\n\\\n\t};\\n\\\n\\n\\\n\";\nexports.scope = \"perl\";\n\n});                (function() {\n                    ace.require([\"ace/snippets/perl\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}