{"ast":null,"code":"ace.define(\"ace/mode/haskell_cabal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CabalHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"^\\\\s*--.*$\"\n      }, {\n        token: [\"keyword\"],\n        regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n      }, {\n        token: \"markup.heading\",\n        regex: /^(\\w.*)$/\n      }]\n    };\n  };\n\n  oop.inherits(CabalHighlightRules, TextHighlightRules);\n  exports.CabalHighlightRules = CabalHighlightRules;\n});\nace.define(\"ace/mode/folding/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.isHeading = function (session, row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row == 0 || token && token.type.lastIndexOf(heading, 0) === 0;\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      if (this.isHeading(session, row)) {\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !/^\\s*$/.test(session.getLine(row))) {\n        var maxRow = session.getLength();\n\n        while (++row < maxRow) {\n          if (!/^\\s*$/.test(session.getLine(row))) {\n            break;\n          }\n        }\n\n        if (row == maxRow || this.isHeading(session, row)) {\n          return \"end\";\n        }\n      }\n\n      return \"\";\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      if (this.isHeading(session, row)) {\n        while (++row < maxRow) {\n          if (this.isHeading(session, row)) {\n            row--;\n            break;\n          }\n        }\n\n        endRow = row;\n\n        if (endRow > startRow) {\n          while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow))) endRow--;\n        }\n\n        if (endRow > startRow) {\n          var endColumn = session.getLine(endRow).length;\n          return new Range(startRow, startColumn, endRow, endColumn);\n        }\n      } else if (this.getFoldWidget(session, foldStyle, row) === \"end\") {\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n\n        while (--row >= 0) {\n          if (this.isHeading(session, row)) {\n            break;\n          }\n        }\n\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/haskell_cabal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/haskell_cabal_highlight_rules\", \"ace/mode/folding/haskell_cabal\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var CabalHighlightRules = require(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\n\n  var FoldMode = require(\"./folding/haskell_cabal\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/haskell_cabal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-haskell_cabal.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","CabalHighlightRules","$rules","token","regex","inherits","BaseFoldMode","FoldMode","Range","isHeading","session","row","heading","getTokens","type","lastIndexOf","getFoldWidget","foldStyle","test","getLine","maxRow","getLength","getFoldWidgetRange","line","startColumn","length","startRow","endRow","endColumn","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/haskell_cabal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar CabalHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"^\\\\s*--.*$\"\n            }, {\n                token: [\"keyword\"],\n                regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n            }, {\n                token : \"markup.heading\",\n                regex : /^(\\w.*)$/\n            }\n        ]};\n\n};\n\noop.inherits(CabalHighlightRules, TextHighlightRules);\n\nexports.CabalHighlightRules = CabalHighlightRules;\n});\n\nace.define(\"ace/mode/folding/haskell_cabal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n  this.isHeading = function (session,row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row==0 || (token && token.type.lastIndexOf(heading, 0) === 0);\n  };\n\n  this.getFoldWidget = function(session, foldStyle, row) {\n      if (this.isHeading(session,row)){\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !(/^\\s*$/.test(session.getLine(row)))){\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n          if (!(/^\\s*$/.test(session.getLine(row)))){\n              break;\n          }\n        }\n        if (row==maxRow || this.isHeading(session,row)){\n          return \"end\";\n        }\n      }\n      return \"\";\n  };\n\n\n  this.getFoldWidgetRange = function(session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      if (this.isHeading(session,row)) {\n          while (++row < maxRow) {\n              if (this.isHeading(session,row)){\n                row--;\n                break;\n              }\n          }\n\n          endRow = row;\n          if (endRow > startRow) {\n              while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow)))\n                  endRow--;\n          }\n\n          if (endRow > startRow) {\n              var endColumn = session.getLine(endRow).length;\n              return new Range(startRow, startColumn, endRow, endColumn);\n          }\n      } else if (this.getFoldWidget(session, foldStyle, row)===\"end\"){\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n        while (--row>=0){\n          if (this.isHeading(session,row)){\n            break;\n          }\n        }\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haskell_cabal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_cabal_highlight_rules\",\"ace/mode/folding/haskell_cabal\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CabalHighlightRules = require(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\nvar FoldMode = require(\"./folding/haskell_cabal\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/haskell_cabal\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}