{"ast":null,"code":"ace.define(\"ace/snippets/c_cpp\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"## STL Collections\\n\\\n# std::array\\n\\\nsnippet array\\n\\\n\tstd::array<${1:T}, ${2:N}> ${3};${4}\\n\\\n# std::vector\\n\\\nsnippet vector\\n\\\n\tstd::vector<${1:T}> ${2};${3}\\n\\\n# std::deque\\n\\\nsnippet deque\\n\\\n\tstd::deque<${1:T}> ${2};${3}\\n\\\n# std::forward_list\\n\\\nsnippet flist\\n\\\n\tstd::forward_list<${1:T}> ${2};${3}\\n\\\n# std::list\\n\\\nsnippet list\\n\\\n\tstd::list<${1:T}> ${2};${3}\\n\\\n# std::set\\n\\\nsnippet set\\n\\\n\tstd::set<${1:T}> ${2};${3}\\n\\\n# std::map\\n\\\nsnippet map\\n\\\n\tstd::map<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::multiset\\n\\\nsnippet mset\\n\\\n\tstd::multiset<${1:T}> ${2};${3}\\n\\\n# std::multimap\\n\\\nsnippet mmap\\n\\\n\tstd::multimap<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::unordered_set\\n\\\nsnippet uset\\n\\\n\tstd::unordered_set<${1:T}> ${2};${3}\\n\\\n# std::unordered_map\\n\\\nsnippet umap\\n\\\n\tstd::unordered_map<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::unordered_multiset\\n\\\nsnippet umset\\n\\\n\tstd::unordered_multiset<${1:T}> ${2};${3}\\n\\\n# std::unordered_multimap\\n\\\nsnippet ummap\\n\\\n\tstd::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::stack\\n\\\nsnippet stack\\n\\\n\tstd::stack<${1:T}> ${2};${3}\\n\\\n# std::queue\\n\\\nsnippet queue\\n\\\n\tstd::queue<${1:T}> ${2};${3}\\n\\\n# std::priority_queue\\n\\\nsnippet pqueue\\n\\\n\tstd::priority_queue<${1:T}> ${2};${3}\\n\\\n##\\n\\\n## Access Modifiers\\n\\\n# private\\n\\\nsnippet pri\\n\\\n\tprivate\\n\\\n# protected\\n\\\nsnippet pro\\n\\\n\tprotected\\n\\\n# public\\n\\\nsnippet pub\\n\\\n\tpublic\\n\\\n# friend\\n\\\nsnippet fr\\n\\\n\tfriend\\n\\\n# mutable\\n\\\nsnippet mu\\n\\\n\tmutable\\n\\\n## \\n\\\n## Class\\n\\\n# class\\n\\\nsnippet cl\\n\\\n\tclass ${1:`Filename('$1', 'name')`} \\n\\\n\t{\\n\\\n\tpublic:\\n\\\n\t\t$1(${2});\\n\\\n\t\t~$1();\\n\\\n\\n\\\n\tprivate:\\n\\\n\t\t${3:/* data */}\\n\\\n\t};\\n\\\n# member function implementation\\n\\\nsnippet mfun\\n\\\n\t${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {\\n\\\n\t\t${5:/* code */}\\n\\\n\t}\\n\\\n# namespace\\n\\\nsnippet ns\\n\\\n\tnamespace ${1:`Filename('', 'my')`} {\\n\\\n\t\t${2}\\n\\\n\t} /* namespace $1 */\\n\\\n##\\n\\\n## Input/Output\\n\\\n# std::cout\\n\\\nsnippet cout\\n\\\n\tstd::cout << ${1} << std::endl;${2}\\n\\\n# std::cin\\n\\\nsnippet cin\\n\\\n\tstd::cin >> ${1};${2}\\n\\\n##\\n\\\n## Iteration\\n\\\n# for i \\n\\\nsnippet fori\\n\\\n\tfor (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\\n\\\n\t\t${4:/* code */}\\n\\\n\t}${5}\\n\\\n\\n\\\n# foreach\\n\\\nsnippet fore\\n\\\n\tfor (${1:auto} ${2:i} : ${3:container}) {\\n\\\n\t\t${4:/* code */}\\n\\\n\t}${5}\\n\\\n# iterator\\n\\\nsnippet iter\\n\\\n\tfor (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {\\n\\\n\t\t${6}\\n\\\n\t}${7}\\n\\\n\\n\\\n# auto iterator\\n\\\nsnippet itera\\n\\\n\tfor (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {\\n\\\n\t\t${2:std::cout << *$1 << std::endl;}\\n\\\n\t}${3}\\n\\\n##\\n\\\n## Lambdas\\n\\\n# lamda (one line)\\n\\\nsnippet ld\\n\\\n\t[${1}](${2}){${3:/* code */}}${4}\\n\\\n# lambda (multi-line)\\n\\\nsnippet lld\\n\\\n\t[${1}](${2}){\\n\\\n\t\t${3:/* code */}\\n\\\n\t}${4}\\n\\\n\";\n  exports.scope = \"c_cpp\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/c_cpp\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/snippets/c_cpp.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,oBAAX,EAAgC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAhC,EAAgE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACnG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AAoIAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,OAAhB;AAEC,CAzID;;AAyImB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,oBAAD,CAAZ,EAAoC,UAASK,CAAT,EAAY;AAC5C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/c_cpp\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\nexports.snippetText = \"## STL Collections\\n\\\n# std::array\\n\\\nsnippet array\\n\\\n\tstd::array<${1:T}, ${2:N}> ${3};${4}\\n\\\n# std::vector\\n\\\nsnippet vector\\n\\\n\tstd::vector<${1:T}> ${2};${3}\\n\\\n# std::deque\\n\\\nsnippet deque\\n\\\n\tstd::deque<${1:T}> ${2};${3}\\n\\\n# std::forward_list\\n\\\nsnippet flist\\n\\\n\tstd::forward_list<${1:T}> ${2};${3}\\n\\\n# std::list\\n\\\nsnippet list\\n\\\n\tstd::list<${1:T}> ${2};${3}\\n\\\n# std::set\\n\\\nsnippet set\\n\\\n\tstd::set<${1:T}> ${2};${3}\\n\\\n# std::map\\n\\\nsnippet map\\n\\\n\tstd::map<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::multiset\\n\\\nsnippet mset\\n\\\n\tstd::multiset<${1:T}> ${2};${3}\\n\\\n# std::multimap\\n\\\nsnippet mmap\\n\\\n\tstd::multimap<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::unordered_set\\n\\\nsnippet uset\\n\\\n\tstd::unordered_set<${1:T}> ${2};${3}\\n\\\n# std::unordered_map\\n\\\nsnippet umap\\n\\\n\tstd::unordered_map<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::unordered_multiset\\n\\\nsnippet umset\\n\\\n\tstd::unordered_multiset<${1:T}> ${2};${3}\\n\\\n# std::unordered_multimap\\n\\\nsnippet ummap\\n\\\n\tstd::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}\\n\\\n# std::stack\\n\\\nsnippet stack\\n\\\n\tstd::stack<${1:T}> ${2};${3}\\n\\\n# std::queue\\n\\\nsnippet queue\\n\\\n\tstd::queue<${1:T}> ${2};${3}\\n\\\n# std::priority_queue\\n\\\nsnippet pqueue\\n\\\n\tstd::priority_queue<${1:T}> ${2};${3}\\n\\\n##\\n\\\n## Access Modifiers\\n\\\n# private\\n\\\nsnippet pri\\n\\\n\tprivate\\n\\\n# protected\\n\\\nsnippet pro\\n\\\n\tprotected\\n\\\n# public\\n\\\nsnippet pub\\n\\\n\tpublic\\n\\\n# friend\\n\\\nsnippet fr\\n\\\n\tfriend\\n\\\n# mutable\\n\\\nsnippet mu\\n\\\n\tmutable\\n\\\n## \\n\\\n## Class\\n\\\n# class\\n\\\nsnippet cl\\n\\\n\tclass ${1:`Filename('$1', 'name')`} \\n\\\n\t{\\n\\\n\tpublic:\\n\\\n\t\t$1(${2});\\n\\\n\t\t~$1();\\n\\\n\\n\\\n\tprivate:\\n\\\n\t\t${3:/* data */}\\n\\\n\t};\\n\\\n# member function implementation\\n\\\nsnippet mfun\\n\\\n\t${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {\\n\\\n\t\t${5:/* code */}\\n\\\n\t}\\n\\\n# namespace\\n\\\nsnippet ns\\n\\\n\tnamespace ${1:`Filename('', 'my')`} {\\n\\\n\t\t${2}\\n\\\n\t} /* namespace $1 */\\n\\\n##\\n\\\n## Input/Output\\n\\\n# std::cout\\n\\\nsnippet cout\\n\\\n\tstd::cout << ${1} << std::endl;${2}\\n\\\n# std::cin\\n\\\nsnippet cin\\n\\\n\tstd::cin >> ${1};${2}\\n\\\n##\\n\\\n## Iteration\\n\\\n# for i \\n\\\nsnippet fori\\n\\\n\tfor (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {\\n\\\n\t\t${4:/* code */}\\n\\\n\t}${5}\\n\\\n\\n\\\n# foreach\\n\\\nsnippet fore\\n\\\n\tfor (${1:auto} ${2:i} : ${3:container}) {\\n\\\n\t\t${4:/* code */}\\n\\\n\t}${5}\\n\\\n# iterator\\n\\\nsnippet iter\\n\\\n\tfor (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {\\n\\\n\t\t${6}\\n\\\n\t}${7}\\n\\\n\\n\\\n# auto iterator\\n\\\nsnippet itera\\n\\\n\tfor (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {\\n\\\n\t\t${2:std::cout << *$1 << std::endl;}\\n\\\n\t}${3}\\n\\\n##\\n\\\n## Lambdas\\n\\\n# lamda (one line)\\n\\\nsnippet ld\\n\\\n\t[${1}](${2}){${3:/* code */}}${4}\\n\\\n# lambda (multi-line)\\n\\\nsnippet lld\\n\\\n\t[${1}](${2}){\\n\\\n\t\t${3:/* code */}\\n\\\n\t}${4}\\n\\\n\";\nexports.scope = \"c_cpp\";\n\n});                (function() {\n                    ace.require([\"ace/snippets/c_cpp\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}