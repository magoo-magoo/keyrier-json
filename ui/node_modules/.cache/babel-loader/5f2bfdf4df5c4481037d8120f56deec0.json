{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/components/output/TableAdvancedOptions.tsx\";\nimport { toggleOutputTableModal, updateTableColumns, updateTableGroupBy } from 'actions/actions';\nimport { withErrorBoundary } from 'components/common/ErrorBoundary';\nimport Loading from 'components/common/Loading';\nimport { withPerformance } from 'core/logging/performance';\nimport { useToggleState } from 'hooks/hooks';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { lazy, memo, Suspense, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Collapse } from 'reactstrap';\nimport { getColumns, getdisplayedColumns, getGroupBy, getOutputarray } from 'store/selectors';\nexport const ReactSelect = lazy(() => import(\n/* webpackChunkName: \"react-select\" */\n'react-select'));\n\nconst TableAdvancedOptions = ({\n  onColumnsChange,\n  columns,\n  setTableGroupBy,\n  data,\n  displayedColumns,\n  toggleModal\n}) => {\n  const [optionsCollapsed, switchOptionsCollapsed] = useToggleState();\n  const handleColumnChange = useCallback(cols => {\n    if (cols instanceof Array) {\n      const mapped = cols.map(c => c.value ? c.value : '');\n      onColumnsChange(mapped);\n    }\n  }, [onColumnsChange]);\n  const handleExport = useCallback(async () => {\n    const xlsx = await import(\n    /* webpackChunkName: \"xlsx.js\" */\n    'xlsx');\n    const workBook = xlsx.utils.book_new();\n    const workSheet = xlsx.utils.json_to_sheet(data.map(x => _.pick(x, displayedColumns)), {\n      header: displayedColumns\n    });\n    xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json');\n    xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`);\n  }, [displayedColumns, data]);\n  const handleGroupChange = useCallback(e => setTableGroupBy([e.target.value]), [setTableGroupBy]);\n\n  if (columns.length <= 0) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n  const columnOptions = columns.map(k => ({\n    value: k,\n    label: k\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row py-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: 'float-left col my-1',\n    color: \"primary\",\n    block: true,\n    onClick: switchOptionsCollapsed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, optionsCollapsed ? 'Hide advanced options' : 'Advanced options'), /*#__PURE__*/React.createElement(Collapse, {\n    isOpen: optionsCollapsed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    className: \"form-control-lg form-control\",\n    name: \"select\",\n    id: \"groupingSelect\",\n    onChange: handleGroupChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: 'Group by...',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, \"Group by...\"), displayedColumns.map(key => /*#__PURE__*/React.createElement(\"option\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 29\n    }\n  }, key))), /*#__PURE__*/React.createElement(Button, {\n    className: \"col my-1\",\n    color: 'success',\n    onClick: handleExport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }, \"Export to Excel (.xlsx)\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"col my-1\",\n    block: true,\n    color: \"dark\",\n    outline: true,\n    onClick: toggleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Display results table fullscreen\"), /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(Loading, {\n      componentName: \"ReactSelect\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 41\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ReactSelect, {\n    options: columnOptions,\n    value: displayedColumns.map(k => ({\n      value: k,\n      label: k\n    })),\n    isMulti: true,\n    onChange: handleColumnChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  })))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    data: getOutputarray(state),\n    displayedColumns: getdisplayedColumns(state),\n    columns: getColumns(state),\n    groupBy: getGroupBy(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onColumnsChange: updateTableColumns,\n  setTableGroupBy: updateTableGroupBy,\n  toggleModal: toggleOutputTableModal\n})(memo(withErrorBoundary(withPerformance(TableAdvancedOptions, 'TableAdvancedOptions'))));","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/components/output/TableAdvancedOptions.tsx"],"names":["toggleOutputTableModal","updateTableColumns","updateTableGroupBy","withErrorBoundary","Loading","withPerformance","useToggleState","_","React","lazy","memo","Suspense","useCallback","connect","Button","Collapse","getColumns","getdisplayedColumns","getGroupBy","getOutputarray","ReactSelect","TableAdvancedOptions","onColumnsChange","columns","setTableGroupBy","data","displayedColumns","toggleModal","optionsCollapsed","switchOptionsCollapsed","handleColumnChange","cols","Array","mapped","map","c","value","handleExport","xlsx","workBook","utils","book_new","workSheet","json_to_sheet","x","pick","header","book_append_sheet","writeFile","Date","toISOString","handleGroupChange","e","target","length","columnOptions","k","label","key","mapStateToProps","state","groupBy"],"mappings":"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","sourcesContent":["import { toggleOutputTableModal, updateTableColumns, updateTableGroupBy } from 'actions/actions'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport Loading from 'components/common/Loading'\nimport { withPerformance } from 'core/logging/performance'\nimport { useToggleState } from 'hooks/hooks'\nimport _ from 'lodash'\nimport * as React from 'react'\nimport { ChangeEvent, FC, lazy, memo, Suspense, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { Button, Collapse } from 'reactstrap'\nimport { itemType, RootState } from 'state/State'\nimport { getColumns, getdisplayedColumns, getGroupBy, getOutputarray } from 'store/selectors'\nimport { ValueType } from 'react-select'\n\nexport const ReactSelect = lazy(() => import(/* webpackChunkName: \"react-select\" */ 'react-select'))\n\ninterface Props {\n    data: itemType[]\n    displayedColumns: string[]\n    groupBy: string[]\n    columns: string[]\n    onColumnsChange: typeof updateTableColumns\n    setTableGroupBy: typeof updateTableGroupBy\n    toggleModal: typeof toggleOutputTableModal\n}\n\nconst TableAdvancedOptions: FC<Props> = ({\n    onColumnsChange,\n    columns,\n    setTableGroupBy,\n    data,\n    displayedColumns,\n    toggleModal,\n}) => {\n    const [optionsCollapsed, switchOptionsCollapsed] = useToggleState()\n\n    const handleColumnChange = useCallback(\n        (cols: ValueType<{}> | undefined | null) => {\n            if (cols instanceof Array) {\n                const mapped = cols.map((c: { value?: string }) => (c.value ? c.value : ''))\n                onColumnsChange(mapped)\n            }\n        },\n        [onColumnsChange]\n    )\n\n    const handleExport = useCallback(async () => {\n        const xlsx = await import(/* webpackChunkName: \"xlsx.js\" */ 'xlsx')\n        const workBook = xlsx.utils.book_new()\n        const workSheet = xlsx.utils.json_to_sheet(\n            data.map(x => _.pick(x, displayedColumns)),\n            {\n                header: displayedColumns,\n            }\n        )\n        xlsx.utils.book_append_sheet(workBook, workSheet, 'keyrier-json')\n        xlsx.writeFile(workBook, `export-${new Date().toISOString()}.xlsx`)\n    }, [displayedColumns, data])\n\n    const handleGroupChange = useCallback((e: ChangeEvent<HTMLSelectElement>) => setTableGroupBy([e.target.value]), [\n        setTableGroupBy,\n    ])\n\n    if (columns.length <= 0) {\n        return <></>\n    }\n\n    const columnOptions = columns.map(k => ({ value: k, label: k }))\n\n    return (\n        <div className=\"row py-1\">\n            <div className=\"col-2\">\n                <Button className={'float-left col my-1'} color=\"primary\" block={true} onClick={switchOptionsCollapsed}>\n                    {optionsCollapsed ? 'Hide advanced options' : 'Advanced options'}\n                </Button>\n                <Collapse isOpen={optionsCollapsed}>\n                    <select\n                        className=\"form-control-lg form-control\"\n                        name=\"select\"\n                        id=\"groupingSelect\"\n                        onChange={handleGroupChange}\n                    >\n                        <option key={'Group by...'}>Group by...</option>\n                        {displayedColumns.map(key => (\n                            <option key={key}>{key}</option>\n                        ))}\n                    </select>\n                    <Button className=\"col my-1\" color={'success'} onClick={handleExport}>\n                        Export to Excel (.xlsx)\n                    </Button>\n                    <Button className=\"col my-1\" block={true} color=\"dark\" outline={true} onClick={toggleModal}>\n                        Display results table fullscreen\n                    </Button>\n                    <Suspense fallback={<Loading componentName=\"ReactSelect\" />}>\n                        <ReactSelect\n                            options={columnOptions}\n                            value={displayedColumns.map(k => ({\n                                value: k,\n                                label: k,\n                            }))}\n                            isMulti={true}\n                            onChange={handleColumnChange}\n                        />\n                    </Suspense>\n                </Collapse>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        data: getOutputarray(state),\n        displayedColumns: getdisplayedColumns(state),\n        columns: getColumns(state),\n        groupBy: getGroupBy(state),\n    }\n}\n\nexport default connect(mapStateToProps, {\n    onColumnsChange: updateTableColumns,\n    setTableGroupBy: updateTableGroupBy,\n    toggleModal: toggleOutputTableModal,\n})(memo(withErrorBoundary(withPerformance(TableAdvancedOptions, 'TableAdvancedOptions'))))\n"]},"metadata":{},"sourceType":"module"}