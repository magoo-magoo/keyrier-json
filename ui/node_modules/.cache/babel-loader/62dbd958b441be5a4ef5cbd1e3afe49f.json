{"ast":null,"code":"/* eslint-disable */\nimport * as React from 'react';\nimport { off, on, isDeepEqual } from './util';\nvar useState = React.useState,\n    useEffect = React.useEffect;\nvar nav = typeof navigator === 'object' ? navigator : undefined;\nvar isBatteryApiSupported = nav && typeof nav.getBattery === 'function';\n\nfunction useBatteryMock() {\n  return {\n    isSupported: false\n  };\n}\n\nfunction useBattery() {\n  var _a = useState({\n    isSupported: true,\n    fetched: false\n  }),\n      state = _a[0],\n      setState = _a[1];\n\n  useEffect(function () {\n    var isMounted = true;\n    var battery = null;\n\n    var handleChange = function () {\n      if (!isMounted || !battery) {\n        return;\n      }\n\n      var newState = {\n        isSupported: true,\n        fetched: true,\n        level: battery.level,\n        charging: battery.charging,\n        dischargingTime: battery.dischargingTime,\n        chargingTime: battery.chargingTime\n      };\n      !isDeepEqual(state, newState) && setState(newState);\n    };\n\n    nav.getBattery().then(function (bat) {\n      if (!isMounted) {\n        return;\n      }\n\n      battery = bat;\n      on(battery, 'chargingchange', handleChange);\n      on(battery, 'chargingtimechange', handleChange);\n      on(battery, 'dischargingtimechange', handleChange);\n      on(battery, 'levelchange', handleChange);\n      handleChange();\n    });\n    return function () {\n      isMounted = false;\n\n      if (battery) {\n        off(battery, 'chargingchange', handleChange);\n        off(battery, 'chargingtimechange', handleChange);\n        off(battery, 'dischargingtimechange', handleChange);\n        off(battery, 'levelchange', handleChange);\n      }\n    };\n  }, []);\n  return state;\n}\n\nexport default isBatteryApiSupported ? useBattery : useBatteryMock;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/react-use/esm/useBattery.js"],"names":["React","off","on","isDeepEqual","useState","useEffect","nav","navigator","undefined","isBatteryApiSupported","getBattery","useBatteryMock","isSupported","useBattery","_a","fetched","state","setState","isMounted","battery","handleChange","newState","level","charging","dischargingTime","chargingTime","then","bat"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,GAAT,EAAcC,EAAd,EAAkBC,WAAlB,QAAqC,QAArC;AACA,IAAIC,QAAQ,GAAGJ,KAAK,CAACI,QAArB;AAAA,IAA+BC,SAAS,GAAGL,KAAK,CAACK,SAAjD;AACA,IAAIC,GAAG,GAAG,OAAOC,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CC,SAAtD;AACA,IAAIC,qBAAqB,GAAGH,GAAG,IAAI,OAAOA,GAAG,CAACI,UAAX,KAA0B,UAA7D;;AACA,SAASC,cAAT,GAA0B;AACtB,SAAO;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAP;AACH;;AACD,SAASC,UAAT,GAAsB;AAClB,MAAIC,EAAE,GAAGV,QAAQ,CAAC;AAAEQ,IAAAA,WAAW,EAAE,IAAf;AAAqBG,IAAAA,OAAO,EAAE;AAA9B,GAAD,CAAjB;AAAA,MAA0DC,KAAK,GAAGF,EAAE,CAAC,CAAD,CAApE;AAAA,MAAyEG,QAAQ,GAAGH,EAAE,CAAC,CAAD,CAAtF;;AACAT,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIa,SAAS,GAAG,IAAhB;AACA,QAAIC,OAAO,GAAG,IAAd;;AACA,QAAIC,YAAY,GAAG,YAAY;AAC3B,UAAI,CAACF,SAAD,IAAc,CAACC,OAAnB,EAA4B;AACxB;AACH;;AACD,UAAIE,QAAQ,GAAG;AACXT,QAAAA,WAAW,EAAE,IADF;AAEXG,QAAAA,OAAO,EAAE,IAFE;AAGXO,QAAAA,KAAK,EAAEH,OAAO,CAACG,KAHJ;AAIXC,QAAAA,QAAQ,EAAEJ,OAAO,CAACI,QAJP;AAKXC,QAAAA,eAAe,EAAEL,OAAO,CAACK,eALd;AAMXC,QAAAA,YAAY,EAAEN,OAAO,CAACM;AANX,OAAf;AAQA,OAACtB,WAAW,CAACa,KAAD,EAAQK,QAAR,CAAZ,IAAiCJ,QAAQ,CAACI,QAAD,CAAzC;AACH,KAbD;;AAcAf,IAAAA,GAAG,CAACI,UAAJ,GAAiBgB,IAAjB,CAAsB,UAAUC,GAAV,EAAe;AACjC,UAAI,CAACT,SAAL,EAAgB;AACZ;AACH;;AACDC,MAAAA,OAAO,GAAGQ,GAAV;AACAzB,MAAAA,EAAE,CAACiB,OAAD,EAAU,gBAAV,EAA4BC,YAA5B,CAAF;AACAlB,MAAAA,EAAE,CAACiB,OAAD,EAAU,oBAAV,EAAgCC,YAAhC,CAAF;AACAlB,MAAAA,EAAE,CAACiB,OAAD,EAAU,uBAAV,EAAmCC,YAAnC,CAAF;AACAlB,MAAAA,EAAE,CAACiB,OAAD,EAAU,aAAV,EAAyBC,YAAzB,CAAF;AACAA,MAAAA,YAAY;AACf,KAVD;AAWA,WAAO,YAAY;AACfF,MAAAA,SAAS,GAAG,KAAZ;;AACA,UAAIC,OAAJ,EAAa;AACTlB,QAAAA,GAAG,CAACkB,OAAD,EAAU,gBAAV,EAA4BC,YAA5B,CAAH;AACAnB,QAAAA,GAAG,CAACkB,OAAD,EAAU,oBAAV,EAAgCC,YAAhC,CAAH;AACAnB,QAAAA,GAAG,CAACkB,OAAD,EAAU,uBAAV,EAAmCC,YAAnC,CAAH;AACAnB,QAAAA,GAAG,CAACkB,OAAD,EAAU,aAAV,EAAyBC,YAAzB,CAAH;AACH;AACJ,KARD;AASH,GArCQ,EAqCN,EArCM,CAAT;AAsCA,SAAOJ,KAAP;AACH;;AACD,eAAeP,qBAAqB,GAAGI,UAAH,GAAgBF,cAApD","sourcesContent":["/* eslint-disable */\nimport * as React from 'react';\nimport { off, on, isDeepEqual } from './util';\nvar useState = React.useState, useEffect = React.useEffect;\nvar nav = typeof navigator === 'object' ? navigator : undefined;\nvar isBatteryApiSupported = nav && typeof nav.getBattery === 'function';\nfunction useBatteryMock() {\n    return { isSupported: false };\n}\nfunction useBattery() {\n    var _a = useState({ isSupported: true, fetched: false }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        var isMounted = true;\n        var battery = null;\n        var handleChange = function () {\n            if (!isMounted || !battery) {\n                return;\n            }\n            var newState = {\n                isSupported: true,\n                fetched: true,\n                level: battery.level,\n                charging: battery.charging,\n                dischargingTime: battery.dischargingTime,\n                chargingTime: battery.chargingTime,\n            };\n            !isDeepEqual(state, newState) && setState(newState);\n        };\n        nav.getBattery().then(function (bat) {\n            if (!isMounted) {\n                return;\n            }\n            battery = bat;\n            on(battery, 'chargingchange', handleChange);\n            on(battery, 'chargingtimechange', handleChange);\n            on(battery, 'dischargingtimechange', handleChange);\n            on(battery, 'levelchange', handleChange);\n            handleChange();\n        });\n        return function () {\n            isMounted = false;\n            if (battery) {\n                off(battery, 'chargingchange', handleChange);\n                off(battery, 'chargingtimechange', handleChange);\n                off(battery, 'dischargingtimechange', handleChange);\n                off(battery, 'levelchange', handleChange);\n            }\n        };\n    }, []);\n    return state;\n}\nexport default isBatteryApiSupported ? useBattery : useBatteryMock;\n"]},"metadata":{},"sourceType":"module"}