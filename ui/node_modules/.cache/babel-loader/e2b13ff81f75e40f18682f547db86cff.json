{"ast":null,"code":"ace.define(\"ace/mode/clojure_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ClojureHighlightRules = function () {\n    var builtinFunctions = '* *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* ' + '*command-line-args* *compile-files* *compile-path* *e *err* *file* ' + '*flush-on-newline* *in* *macro-meta* *math-context* *ns* *out* ' + '*print-dup* *print-length* *print-level* *print-meta* *print-readably* ' + '*read-eval* *source-path* *use-context-classloader* ' + '*warn-on-reflection* + - -> ->> .. / < <= = ' + '== > &gt; >= &gt;= accessor aclone ' + 'add-classpath add-watch agent agent-errors aget alength alias all-ns ' + 'alter alter-meta! alter-var-root amap ancestors and apply areduce ' + 'array-map aset aset-boolean aset-byte aset-char aset-double aset-float ' + 'aset-int aset-long aset-short assert assoc assoc! assoc-in associative? ' + 'atom await await-for await1 bases bean bigdec bigint binding bit-and ' + 'bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left ' + 'bit-shift-right bit-test bit-xor boolean boolean-array booleans ' + 'bound-fn bound-fn* butlast byte byte-array bytes cast char char-array ' + 'char-escape-string char-name-string char? chars chunk chunk-append ' + 'chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? ' + 'class class? clear-agent-errors clojure-version coll? comment commute ' + 'comp comparator compare compare-and-set! compile complement concat cond ' + 'condp conj conj! cons constantly construct-proxy contains? count ' + 'counted? create-ns create-struct cycle dec decimal? declare definline ' + 'defmacro defmethod defmulti defn defn- defonce defstruct delay delay? ' + 'deliver deref derive descendants destructure disj disj! dissoc dissoc! ' + 'distinct distinct? doall doc dorun doseq dosync dotimes doto double ' + 'double-array doubles drop drop-last drop-while empty empty? ensure ' + 'enumeration-seq eval even? every? false? ffirst file-seq filter find ' + 'find-doc find-ns find-var first float float-array float? floats flush ' + 'fn fn? fnext for force format future future-call future-cancel ' + 'future-cancelled? future-done? future? gen-class gen-interface gensym ' + 'get get-in get-method get-proxy-class get-thread-bindings get-validator ' + 'hash hash-map hash-set identical? identity if-let if-not ifn? import ' + 'in-ns inc init-proxy instance? int int-array integer? interleave intern ' + 'interpose into into-array ints io! isa? iterate iterator-seq juxt key ' + 'keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list ' + 'list* list? load load-file load-reader load-string loaded-libs locking ' + 'long long-array longs loop macroexpand macroexpand-1 make-array ' + 'make-hierarchy map map? mapcat max max-key memfn memoize merge ' + 'merge-with meta method-sig methods min min-key mod name namespace neg? ' + 'newline next nfirst nil? nnext not not-any? not-empty not-every? not= ' + 'ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ' + 'ns-refers ns-resolve ns-unalias ns-unmap nth nthnext num number? odd? ' + 'or parents partial partition pcalls peek persistent! pmap pop pop! ' + 'pop-thread-bindings pos? pr pr-str prefer-method prefers ' + 'primitives-classnames print print-ctor print-doc print-dup print-method ' + 'print-namespace-doc print-simple print-special-doc print-str printf ' + 'println println-str prn prn-str promise proxy proxy-call-with-super ' + 'proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot ' + 'rand rand-int range ratio? rational? rationalize re-find re-groups ' + 're-matcher re-matches re-pattern re-seq read read-line read-string ' + 'reduce ref ref-history-count ref-max-history ref-min-history ref-set ' + 'refer refer-clojure release-pending-sends rem remove remove-method ' + 'remove-ns remove-watch repeat repeatedly replace replicate require ' + 'reset! reset-meta! resolve rest resultset-seq reverse reversible? rseq ' + 'rsubseq second select-keys send send-off seq seq? seque sequence ' + 'sequential? set set-validator! set? short short-array shorts ' + 'shutdown-agents slurp some sort sort-by sorted-map sorted-map-by ' + 'sorted-set sorted-set-by sorted? special-form-anchor special-symbol? ' + 'split-at split-with str stream? string? struct struct-map subs subseq ' + 'subvec supers swap! symbol symbol? sync syntax-symbol-anchor take ' + 'take-last take-nth take-while test the-ns time to-array to-array-2d ' + 'trampoline transient tree-seq true? type unchecked-add unchecked-dec ' + 'unchecked-divide unchecked-inc unchecked-multiply unchecked-negate ' + 'unchecked-remainder unchecked-subtract underive unquote ' + 'unquote-splicing update-in update-proxy use val vals var-get var-set ' + 'var? vary-meta vec vector vector? when when-first when-let when-not ' + 'while with-bindings with-bindings* with-in-str with-loading-context ' + 'with-local-vars with-meta with-open with-out-str with-precision xml-seq ' + 'zero? zipmap';\n    var keywords = 'throw try var ' + 'def do fn if let loop monitor-enter monitor-exit new quote recur set!';\n    var buildinConstants = \"true false nil\";\n    var keywordMapper = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"support.function\": builtinFunctions\n    }, \"identifier\", false, \" \");\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \";.*$\"\n      }, {\n        token: \"keyword\",\n        //parens\n        regex: \"[\\\\(|\\\\)]\"\n      }, {\n        token: \"keyword\",\n        //lists\n        regex: \"[\\\\'\\\\(]\"\n      }, {\n        token: \"keyword\",\n        //vectors\n        regex: \"[\\\\[|\\\\]]\"\n      }, {\n        token: \"keyword\",\n        //sets and maps\n        regex: \"[\\\\{|\\\\}|\\\\#\\\\{|\\\\#\\\\}]\"\n      }, {\n        token: \"keyword\",\n        // ampersands\n        regex: '[\\\\&]'\n      }, {\n        token: \"keyword\",\n        // metadata\n        regex: '[\\\\#\\\\^\\\\{]'\n      }, {\n        token: \"keyword\",\n        // anonymous fn syntactic sugar\n        regex: '[\\\\%]'\n      }, {\n        token: \"keyword\",\n        // deref reader macro\n        regex: '[@]'\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: \"constant.language\",\n        regex: '[!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+||=|!=|<=|>=|<>|<|>|!|&&]'\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$\\\\-]*\\\\b\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '\"',\n        next: \"string\"\n      }, {\n        token: \"constant\",\n        // symbol\n        regex: /:[^()\\[\\]{}'\"\\^%`,;\\s]+/\n      }, {\n        token: \"string.regexp\",\n        //Regular Expressions\n        regex: '/#\"(?:\\\\.|(?:\\\\\")|[^\"\"\\n])*\"/g'\n      }],\n      \"string\": [{\n        token: \"constant.language.escape\",\n        regex: \"\\\\\\\\.|\\\\\\\\$\"\n      }, {\n        token: \"string\",\n        regex: '[^\"\\\\\\\\]+'\n      }, {\n        token: \"string\",\n        regex: '\"',\n        next: \"start\"\n      }]\n    };\n  };\n\n  oop.inherits(ClojureHighlightRules, TextHighlightRules);\n  exports.ClojureHighlightRules = ClojureHighlightRules;\n});\nace.define(\"ace/mode/matching_parens_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingParensOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\)/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\))/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      var match = line.match(/^(\\s+)/);\n\n      if (match) {\n        return match[1];\n      }\n\n      return \"\";\n    };\n  }).call(MatchingParensOutdent.prototype);\n  exports.MatchingParensOutdent = MatchingParensOutdent;\n});\nace.define(\"ace/mode/clojure\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/clojure_highlight_rules\", \"ace/mode/matching_parens_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var ClojureHighlightRules = require(\"./clojure_highlight_rules\").ClojureHighlightRules;\n\n  var MatchingParensOutdent = require(\"./matching_parens_outdent\").MatchingParensOutdent;\n\n  var Mode = function () {\n    this.HighlightRules = ClojureHighlightRules;\n    this.$outdent = new MatchingParensOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \";\";\n    this.minorIndentFunctions = [\"defn\", \"defn-\", \"defmacro\", \"def\", \"deftest\", \"testing\"];\n\n    this.$toIndent = function (str) {\n      return str.split('').map(function (ch) {\n        if (/\\s/.exec(ch)) {\n          return ch;\n        } else {\n          return ' ';\n        }\n      }).join('');\n    };\n\n    this.$calculateIndent = function (line, tab) {\n      var baseIndent = this.$getIndent(line);\n      var delta = 0;\n      var isParen, ch;\n\n      for (var i = line.length - 1; i >= 0; i--) {\n        ch = line[i];\n\n        if (ch === '(') {\n          delta--;\n          isParen = true;\n        } else if (ch === '(' || ch === '[' || ch === '{') {\n          delta--;\n          isParen = false;\n        } else if (ch === ')' || ch === ']' || ch === '}') {\n          delta++;\n        }\n\n        if (delta < 0) {\n          break;\n        }\n      }\n\n      if (delta < 0 && isParen) {\n        i += 1;\n        var iBefore = i;\n        var fn = '';\n\n        while (true) {\n          ch = line[i];\n\n          if (ch === ' ' || ch === '\\t') {\n            if (this.minorIndentFunctions.indexOf(fn) !== -1) {\n              return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n            } else {\n              return this.$toIndent(line.substring(0, i + 1));\n            }\n          } else if (ch === undefined) {\n            return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n          }\n\n          fn += line[i];\n          i++;\n        }\n      } else if (delta < 0 && !isParen) {\n        return this.$toIndent(line.substring(0, i + 1));\n      } else if (delta > 0) {\n        baseIndent = baseIndent.substring(0, baseIndent.length - tab.length);\n        return baseIndent;\n      } else {\n        return baseIndent;\n      }\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      return this.$calculateIndent(line, tab);\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/clojure\";\n    this.snippetFileId = \"ace/snippets/clojure\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/clojure\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-clojure.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","ClojureHighlightRules","builtinFunctions","keywords","buildinConstants","keywordMapper","createKeywordMapper","$rules","token","regex","next","inherits","Range","MatchingParensOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","lineCommentStart","minorIndentFunctions","$toIndent","str","split","map","ch","exec","join","$calculateIndent","tab","baseIndent","delta","isParen","i","iBefore","fn","indexOf","substring","undefined","getNextLineIndent","state","$id","snippetFileId","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/clojure_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n\n\nvar ClojureHighlightRules = function() {\n\n    var builtinFunctions = (\n        '* *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* ' +\n        '*command-line-args* *compile-files* *compile-path* *e *err* *file* ' +\n        '*flush-on-newline* *in* *macro-meta* *math-context* *ns* *out* ' +\n        '*print-dup* *print-length* *print-level* *print-meta* *print-readably* ' +\n        '*read-eval* *source-path* *use-context-classloader* ' +\n        '*warn-on-reflection* + - -> ->> .. / < <= = ' +\n        '== > &gt; >= &gt;= accessor aclone ' +\n        'add-classpath add-watch agent agent-errors aget alength alias all-ns ' +\n        'alter alter-meta! alter-var-root amap ancestors and apply areduce ' +\n        'array-map aset aset-boolean aset-byte aset-char aset-double aset-float ' +\n        'aset-int aset-long aset-short assert assoc assoc! assoc-in associative? ' +\n        'atom await await-for await1 bases bean bigdec bigint binding bit-and ' +\n        'bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left ' +\n        'bit-shift-right bit-test bit-xor boolean boolean-array booleans ' +\n        'bound-fn bound-fn* butlast byte byte-array bytes cast char char-array ' +\n        'char-escape-string char-name-string char? chars chunk chunk-append ' +\n        'chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? ' +\n        'class class? clear-agent-errors clojure-version coll? comment commute ' +\n        'comp comparator compare compare-and-set! compile complement concat cond ' +\n        'condp conj conj! cons constantly construct-proxy contains? count ' +\n        'counted? create-ns create-struct cycle dec decimal? declare definline ' +\n        'defmacro defmethod defmulti defn defn- defonce defstruct delay delay? ' +\n        'deliver deref derive descendants destructure disj disj! dissoc dissoc! ' +\n        'distinct distinct? doall doc dorun doseq dosync dotimes doto double ' +\n        'double-array doubles drop drop-last drop-while empty empty? ensure ' +\n        'enumeration-seq eval even? every? false? ffirst file-seq filter find ' +\n        'find-doc find-ns find-var first float float-array float? floats flush ' +\n        'fn fn? fnext for force format future future-call future-cancel ' +\n        'future-cancelled? future-done? future? gen-class gen-interface gensym ' +\n        'get get-in get-method get-proxy-class get-thread-bindings get-validator ' +\n        'hash hash-map hash-set identical? identity if-let if-not ifn? import ' +\n        'in-ns inc init-proxy instance? int int-array integer? interleave intern ' +\n        'interpose into into-array ints io! isa? iterate iterator-seq juxt key ' +\n        'keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list ' +\n        'list* list? load load-file load-reader load-string loaded-libs locking ' +\n        'long long-array longs loop macroexpand macroexpand-1 make-array ' +\n        'make-hierarchy map map? mapcat max max-key memfn memoize merge ' +\n        'merge-with meta method-sig methods min min-key mod name namespace neg? ' +\n        'newline next nfirst nil? nnext not not-any? not-empty not-every? not= ' +\n        'ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ' +\n        'ns-refers ns-resolve ns-unalias ns-unmap nth nthnext num number? odd? ' +\n        'or parents partial partition pcalls peek persistent! pmap pop pop! ' +\n        'pop-thread-bindings pos? pr pr-str prefer-method prefers ' +\n        'primitives-classnames print print-ctor print-doc print-dup print-method ' +\n        'print-namespace-doc print-simple print-special-doc print-str printf ' +\n        'println println-str prn prn-str promise proxy proxy-call-with-super ' +\n        'proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot ' +\n        'rand rand-int range ratio? rational? rationalize re-find re-groups ' +\n        're-matcher re-matches re-pattern re-seq read read-line read-string ' +\n        'reduce ref ref-history-count ref-max-history ref-min-history ref-set ' +\n        'refer refer-clojure release-pending-sends rem remove remove-method ' +\n        'remove-ns remove-watch repeat repeatedly replace replicate require ' +\n        'reset! reset-meta! resolve rest resultset-seq reverse reversible? rseq ' +\n        'rsubseq second select-keys send send-off seq seq? seque sequence ' +\n        'sequential? set set-validator! set? short short-array shorts ' +\n        'shutdown-agents slurp some sort sort-by sorted-map sorted-map-by ' +\n        'sorted-set sorted-set-by sorted? special-form-anchor special-symbol? ' +\n        'split-at split-with str stream? string? struct struct-map subs subseq ' +\n        'subvec supers swap! symbol symbol? sync syntax-symbol-anchor take ' +\n        'take-last take-nth take-while test the-ns time to-array to-array-2d ' +\n        'trampoline transient tree-seq true? type unchecked-add unchecked-dec ' +\n        'unchecked-divide unchecked-inc unchecked-multiply unchecked-negate ' +\n        'unchecked-remainder unchecked-subtract underive unquote ' +\n        'unquote-splicing update-in update-proxy use val vals var-get var-set ' +\n        'var? vary-meta vec vector vector? when when-first when-let when-not ' +\n        'while with-bindings with-bindings* with-in-str with-loading-context ' +\n        'with-local-vars with-meta with-open with-out-str with-precision xml-seq ' +\n        'zero? zipmap'\n    );\n\n    var keywords = ('throw try var ' +\n        'def do fn if let loop monitor-enter monitor-exit new quote recur set!'\n    );\n\n    var buildinConstants = (\"true false nil\");\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"constant.language\": buildinConstants,\n        \"support.function\": builtinFunctions\n    }, \"identifier\", false, \" \");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \";.*$\"\n            }, {\n                token : \"keyword\", //parens\n                regex : \"[\\\\(|\\\\)]\"\n            }, {\n                token : \"keyword\", //lists\n                regex : \"[\\\\'\\\\(]\"\n            }, {\n                token : \"keyword\", //vectors\n                regex : \"[\\\\[|\\\\]]\"\n            }, {\n                token : \"keyword\", //sets and maps\n                regex : \"[\\\\{|\\\\}|\\\\#\\\\{|\\\\#\\\\}]\"\n            }, {\n                    token : \"keyword\", // ampersands\n                    regex : '[\\\\&]'\n            }, {\n                    token : \"keyword\", // metadata\n                    regex : '[\\\\#\\\\^\\\\{]'\n            }, {\n                    token : \"keyword\", // anonymous fn syntactic sugar\n                    regex : '[\\\\%]'\n            }, {\n                    token : \"keyword\", // deref reader macro\n                    regex : '[@]'\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language\",\n                regex : '[!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+||=|!=|<=|>=|<>|<|>|!|&&]'\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$\\\\-]*\\\\b\"\n            }, {\n                token : \"string\", // single line\n                regex : '\"',\n                next: \"string\"\n            }, {\n                token : \"constant\", // symbol\n                regex : /:[^()\\[\\]{}'\"\\^%`,;\\s]+/\n            }, {\n                token : \"string.regexp\", //Regular Expressions\n                regex : '/#\"(?:\\\\.|(?:\\\\\")|[^\"\"\\n])*\"/g'\n            }\n\n        ],\n        \"string\" : [\n            {\n                token : \"constant.language.escape\",\n                regex : \"\\\\\\\\.|\\\\\\\\$\"\n            }, {\n                token : \"string\",\n                regex : '[^\"\\\\\\\\]+'\n            }, {\n                token : \"string\",\n                regex : '\"',\n                next : \"start\"\n            }\n        ]\n    };\n};\n\noop.inherits(ClojureHighlightRules, TextHighlightRules);\n\nexports.ClojureHighlightRules = ClojureHighlightRules;\n});\n\nace.define(\"ace/mode/matching_parens_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingParensOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\)/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\))/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        var match = line.match(/^(\\s+)/);\n        if (match) {\n            return match[1];\n        }\n\n        return \"\";\n    };\n\n}).call(MatchingParensOutdent.prototype);\n\nexports.MatchingParensOutdent = MatchingParensOutdent;\n});\n\nace.define(\"ace/mode/clojure\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/clojure_highlight_rules\",\"ace/mode/matching_parens_outdent\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ClojureHighlightRules = require(\"./clojure_highlight_rules\").ClojureHighlightRules;\nvar MatchingParensOutdent = require(\"./matching_parens_outdent\").MatchingParensOutdent;\n\nvar Mode = function() {\n    this.HighlightRules = ClojureHighlightRules;\n    this.$outdent = new MatchingParensOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \";\";\n    this.minorIndentFunctions = [\"defn\", \"defn-\", \"defmacro\", \"def\", \"deftest\", \"testing\"];\n\n    this.$toIndent = function(str) {\n        return str.split('').map(function(ch) {\n            if (/\\s/.exec(ch)) {\n                return ch;\n            } else {\n                return ' ';\n            }\n        }).join('');\n    };\n\n    this.$calculateIndent = function(line, tab) {\n        var baseIndent = this.$getIndent(line);\n        var delta = 0;\n        var isParen, ch;\n        for (var i = line.length - 1; i >= 0; i--) {\n            ch = line[i];\n            if (ch === '(') {\n                delta--;\n                isParen = true;\n            } else if (ch === '(' || ch === '[' || ch === '{') {\n                delta--;\n                isParen = false;\n            } else if (ch === ')' || ch === ']' || ch === '}') {\n                delta++;\n            }\n            if (delta < 0) {\n                break;\n            }\n        }\n        if (delta < 0 && isParen) {\n            i += 1;\n            var iBefore = i;\n            var fn = '';\n            while (true) {\n                ch = line[i];\n                if (ch === ' ' || ch === '\\t') {\n                    if(this.minorIndentFunctions.indexOf(fn) !== -1) {\n                        return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n                    } else {\n                        return this.$toIndent(line.substring(0, i + 1));\n                    }\n                } else if (ch === undefined) {\n                    return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n                }\n                fn += line[i];\n                i++;\n            }\n        } else if(delta < 0 && !isParen) {\n            return this.$toIndent(line.substring(0, i+1));\n        } else if(delta > 0) {\n            baseIndent = baseIndent.substring(0, baseIndent.length - tab.length);\n            return baseIndent;\n        } else {\n            return baseIndent;\n        }\n    };\n\n    this.getNextLineIndent = function(state, line, tab) {\n        return this.$calculateIndent(line, tab);\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/clojure\";\n    this.snippetFileId = \"ace/snippets/clojure\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/clojure\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}