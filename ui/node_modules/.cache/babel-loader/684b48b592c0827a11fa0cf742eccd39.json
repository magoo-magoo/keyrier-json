{"ast":null,"code":"ace.define(\"ace/mode/python_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PythonHighlightRules = function () {\n    var keywords = \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" + \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" + \"raise|return|try|while|with|yield|async|await|nonlocal\";\n    var builtinConstants = \"True|False|None|NotImplemented|Ellipsis|__debug__\";\n    var builtinFunctions = \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" + \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" + \"binfile|bin|iter|property|tuple|bool|filter|len|range|type|bytearray|\" + \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" + \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" + \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" + \"__import__|complex|hash|min|apply|delattr|help|next|setattr|set|\" + \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern|\" + \"ascii|breakpoint|bytes\";\n    var keywordMapper = this.createKeywordMapper({\n      \"invalid.deprecated\": \"debugger\",\n      \"support.function\": builtinFunctions,\n      \"variable.language\": \"self|cls\",\n      \"constant.language\": builtinConstants,\n      \"keyword\": keywords\n    }, \"identifier\");\n    var strPre = \"[uU]?\";\n    var strRawPre = \"[rR]\";\n    var strFormatPre = \"[fF]\";\n    var strRawFormatPre = \"(?:[rR][fF]|[fF][rR])\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string start\n        regex: strPre + '\"{3}',\n        next: \"qqstring3\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: strPre + '\"(?=.)',\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        // multi line ''' string start\n        regex: strPre + \"'{3}\",\n        next: \"qstring3\"\n      }, {\n        token: \"string\",\n        // ' string\n        regex: strPre + \"'(?=.)\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: strRawPre + '\"{3}',\n        next: \"rawqqstring3\"\n      }, {\n        token: \"string\",\n        regex: strRawPre + '\"(?=.)',\n        next: \"rawqqstring\"\n      }, {\n        token: \"string\",\n        regex: strRawPre + \"'{3}\",\n        next: \"rawqstring3\"\n      }, {\n        token: \"string\",\n        regex: strRawPre + \"'(?=.)\",\n        next: \"rawqstring\"\n      }, {\n        token: \"string\",\n        regex: strFormatPre + '\"{3}',\n        next: \"fqqstring3\"\n      }, {\n        token: \"string\",\n        regex: strFormatPre + '\"(?=.)',\n        next: \"fqqstring\"\n      }, {\n        token: \"string\",\n        regex: strFormatPre + \"'{3}\",\n        next: \"fqstring3\"\n      }, {\n        token: \"string\",\n        regex: strFormatPre + \"'(?=.)\",\n        next: \"fqstring\"\n      }, {\n        token: \"string\",\n        regex: strRawFormatPre + '\"{3}',\n        next: \"rfqqstring3\"\n      }, {\n        token: \"string\",\n        regex: strRawFormatPre + '\"(?=.)',\n        next: \"rfqqstring\"\n      }, {\n        token: \"string\",\n        regex: strRawFormatPre + \"'{3}\",\n        next: \"rfqstring3\"\n      }, {\n        token: \"string\",\n        regex: strRawFormatPre + \"'(?=.)\",\n        next: \"rfqstring\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|@|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"punctuation\",\n        regex: \",|:|;|\\\\->|\\\\+=|\\\\-=|\\\\*=|\\\\/=|\\\\/\\\\/=|%=|@=|&=|\\\\|=|^=|>>=|<<=|\\\\*\\\\*=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(\\\\{]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)\\\\}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }, {\n        include: \"constants\"\n      }],\n      \"qqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line ''' string end\n        regex: \"'{3}\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"qstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"qstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rawqqstring3\": [{\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rawqstring3\": [{\n        token: \"string\",\n        // multi line ''' string end\n        regex: \"'{3}\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rawqqstring\": [{\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"rawqqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rawqstring\": [{\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"rawqstring\"\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"fqqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"fqstring3\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        // multi line ''' string end\n        regex: \"'{3}\",\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"fqqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"fqqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"fqstring\": [{\n        token: \"constant.language.escape\",\n        regex: stringEscape\n      }, {\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rfqqstring3\": [{\n        token: \"string\",\n        // multi line \"\"\" string end\n        regex: '\"{3}',\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rfqstring3\": [{\n        token: \"string\",\n        // multi line ''' string end\n        regex: \"'{3}\",\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rfqqstring\": [{\n        token: \"string\",\n        regex: \"\\\\\\\\$\",\n        next: \"rfqqstring\"\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"rfqstring\": [{\n        token: \"string\",\n        regex: \"'|$\",\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"fqstringParRules\": [{\n        //TODO: nested {}\n        token: \"paren.lparen\",\n        regex: \"[\\\\[\\\\(]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\]\\\\)]\"\n      }, {\n        token: \"string\",\n        regex: \"\\\\s+\"\n      }, {\n        token: \"string\",\n        regex: \"'(.)*'\"\n      }, {\n        token: \"string\",\n        regex: '\"(.)*\"'\n      }, {\n        token: \"function.support\",\n        regex: \"(!s|!r|!a)\"\n      }, {\n        include: \"constants\"\n      }, {\n        token: 'paren.rparen',\n        regex: \"}\",\n        next: 'pop'\n      }, {\n        token: 'paren.lparen',\n        regex: \"{\",\n        push: \"fqstringParRules\"\n      }],\n      \"constants\": [{\n        token: \"constant.numeric\",\n        // imaginary\n        regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: floatNumber\n      }, {\n        token: \"constant.numeric\",\n        // long integer\n        regex: integer + \"[lL]\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // integer\n        regex: integer + \"\\\\b\"\n      }, {\n        token: [\"punctuation\", \"function.support\"],\n        // method\n        regex: \"(\\\\.)([a-zA-Z_]+)\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(PythonHighlightRules, TextHighlightRules);\n  exports.PythonHighlightRules = PythonHighlightRules;\n});\nace.define(\"ace/mode/folding/pythonic\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, match.index);\n        if (match[2]) return this.indentationBlock(session, row, match.index + match[2].length);\n        return this.indentationBlock(session, row);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/python\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/python_highlight_rules\", \"ace/mode/folding/pythonic\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var PythonHighlightRules = require(\"./python_highlight_rules\").PythonHighlightRules;\n\n  var PythonFoldMode = require(\"./folding/pythonic\").FoldMode;\n\n  var Range = require(\"../range\").Range;\n\n  var Mode = function () {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    var outdents = {\n      \"pass\": 1,\n      \"return\": 1,\n      \"raise\": 1,\n      \"break\": 1,\n      \"continue\": 1\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\") return false;\n      var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n      if (!tokens) return false;\n\n      do {\n        var last = tokens.pop();\n      } while (last && (last.type == \"comment\" || last.type == \"text\" && last.value.match(/^\\s+$/)));\n\n      if (!last) return false;\n      return last.type == \"keyword\" && outdents[last.value];\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      row += 1;\n      var indent = this.$getIndent(doc.getLine(row));\n      var tab = doc.getTabString();\n      if (indent.slice(-tab.length) == tab) doc.remove(new Range(row, indent.length - tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n    this.snippetFileId = \"ace/snippets/python\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/python\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-python.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PythonHighlightRules","keywords","builtinConstants","builtinFunctions","keywordMapper","createKeywordMapper","strPre","strRawPre","strFormatPre","strRawFormatPre","decimalInteger","octInteger","hexInteger","binInteger","integer","exponent","fraction","intPart","pointFloat","exponentFloat","floatNumber","stringEscape","$rules","token","regex","next","include","defaultToken","push","normalizeRules","inherits","BaseFoldMode","FoldMode","markers","foldingStartMarker","RegExp","getFoldWidgetRange","session","foldStyle","row","line","getLine","match","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","Mode","PythonFoldMode","Range","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","tab","indent","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id","snippetFileId","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/python_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PythonHighlightRules = function() {\n\n    var keywords = (\n        \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" +\n        \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" +\n        \"raise|return|try|while|with|yield|async|await|nonlocal\"\n    );\n\n    var builtinConstants = (\n        \"True|False|None|NotImplemented|Ellipsis|__debug__\"\n    );\n\n    var builtinFunctions = (\n        \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" +\n        \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" +\n        \"binfile|bin|iter|property|tuple|bool|filter|len|range|type|bytearray|\" +\n        \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" +\n        \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" +\n        \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" +\n        \"__import__|complex|hash|min|apply|delattr|help|next|setattr|set|\" +\n        \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern|\" +\n        \"ascii|breakpoint|bytes\"\n    );\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"variable.language\": \"self|cls\",\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords\n    }, \"identifier\");\n\n    var strPre = \"[uU]?\";\n    var strRawPre = \"[rR]\";\n    var strFormatPre = \"[fF]\";\n    var strRawFormatPre = \"(?:[rR][fF]|[fF][rR])\";\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" + intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n\n    var stringEscape = \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : strPre + '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : strPre + '\"(?=.)',\n            next : \"qqstring\"\n        }, {\n            token : \"string\",           // multi line ''' string start\n            regex : strPre + \"'{3}\",\n            next : \"qstring3\"\n        }, {\n            token : \"string\",           // ' string\n            regex : strPre + \"'(?=.)\",\n            next : \"qstring\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + '\"{3}',\n            next: \"rawqqstring3\"\n        }, {\n            token: \"string\", \n            regex: strRawPre + '\"(?=.)',\n            next: \"rawqqstring\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + \"'{3}\",\n            next: \"rawqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawPre + \"'(?=.)\",\n            next: \"rawqstring\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + '\"{3}',\n            next: \"fqqstring3\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + '\"(?=.)',\n            next: \"fqqstring\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + \"'{3}\",\n            next: \"fqstring3\"\n        }, {\n            token: \"string\",\n            regex: strFormatPre + \"'(?=.)\",\n            next: \"fqstring\"\n        },{\n            token: \"string\",\n            regex: strRawFormatPre + '\"{3}',\n            next: \"rfqqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + '\"(?=.)',\n            next: \"rfqqstring\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + \"'{3}\",\n            next: \"rfqstring3\"\n        }, {\n            token: \"string\",\n            regex: strRawFormatPre + \"'(?=.)\",\n            next: \"rfqstring\"\n        }, {\n            token: \"keyword.operator\",\n            regex: \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|@|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token: \"punctuation\",\n            regex: \",|:|;|\\\\->|\\\\+=|\\\\-=|\\\\*=|\\\\/=|\\\\/\\\\/=|%=|@=|&=|\\\\|=|^=|>>=|<<=|\\\\*\\\\*=\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token: \"text\",\n            regex: \"\\\\s+\"\n        }, {\n            include: \"constants\"\n        }],\n        \"qqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"qqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"qstring\"\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqqstring3\": [{\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqstring3\": [{\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rawqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rawqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rawqstring\"\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstring3\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"fqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstring\": [{\n            token: \"constant.language.escape\",\n            regex: stringEscape\n        }, {\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqqstring3\": [{\n            token: \"string\", // multi line \"\"\" string end\n            regex: '\"{3}',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqstring3\": [{\n            token: \"string\",  // multi line ''' string end\n            regex: \"'{3}\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqqstring\": [{\n            token: \"string\",\n            regex: \"\\\\\\\\$\",\n            next: \"rfqqstring\"\n        }, {\n            token: \"string\",\n            regex: '\"|$',\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"rfqstring\": [{\n            token: \"string\",\n            regex: \"'|$\",\n            next: \"start\"\n        }, {\n            token: \"paren.lparen\",\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"fqstringParRules\": [{//TODO: nested {}\n            token: \"paren.lparen\",\n            regex: \"[\\\\[\\\\(]\"\n        }, {\n            token: \"paren.rparen\",\n            regex: \"[\\\\]\\\\)]\"\n        }, {\n            token: \"string\",\n            regex: \"\\\\s+\"\n        }, {\n            token: \"string\",\n            regex: \"'(.)*'\"\n        }, {\n            token: \"string\",\n            regex: '\"(.)*\"'\n        }, {\n            token: \"function.support\",\n            regex: \"(!s|!r|!a)\"\n        }, {\n            include: \"constants\"\n        },{\n            token: 'paren.rparen',\n            regex: \"}\",\n            next: 'pop'\n        },{\n            token: 'paren.lparen',\n            regex: \"{\",\n            push: \"fqstringParRules\"\n        }],\n        \"constants\": [{\n            token: \"constant.numeric\", // imaginary\n            regex: \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n        }, {\n            token: \"constant.numeric\", // float\n            regex: floatNumber\n        }, {\n            token: \"constant.numeric\", // long integer\n            regex: integer + \"[lL]\\\\b\"\n        }, {\n            token: \"constant.numeric\", // integer\n            regex: integer + \"\\\\b\"\n        }, {\n            token: [\"punctuation\", \"function.support\"],// method\n            regex: \"(\\\\.)([a-zA-Z_]+)\\\\b\"\n        }, {\n            token: keywordMapper,\n            regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(PythonHighlightRules, TextHighlightRules);\n\nexports.PythonHighlightRules = PythonHighlightRules;\n});\n\nace.define(\"ace/mode/folding/pythonic\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/python\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/python_highlight_rules\",\"ace/mode/folding/pythonic\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PythonHighlightRules = require(\"./python_highlight_rules\").PythonHighlightRules;\nvar PythonFoldMode = require(\"./folding/pythonic\").FoldMode;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n    \n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        \n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        \n        if (!last)\n            return false;\n        \n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        \n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n    this.snippetFileId = \"ace/snippets/python\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/python\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}