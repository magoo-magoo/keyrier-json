{"ast":null,"code":"var _regeneratorRuntime = require(\"/home/magoo/projects/keyrier-json/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) : (global = global || self, factory(global.ReactQuery = {}, global.React));\n})(this, function (exports, React) {\n  'use strict';\n\n  React = React && Object.prototype.hasOwnProperty.call(React, 'default') ? React['default'] : React;\n\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n          args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n\n        _next(undefined);\n      });\n    };\n  }\n\n  function _extends() {\n    _extends = Object.assign || function (target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n\n        for (var key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n\n      return target;\n    };\n\n    return _extends.apply(this, arguments);\n  }\n\n  function _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n\n    for (i = 0; i < sourceKeys.length; i++) {\n      key = sourceKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      target[key] = source[key];\n    }\n\n    return target;\n  }\n\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n\n    return (hint === \"string\" ? String : Number)(input);\n  }\n\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  var renderErr = 'Renderer Error ☝️';\n  var actions = {\n    init: 'init'\n  };\n  var defaultColumn = {\n    Cell: function Cell(_ref) {\n      var _ref$value = _ref.value,\n          value = _ref$value === void 0 ? '' : _ref$value;\n      return value;\n    },\n    width: 150,\n    minWidth: 0,\n    maxWidth: Number.MAX_SAFE_INTEGER\n  };\n\n  function mergeProps() {\n    for (var _len = arguments.length, propList = new Array(_len), _key = 0; _key < _len; _key++) {\n      propList[_key] = arguments[_key];\n    }\n\n    return propList.reduce(function (props, next) {\n      var style = next.style,\n          className = next.className,\n          rest = _objectWithoutPropertiesLoose(next, [\"style\", \"className\"]);\n\n      props = _extends({}, props, {}, rest);\n\n      if (style) {\n        props.style = props.style ? _extends({}, props.style || {}, {}, style || {}) : style;\n      }\n\n      if (className) {\n        props.className = props.className ? props.className + ' ' + className : className;\n      }\n\n      if (props.className === '') {\n        delete props.className;\n      }\n\n      return props;\n    }, {});\n  }\n\n  function handlePropGetter(prevProps, userProps, meta) {\n    // Handle a lambda, pass it the previous props\n    if (typeof userProps === 'function') {\n      return handlePropGetter({}, userProps(prevProps, meta));\n    } // Handle an array, merge each item as separate props\n\n\n    if (Array.isArray(userProps)) {\n      return mergeProps.apply(void 0, [prevProps].concat(userProps));\n    } // Handle an object by default, merge the two objects\n\n\n    return mergeProps(prevProps, userProps);\n  }\n\n  var makePropGetter = function makePropGetter(hooks, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return function (userProps) {\n      if (userProps === void 0) {\n        userProps = {};\n      }\n\n      return [].concat(hooks, [userProps]).reduce(function (prev, next) {\n        return handlePropGetter(prev, next, _extends({}, meta, {\n          userProps: userProps\n        }));\n      }, {});\n    };\n  };\n\n  var reduceHooks = function reduceHooks(hooks, initial, meta, allowUndefined) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return hooks.reduce(function (prev, next) {\n      var nextValue = next(prev, meta);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!allowUndefined && typeof nextValue === 'undefined') {\n          console.info(next);\n          throw new Error('React Table: A reducer hook ☝️ just returned undefined! This is not allowed.');\n        }\n      }\n\n      return nextValue;\n    }, initial);\n  };\n\n  var loopHooks = function loopHooks(hooks, context, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return hooks.forEach(function (hook) {\n      var nextValue = hook(context, meta);\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof nextValue !== 'undefined') {\n          console.info(hook, nextValue);\n          throw new Error('React Table: A loop-type hook ☝️ just returned a value! This is not allowed.');\n        }\n      }\n    });\n  };\n\n  function ensurePluginOrder(plugins, befores, pluginName, afters) {\n    if (process.env.NODE_ENV !== 'production' && afters) {\n      throw new Error(\"Defining plugins in the \\\"after\\\" section of ensurePluginOrder is no longer supported (see plugin \" + pluginName + \")\");\n    }\n\n    var pluginIndex = plugins.findIndex(function (plugin) {\n      return plugin.pluginName === pluginName;\n    });\n\n    if (pluginIndex === -1) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\"The plugin \\\"\" + pluginName + \"\\\" was not found in the plugin list!\\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\\n\\n  \" + pluginName + \".pluginName = '\" + pluginName + \"'\\n\");\n      }\n    }\n\n    befores.forEach(function (before) {\n      var beforeIndex = plugins.findIndex(function (plugin) {\n        return plugin.pluginName === before;\n      });\n\n      if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\"React Table: The \" + pluginName + \" plugin hook must be placed after the \" + before + \" plugin hook!\");\n        }\n      }\n    });\n  }\n\n  function functionalUpdate(updater, old) {\n    return typeof updater === 'function' ? updater(old) : updater;\n  }\n\n  function useGetLatest(obj) {\n    var ref = React.useRef();\n    ref.current = obj;\n    return React.useCallback(function () {\n      return ref.current;\n    }, []);\n  } // SSR has issues with useLayoutEffect still, so use useEffect during SSR\n\n\n  var safeUseLayoutEffect = typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n  function useMountedLayoutEffect(fn, deps) {\n    var mountedRef = React.useRef(false);\n    safeUseLayoutEffect(function () {\n      if (mountedRef.current) {\n        fn();\n      }\n\n      mountedRef.current = true; // eslint-disable-next-line\n    }, deps);\n  }\n\n  function useAsyncDebounce(defaultFn, defaultWait) {\n    if (defaultWait === void 0) {\n      defaultWait = 0;\n    }\n\n    var debounceRef = React.useRef({});\n    var getDefaultFn = useGetLatest(defaultFn);\n    var getDefaultWait = useGetLatest(defaultWait);\n    return React.useCallback( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _len2,\n            args,\n            _key2,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = _args2[_key2];\n                }\n\n                if (!debounceRef.current.promise) {\n                  debounceRef.current.promise = new Promise(function (resolve, reject) {\n                    debounceRef.current.resolve = resolve;\n                    debounceRef.current.reject = reject;\n                  });\n                }\n\n                if (debounceRef.current.timeout) {\n                  clearTimeout(debounceRef.current.timeout);\n                }\n\n                debounceRef.current.timeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          delete debounceRef.current.timeout;\n                          _context.prev = 1;\n                          _context.t0 = debounceRef.current;\n                          _context.next = 5;\n                          return getDefaultFn().apply(void 0, args);\n\n                        case 5:\n                          _context.t1 = _context.sent;\n\n                          _context.t0.resolve.call(_context.t0, _context.t1);\n\n                          _context.next = 12;\n                          break;\n\n                        case 9:\n                          _context.prev = 9;\n                          _context.t2 = _context[\"catch\"](1);\n                          debounceRef.current.reject(_context.t2);\n\n                        case 12:\n                          _context.prev = 12;\n                          delete debounceRef.current.promise;\n                          return _context.finish(12);\n\n                        case 15:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[1, 9, 12, 15]]);\n                })), getDefaultWait());\n                return _context2.abrupt(\"return\", debounceRef.current.promise);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function () {\n        return _ref2.apply(this, arguments);\n      };\n    }(), [getDefaultFn, getDefaultWait]);\n  }\n\n  function makeRenderer(instance, column, meta) {\n    if (meta === void 0) {\n      meta = {};\n    }\n\n    return function (type, userProps) {\n      if (userProps === void 0) {\n        userProps = {};\n      }\n\n      var Comp = typeof type === 'string' ? column[type] : type;\n\n      if (typeof Comp === 'undefined') {\n        console.info(column);\n        throw new Error(renderErr);\n      }\n\n      return flexRender(Comp, _extends({}, instance, {\n        column: column\n      }, meta, {}, userProps));\n    };\n  }\n\n  function flexRender(Comp, props) {\n    return isReactComponent(Comp) ? React.createElement(Comp, props) : Comp;\n  }\n\n  function isReactComponent(component) {\n    return isClassComponent(component) || typeof component === 'function' || isExoticComponent(component);\n  }\n\n  function isClassComponent(component) {\n    return typeof component === 'function' && function () {\n      var proto = Object.getPrototypeOf(component);\n      return proto.prototype && proto.prototype.isReactComponent;\n    }();\n  }\n\n  function isExoticComponent(component) {\n    return typeof component === 'object' && typeof component.$$typeof === 'symbol' && ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description);\n  }\n\n  function linkColumnStructure(columns, parent, depth) {\n    if (depth === void 0) {\n      depth = 0;\n    }\n\n    return columns.map(function (column) {\n      column = _extends({}, column, {\n        parent: parent,\n        depth: depth\n      });\n      assignColumnAccessor(column);\n\n      if (column.columns) {\n        column.columns = linkColumnStructure(column.columns, column, depth + 1);\n      }\n\n      return column;\n    });\n  }\n\n  function flattenColumns(columns) {\n    return flattenBy(columns, 'columns');\n  }\n\n  function assignColumnAccessor(column) {\n    // First check for string accessor\n    var id = column.id,\n        accessor = column.accessor,\n        Header = column.Header;\n\n    if (typeof accessor === 'string') {\n      id = id || accessor;\n      var accessorPath = accessor.split('.');\n\n      accessor = function accessor(row) {\n        return getBy(row, accessorPath);\n      };\n    }\n\n    if (!id && typeof Header === 'string' && Header) {\n      id = Header;\n    }\n\n    if (!id && column.columns) {\n      console.error(column);\n      throw new Error('A column ID (or unique \"Header\" value) is required!');\n    }\n\n    if (!id) {\n      console.error(column);\n      throw new Error('A column ID (or string accessor) is required!');\n    }\n\n    Object.assign(column, {\n      id: id,\n      accessor: accessor\n    });\n    return column;\n  }\n\n  function decorateColumn(column, userDefaultColumn) {\n    if (!userDefaultColumn) {\n      throw new Error();\n    }\n\n    Object.assign(column, _extends({\n      // Make sure there is a fallback header, just in case\n      Header: function Header() {\n        return React.createElement(React.Fragment, null, \"\\xA0\");\n      },\n      Footer: function Footer() {\n        return React.createElement(React.Fragment, null, \"\\xA0\");\n      }\n    }, defaultColumn, {}, userDefaultColumn, {}, column));\n    return column;\n  } // Build the header groups from the bottom up\n\n\n  function makeHeaderGroups(allColumns, defaultColumn) {\n    var headerGroups = [];\n    var scanColumns = allColumns;\n    var uid = 0;\n\n    var getUID = function getUID() {\n      return uid++;\n    };\n\n    var _loop = function _loop() {\n      // The header group we are creating\n      var headerGroup = {\n        headers: []\n      }; // The parent columns we're going to scan next\n\n      var parentColumns = [];\n      var hasParents = scanColumns.some(function (d) {\n        return d.parent;\n      }); // Scan each column for parents\n\n      scanColumns.forEach(function (column) {\n        // What is the latest (last) parent column?\n        var latestParentColumn = [].concat(parentColumns).reverse()[0];\n        var newParent;\n\n        if (hasParents) {\n          // If the column has a parent, add it if necessary\n          if (column.parent) {\n            newParent = _extends({}, column.parent, {\n              originalId: column.parent.id,\n              id: column.parent.id + \"_\" + getUID(),\n              headers: [column]\n            });\n          } else {\n            // If other columns have parents, we'll need to add a place holder if necessary\n            var originalId = column.id + \"_placeholder\";\n            newParent = decorateColumn({\n              originalId: originalId,\n              id: column.id + \"_placeholder_\" + getUID(),\n              placeholderOf: column,\n              headers: [column]\n            }, defaultColumn);\n          } // If the resulting parent columns are the same, just add\n          // the column and increment the header span\n\n\n          if (latestParentColumn && latestParentColumn.originalId === newParent.originalId) {\n            latestParentColumn.headers.push(column);\n          } else {\n            parentColumns.push(newParent);\n          }\n        }\n\n        headerGroup.headers.push(column);\n      });\n      headerGroups.push(headerGroup); // Start scanning the parent columns\n\n      scanColumns = parentColumns;\n    };\n\n    while (scanColumns.length) {\n      _loop();\n    }\n\n    return headerGroups.reverse();\n  }\n\n  var pathObjCache = new Map();\n\n  function getBy(obj, path, def) {\n    if (!path) {\n      return obj;\n    }\n\n    var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n    var pathObj = pathObjCache.get(cacheKey) || function () {\n      var pathObj = makePathArray(path);\n      pathObjCache.set(cacheKey, pathObj);\n      return pathObj;\n    }();\n\n    var val;\n\n    try {\n      val = pathObj.reduce(function (cursor, pathPart) {\n        return cursor[pathPart];\n      }, obj);\n    } catch (e) {// continue regardless of error\n    }\n\n    return typeof val !== 'undefined' ? val : def;\n  }\n\n  function getFirstDefined() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    for (var i = 0; i < args.length; i += 1) {\n      if (typeof args[i] !== 'undefined') {\n        return args[i];\n      }\n    }\n  }\n\n  function isFunction(a) {\n    if (typeof a === 'function') {\n      return a;\n    }\n  }\n\n  function flattenBy(arr, key) {\n    var flat = [];\n\n    var recurse = function recurse(arr) {\n      arr.forEach(function (d) {\n        if (!d[key]) {\n          flat.push(d);\n        } else {\n          recurse(d[key]);\n        }\n      });\n    };\n\n    recurse(arr);\n    return flat;\n  }\n\n  function expandRows(rows, _ref) {\n    var manualExpandedKey = _ref.manualExpandedKey,\n        expanded = _ref.expanded,\n        _ref$expandSubRows = _ref.expandSubRows,\n        expandSubRows = _ref$expandSubRows === void 0 ? true : _ref$expandSubRows;\n    var expandedRows = [];\n\n    var handleRow = function handleRow(row) {\n      row.isExpanded = row.original && row.original[manualExpandedKey] || expanded[row.id];\n      row.canExpand = row.subRows && !!row.subRows.length;\n      expandedRows.push(row);\n\n      if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n        row.subRows.forEach(handleRow);\n      }\n    };\n\n    rows.forEach(handleRow);\n    return expandedRows;\n  }\n\n  function getFilterMethod(filter, userFilterTypes, filterTypes) {\n    return isFunction(filter) || userFilterTypes[filter] || filterTypes[filter] || filterTypes.text;\n  }\n\n  function shouldAutoRemoveFilter(autoRemove, value, column) {\n    return autoRemove ? autoRemove(value, column) : typeof value === 'undefined';\n  }\n\n  function unpreparedAccessWarning() {\n    throw new Error('React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.');\n  } //\n\n\n  var reOpenBracket = /\\[/g;\n  var reCloseBracket = /\\]/g;\n\n  function makePathArray(obj) {\n    return flattenDeep(obj) // remove all periods in parts\n    .map(function (d) {\n      return String(d).replace('.', '_');\n    }) // join parts using period\n    .join('.') // replace brackets with periods\n    .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n    .split('.');\n  }\n\n  function flattenDeep(arr, newArr) {\n    if (newArr === void 0) {\n      newArr = [];\n    }\n\n    if (!Array.isArray(arr)) {\n      newArr.push(arr);\n    } else {\n      for (var i = 0; i < arr.length; i += 1) {\n        flattenDeep(arr[i], newArr);\n      }\n    }\n\n    return newArr;\n  }\n\n  var defaultGetTableProps = function defaultGetTableProps(props) {\n    return _extends({\n      role: 'table'\n    }, props);\n  };\n\n  var defaultGetTableBodyProps = function defaultGetTableBodyProps(props) {\n    return _extends({\n      role: 'rowgroup'\n    }, props);\n  };\n\n  var defaultGetHeaderProps = function defaultGetHeaderProps(props, _ref) {\n    var column = _ref.column;\n    return _extends({\n      key: \"header_\" + column.id,\n      colSpan: column.totalVisibleHeaderCount,\n      role: 'columnheader'\n    }, props);\n  };\n\n  var defaultGetFooterProps = function defaultGetFooterProps(props, _ref2) {\n    var column = _ref2.column;\n    return _extends({\n      key: \"footer_\" + column.id,\n      colSpan: column.totalVisibleHeaderCount\n    }, props);\n  };\n\n  var defaultGetHeaderGroupProps = function defaultGetHeaderGroupProps(props, _ref3) {\n    var index = _ref3.index;\n    return _extends({\n      key: \"headerGroup_\" + index,\n      role: 'row'\n    }, props);\n  };\n\n  var defaultGetFooterGroupProps = function defaultGetFooterGroupProps(props, _ref4) {\n    var index = _ref4.index;\n    return _extends({\n      key: \"footerGroup_\" + index\n    }, props);\n  };\n\n  var defaultGetRowProps = function defaultGetRowProps(props, _ref5) {\n    var row = _ref5.row;\n    return _extends({\n      key: \"row_\" + row.id,\n      role: 'row'\n    }, props);\n  };\n\n  var defaultGetCellProps = function defaultGetCellProps(props, _ref6) {\n    var cell = _ref6.cell;\n    return _extends({\n      key: \"cell_\" + cell.row.id + \"_\" + cell.column.id,\n      role: 'cell'\n    }, props);\n  };\n\n  function makeDefaultPluginHooks() {\n    return {\n      useOptions: [],\n      stateReducers: [],\n      useControlledState: [],\n      columns: [],\n      columnsDeps: [],\n      allColumns: [],\n      allColumnsDeps: [],\n      accessValue: [],\n      materializedColumns: [],\n      materializedColumnsDeps: [],\n      useInstanceAfterData: [],\n      visibleColumns: [],\n      visibleColumnsDeps: [],\n      headerGroups: [],\n      headerGroupsDeps: [],\n      useInstanceBeforeDimensions: [],\n      useInstance: [],\n      prepareRow: [],\n      getTableProps: [defaultGetTableProps],\n      getTableBodyProps: [defaultGetTableBodyProps],\n      getHeaderGroupProps: [defaultGetHeaderGroupProps],\n      getFooterGroupProps: [defaultGetFooterGroupProps],\n      getHeaderProps: [defaultGetHeaderProps],\n      getFooterProps: [defaultGetFooterProps],\n      getRowProps: [defaultGetRowProps],\n      getCellProps: [defaultGetCellProps],\n      useFinalInstance: []\n    };\n  }\n\n  actions.resetHiddenColumns = 'resetHiddenColumns';\n  actions.toggleHideColumn = 'toggleHideColumn';\n  actions.setHiddenColumns = 'setHiddenColumns';\n  actions.toggleHideAllColumns = 'toggleHideAllColumns';\n\n  var useColumnVisibility = function useColumnVisibility(hooks) {\n    hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps];\n    hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps];\n    hooks.stateReducers.push(reducer);\n    hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions);\n    hooks.headerGroupsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.hiddenColumns]);\n    });\n    hooks.useInstance.push(useInstance);\n  };\n\n  useColumnVisibility.pluginName = 'useColumnVisibility';\n\n  var defaultGetToggleHiddenProps = function defaultGetToggleHiddenProps(props, _ref2) {\n    var column = _ref2.column;\n    return [props, {\n      onChange: function onChange(e) {\n        column.toggleHidden(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: column.isVisible,\n      title: 'Toggle Column Visible'\n    }];\n  };\n\n  var defaultGetToggleHideAllColumnsProps = function defaultGetToggleHideAllColumnsProps(props, _ref3) {\n    var instance = _ref3.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleHideAllColumns(!e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n      title: 'Toggle All Columns Hidden',\n      indeterminate: !instance.allColumnsHidden && instance.state.hiddenColumns.length\n    }];\n  };\n\n  function reducer(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        hiddenColumns: []\n      }, state);\n    }\n\n    if (action.type === actions.resetHiddenColumns) {\n      return _extends({}, state, {\n        hiddenColumns: instance.initialState.hiddenColumns || []\n      });\n    }\n\n    if (action.type === actions.toggleHideColumn) {\n      var should = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.includes(action.columnId);\n      var hiddenColumns = should ? [].concat(state.hiddenColumns, [action.columnId]) : state.hiddenColumns.filter(function (d) {\n        return d !== action.columnId;\n      });\n      return _extends({}, state, {\n        hiddenColumns: hiddenColumns\n      });\n    }\n\n    if (action.type === actions.setHiddenColumns) {\n      return _extends({}, state, {\n        hiddenColumns: functionalUpdate(action.value, state.hiddenColumns)\n      });\n    }\n\n    if (action.type === actions.toggleHideAllColumns) {\n      var shouldAll = typeof action.value !== 'undefined' ? action.value : !state.hiddenColumns.length;\n      return _extends({}, state, {\n        hiddenColumns: shouldAll ? instance.allColumns.map(function (d) {\n          return d.id;\n        }) : []\n      });\n    }\n  }\n\n  function useInstanceBeforeDimensions(instance) {\n    var headers = instance.headers,\n        hiddenColumns = instance.state.hiddenColumns;\n    var isMountedRef = React.useRef(false);\n    if (!isMountedRef.current) ;\n\n    var handleColumn = function handleColumn(column, parentVisible) {\n      column.isVisible = parentVisible && !hiddenColumns.includes(column.id);\n      var totalVisibleHeaderCount = 0;\n\n      if (column.headers && column.headers.length) {\n        column.headers.forEach(function (subColumn) {\n          return totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible);\n        });\n      } else {\n        totalVisibleHeaderCount = column.isVisible ? 1 : 0;\n      }\n\n      column.totalVisibleHeaderCount = totalVisibleHeaderCount;\n      return totalVisibleHeaderCount;\n    };\n\n    var totalVisibleHeaderCount = 0;\n    headers.forEach(function (subHeader) {\n      return totalVisibleHeaderCount += handleColumn(subHeader, true);\n    });\n  }\n\n  function useInstance(instance) {\n    var columns = instance.columns,\n        flatHeaders = instance.flatHeaders,\n        dispatch = instance.dispatch,\n        allColumns = instance.allColumns,\n        getHooks = instance.getHooks,\n        hiddenColumns = instance.state.hiddenColumns,\n        _instance$autoResetHi = instance.autoResetHiddenColumns,\n        autoResetHiddenColumns = _instance$autoResetHi === void 0 ? true : _instance$autoResetHi;\n    var getInstance = useGetLatest(instance);\n    var allColumnsHidden = allColumns.length === hiddenColumns.length;\n    var toggleHideColumn = React.useCallback(function (columnId, value) {\n      return dispatch({\n        type: actions.toggleHideColumn,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var setHiddenColumns = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.setHiddenColumns,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleHideAllColumns = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleHideAllColumns,\n        value: value\n      });\n    }, [dispatch]);\n    var getToggleHideAllColumnsProps = makePropGetter(getHooks().getToggleHideAllColumnsProps, {\n      instance: getInstance()\n    });\n    flatHeaders.forEach(function (column) {\n      column.toggleHidden = function (value) {\n        dispatch({\n          type: actions.toggleHideColumn,\n          columnId: column.id,\n          value: value\n        });\n      };\n\n      column.getToggleHiddenProps = makePropGetter(getHooks().getToggleHiddenProps, {\n        instance: getInstance(),\n        column: column\n      });\n    });\n    var getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetHiddenColumns()) {\n        dispatch({\n          type: actions.resetHiddenColumns\n        });\n      }\n    }, [dispatch, columns]);\n    Object.assign(instance, {\n      allColumnsHidden: allColumnsHidden,\n      toggleHideColumn: toggleHideColumn,\n      setHiddenColumns: setHiddenColumns,\n      toggleHideAllColumns: toggleHideAllColumns,\n      getToggleHideAllColumnsProps: getToggleHideAllColumnsProps\n    });\n  }\n\n  var defaultInitialState = {};\n  var defaultColumnInstance = {};\n\n  var defaultReducer = function defaultReducer(state, action, prevState) {\n    return state;\n  };\n\n  var defaultGetSubRows = function defaultGetSubRows(row, index) {\n    return row.subRows || [];\n  };\n\n  var defaultGetRowId = function defaultGetRowId(row, index, parent) {\n    return \"\" + (parent ? [parent.id, index].join('.') : index);\n  };\n\n  var defaultUseControlledState = function defaultUseControlledState(d) {\n    return d;\n  };\n\n  function applyDefaults(props) {\n    var _props$initialState = props.initialState,\n        initialState = _props$initialState === void 0 ? defaultInitialState : _props$initialState,\n        _props$defaultColumn = props.defaultColumn,\n        defaultColumn = _props$defaultColumn === void 0 ? defaultColumnInstance : _props$defaultColumn,\n        _props$getSubRows = props.getSubRows,\n        getSubRows = _props$getSubRows === void 0 ? defaultGetSubRows : _props$getSubRows,\n        _props$getRowId = props.getRowId,\n        getRowId = _props$getRowId === void 0 ? defaultGetRowId : _props$getRowId,\n        _props$stateReducer = props.stateReducer,\n        stateReducer = _props$stateReducer === void 0 ? defaultReducer : _props$stateReducer,\n        _props$useControlledS = props.useControlledState,\n        useControlledState = _props$useControlledS === void 0 ? defaultUseControlledState : _props$useControlledS,\n        rest = _objectWithoutPropertiesLoose(props, [\"initialState\", \"defaultColumn\", \"getSubRows\", \"getRowId\", \"stateReducer\", \"useControlledState\"]);\n\n    return _extends({}, rest, {\n      initialState: initialState,\n      defaultColumn: defaultColumn,\n      getSubRows: getSubRows,\n      getRowId: getRowId,\n      stateReducer: stateReducer,\n      useControlledState: useControlledState\n    });\n  }\n\n  var useTable = function useTable(props) {\n    for (var _len = arguments.length, plugins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      plugins[_key - 1] = arguments[_key];\n    } // Apply default props\n\n\n    props = applyDefaults(props); // Add core plugins\n\n    plugins = [useColumnVisibility].concat(plugins); // Create the table instance\n\n    var instanceRef = React.useRef({}); // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n\n    var getInstance = useGetLatest(instanceRef.current); // Assign the props, plugins and hooks to the instance\n\n    Object.assign(getInstance(), _extends({}, props, {\n      plugins: plugins,\n      hooks: makeDefaultPluginHooks()\n    })); // Allow plugins to register hooks as early as possible\n\n    plugins.filter(Boolean).forEach(function (plugin) {\n      plugin(getInstance().hooks);\n    }); // Consume all hooks and make a getter for them\n\n    var getHooks = useGetLatest(getInstance().hooks);\n    getInstance().getHooks = getHooks;\n    delete getInstance().hooks; // Allow useOptions hooks to modify the options coming into the table\n\n    Object.assign(getInstance(), reduceHooks(getHooks().useOptions, applyDefaults(props)));\n\n    var _getInstance = getInstance(),\n        data = _getInstance.data,\n        userColumns = _getInstance.columns,\n        initialState = _getInstance.initialState,\n        defaultColumn = _getInstance.defaultColumn,\n        getSubRows = _getInstance.getSubRows,\n        getRowId = _getInstance.getRowId,\n        stateReducer = _getInstance.stateReducer,\n        useControlledState = _getInstance.useControlledState; // Setup user reducer ref\n\n\n    var getStateReducer = useGetLatest(stateReducer); // Build the reducer\n\n    var reducer = React.useCallback(function (state, action) {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({\n          action: action\n        });\n        throw new Error('Unknown Action 👆');\n      } // Reduce the state from all plugin reducers\n\n\n      return [].concat(getHooks().stateReducers, Array.isArray(getStateReducer()) ? getStateReducer() : [getStateReducer()]).reduce(function (s, handler) {\n        return handler(s, action, state, getInstance()) || s;\n      }, state);\n    }, [getHooks, getStateReducer, getInstance]); // Start the reducer\n\n    var _React$useReducer = React.useReducer(reducer, undefined, function () {\n      return reducer(initialState, {\n        type: actions.init\n      });\n    }),\n        reducerState = _React$useReducer[0],\n        dispatch = _React$useReducer[1]; // Allow the user to control the final state with hooks\n\n\n    var state = reduceHooks([].concat(getHooks().useControlledState, [useControlledState]), reducerState, {\n      instance: getInstance()\n    });\n    Object.assign(getInstance(), {\n      state: state,\n      dispatch: dispatch\n    }); // Decorate All the columns\n\n    var columns = React.useMemo(function () {\n      return linkColumnStructure(reduceHooks(getHooks().columns, userColumns, {\n        instance: getInstance()\n      }));\n    }, [getHooks, getInstance, userColumns].concat(reduceHooks(getHooks().columnsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().columns = columns; // Get the flat list of all columns and allow hooks to decorate\n    // those columns (and trigger this memoization via deps)\n\n    var allColumns = React.useMemo(function () {\n      return reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance()\n      }).map(assignColumnAccessor);\n    }, [columns, getHooks, getInstance].concat(reduceHooks(getHooks().allColumnsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().allColumns = allColumns; // Access the row model using initial columns\n\n    var _React$useMemo = React.useMemo(function () {\n      var rows = [];\n      var flatRows = [];\n      var rowsById = {};\n      var allColumnsQueue = [].concat(allColumns);\n\n      while (allColumnsQueue.length) {\n        var column = allColumnsQueue.shift();\n        accessRowsForColumn({\n          data: data,\n          rows: rows,\n          flatRows: flatRows,\n          rowsById: rowsById,\n          column: column,\n          getRowId: getRowId,\n          getSubRows: getSubRows,\n          accessValueHooks: getHooks().accessValue,\n          getInstance: getInstance\n        });\n      }\n\n      return [rows, flatRows, rowsById];\n    }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance]),\n        rows = _React$useMemo[0],\n        flatRows = _React$useMemo[1],\n        rowsById = _React$useMemo[2];\n\n    Object.assign(getInstance(), {\n      rows: rows,\n      flatRows: flatRows,\n      rowsById: rowsById // materializedColumns,\n\n    });\n    loopHooks(getHooks().useInstanceAfterData, getInstance()); // Get the flat list of all columns AFTER the rows\n    // have been access, and allow hooks to decorate\n    // those columns (and trigger this memoization via deps)\n\n    var visibleColumns = React.useMemo(function () {\n      return reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance()\n      }).map(function (d) {\n        return decorateColumn(d, defaultColumn);\n      });\n    }, [getHooks, allColumns, getInstance, defaultColumn].concat(reduceHooks(getHooks().visibleColumnsDeps, [], {\n      instance: getInstance()\n    }))); // Combine new visible columns with all columns\n\n    allColumns = React.useMemo(function () {\n      var columns = [].concat(visibleColumns);\n      allColumns.forEach(function (column) {\n        if (!columns.find(function (d) {\n          return d.id === column.id;\n        })) {\n          columns.push(column);\n        }\n      });\n      return columns;\n    }, [allColumns, visibleColumns]);\n    getInstance().allColumns = allColumns;\n\n    if (process.env.NODE_ENV !== 'production') {\n      var duplicateColumns = allColumns.filter(function (column, i) {\n        return allColumns.findIndex(function (d) {\n          return d.id === column.id;\n        }) !== i;\n      });\n\n      if (duplicateColumns.length) {\n        console.info(allColumns);\n        throw new Error(\"Duplicate columns were found with ids: \\\"\" + duplicateColumns.map(function (d) {\n          return d.id;\n        }).join(', ') + \"\\\" in the columns array above\");\n      }\n    } // Make the headerGroups\n\n\n    var headerGroups = React.useMemo(function () {\n      return reduceHooks(getHooks().headerGroups, makeHeaderGroups(visibleColumns, defaultColumn), getInstance());\n    }, [getHooks, visibleColumns, defaultColumn, getInstance].concat(reduceHooks(getHooks().headerGroupsDeps, [], {\n      instance: getInstance()\n    })));\n    getInstance().headerGroups = headerGroups; // Get the first level of headers\n\n    var headers = React.useMemo(function () {\n      return headerGroups.length ? headerGroups[0].headers : [];\n    }, [headerGroups]);\n    getInstance().headers = headers; // Provide a flat header list for utilities\n\n    getInstance().flatHeaders = headerGroups.reduce(function (all, headerGroup) {\n      return [].concat(all, headerGroup.headers);\n    }, []);\n    loopHooks(getHooks().useInstanceBeforeDimensions, getInstance()); // Filter columns down to visible ones\n\n    var visibleColumnsDep = visibleColumns.filter(function (d) {\n      return d.isVisible;\n    }).map(function (d) {\n      return d.id;\n    }).sort().join('_');\n    visibleColumns = React.useMemo(function () {\n      return visibleColumns.filter(function (d) {\n        return d.isVisible;\n      });\n    }, // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]);\n    getInstance().visibleColumns = visibleColumns; // Header Visibility is needed by this point\n\n    var _calculateHeaderWidth = calculateHeaderWidths(headers),\n        totalColumnsMinWidth = _calculateHeaderWidth[0],\n        totalColumnsWidth = _calculateHeaderWidth[1],\n        totalColumnsMaxWidth = _calculateHeaderWidth[2];\n\n    getInstance().totalColumnsMinWidth = totalColumnsMinWidth;\n    getInstance().totalColumnsWidth = totalColumnsWidth;\n    getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth;\n    loopHooks(getHooks().useInstance, getInstance()) // Each materialized header needs to be assigned a render function and other\n    // prop getter properties here.\n    ;\n    [].concat(getInstance().flatHeaders, getInstance().allColumns).forEach(function (column) {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column); // Give columns/headers a default getHeaderProps\n\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column: column\n      }); // Give columns/headers a default getFooterProps\n\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column: column\n      });\n    });\n    getInstance().headerGroups = React.useMemo(function () {\n      return headerGroups.filter(function (headerGroup, i) {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(function (column) {\n          var recurse = function recurse(headers) {\n            return headers.filter(function (column) {\n              if (column.headers) {\n                return recurse(column.headers);\n              }\n\n              return column.isVisible;\n            }).length;\n          };\n\n          if (column.headers) {\n            return recurse(column.headers);\n          }\n\n          return column.isVisible;\n        }); // Give headerGroups getRowProps\n\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(getHooks().getHeaderGroupProps, {\n            instance: getInstance(),\n            headerGroup: headerGroup,\n            index: i\n          });\n          headerGroup.getFooterGroupProps = makePropGetter(getHooks().getFooterGroupProps, {\n            instance: getInstance(),\n            headerGroup: headerGroup,\n            index: i\n          });\n          return true;\n        }\n\n        return false;\n      });\n    }, [headerGroups, getInstance, getHooks]);\n    getInstance().footerGroups = [].concat(getInstance().headerGroups).reverse(); // The prepareRow function is absolutely necessary and MUST be called on\n    // any rows the user wishes to be displayed.\n\n    getInstance().prepareRow = React.useCallback(function (row) {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row: row\n      }); // Build the visible cells for each row\n\n      row.allCells = allColumns.map(function (column) {\n        var value = row.values[column.id];\n        var cell = {\n          column: column,\n          row: row,\n          value: value\n        }; // Give each cell a getCellProps base\n\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell: cell\n        }); // Give each cell a renderer function (supports multiple renderers)\n\n        cell.render = makeRenderer(getInstance(), column, {\n          row: row,\n          cell: cell,\n          value: value\n        });\n        return cell;\n      });\n      row.cells = visibleColumns.map(function (column) {\n        return row.allCells.find(function (cell) {\n          return cell.column.id === column.id;\n        });\n      }); // need to apply any row specific hooks (useExpanded requires this)\n\n      loopHooks(getHooks().prepareRow, row, {\n        instance: getInstance()\n      });\n    }, [getHooks, getInstance, allColumns, visibleColumns]);\n    getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n      instance: getInstance()\n    });\n    getInstance().getTableBodyProps = makePropGetter(getHooks().getTableBodyProps, {\n      instance: getInstance()\n    });\n    loopHooks(getHooks().useFinalInstance, getInstance());\n    return getInstance();\n  };\n\n  function calculateHeaderWidths(headers, left) {\n    if (left === void 0) {\n      left = 0;\n    }\n\n    var sumTotalMinWidth = 0;\n    var sumTotalWidth = 0;\n    var sumTotalMaxWidth = 0;\n    var sumTotalFlexWidth = 0;\n    headers.forEach(function (header) {\n      var subHeaders = header.headers;\n      header.totalLeft = left;\n\n      if (subHeaders && subHeaders.length) {\n        var _calculateHeaderWidth2 = calculateHeaderWidths(subHeaders, left),\n            totalMinWidth = _calculateHeaderWidth2[0],\n            totalWidth = _calculateHeaderWidth2[1],\n            totalMaxWidth = _calculateHeaderWidth2[2],\n            totalFlexWidth = _calculateHeaderWidth2[3];\n\n        header.totalMinWidth = totalMinWidth;\n        header.totalWidth = totalWidth;\n        header.totalMaxWidth = totalMaxWidth;\n        header.totalFlexWidth = totalFlexWidth;\n      } else {\n        header.totalMinWidth = header.minWidth;\n        header.totalWidth = Math.min(Math.max(header.minWidth, header.width), header.maxWidth);\n        header.totalMaxWidth = header.maxWidth;\n        header.totalFlexWidth = header.canResize ? header.totalWidth : 0;\n      }\n\n      if (header.isVisible) {\n        left += header.totalWidth;\n        sumTotalMinWidth += header.totalMinWidth;\n        sumTotalWidth += header.totalWidth;\n        sumTotalMaxWidth += header.totalMaxWidth;\n        sumTotalFlexWidth += header.totalFlexWidth;\n      }\n    });\n    return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth];\n  }\n\n  function accessRowsForColumn(_ref) {\n    var data = _ref.data,\n        rows = _ref.rows,\n        flatRows = _ref.flatRows,\n        rowsById = _ref.rowsById,\n        column = _ref.column,\n        getRowId = _ref.getRowId,\n        getSubRows = _ref.getSubRows,\n        accessValueHooks = _ref.accessValueHooks,\n        getInstance = _ref.getInstance; // Access the row's data column-by-column\n    // We do it this way so we can incrementally add materialized\n    // columns after the first pass and avoid excessive looping\n\n    var accessRow = function accessRow(originalRow, rowIndex, depth, parent, parentRows) {\n      if (depth === void 0) {\n        depth = 0;\n      } // Keep the original reference around\n\n\n      var original = originalRow;\n      var id = getRowId(originalRow, rowIndex, parent);\n      var row = rowsById[id]; // If the row hasn't been created, let's make it\n\n      if (!row) {\n        row = {\n          id: id,\n          original: original,\n          index: rowIndex,\n          depth: depth,\n          cells: [{}] // This is a dummy cell\n\n        }; // Override common array functions (and the dummy cell's getCellProps function)\n        // to show an error if it is accessed without calling prepareRow\n\n        row.cells.map = unpreparedAccessWarning;\n        row.cells.filter = unpreparedAccessWarning;\n        row.cells.forEach = unpreparedAccessWarning;\n        row.cells[0].getCellProps = unpreparedAccessWarning; // Create the cells and values\n\n        row.values = {}; // Push this row into the parentRows array\n\n        parentRows.push(row); // Keep track of every row in a flat array\n\n        flatRows.push(row); // Also keep track of every row by its ID\n\n        rowsById[id] = row; // Get the original subrows\n\n        row.originalSubRows = getSubRows(originalRow, rowIndex); // Then recursively access them\n\n        if (row.originalSubRows) {\n          var subRows = [];\n          row.originalSubRows.forEach(function (d, i) {\n            return accessRow(d, i, depth + 1, row, subRows);\n          }); // Keep the new subRows array on the row\n\n          row.subRows = subRows;\n        }\n      } else if (row.subRows) {\n        // If the row exists, then it's already been accessed\n        // Keep recursing, but don't worry about passing the\n        // accumlator array (those rows already exist)\n        row.originalSubRows.forEach(function (d, i) {\n          return accessRow(d, i, depth + 1, row);\n        });\n      } // If the column has an accessor, use it to get a value\n\n\n      if (column.accessor) {\n        row.values[column.id] = column.accessor(originalRow, rowIndex, row);\n      } // Allow plugins to manipulate the column value\n\n\n      row.values[column.id] = reduceHooks(accessValueHooks, row.values[column.id], {\n        row: row,\n        column: column,\n        instance: getInstance()\n      }, true);\n    };\n\n    data.forEach(function (originalRow, rowIndex) {\n      return accessRow(originalRow, rowIndex, 0, undefined, rows);\n    });\n  }\n\n  actions.resetExpanded = 'resetExpanded';\n  actions.toggleRowExpanded = 'toggleRowExpanded';\n  actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded';\n\n  var useExpanded = function useExpanded(hooks) {\n    hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps];\n    hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps];\n    hooks.stateReducers.push(reducer$1);\n    hooks.useInstance.push(useInstance$1);\n    hooks.prepareRow.push(prepareRow);\n  };\n\n  useExpanded.pluginName = 'useExpanded';\n\n  var defaultGetToggleAllRowsExpandedProps = function defaultGetToggleAllRowsExpandedProps(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      onClick: function onClick(e) {\n        instance.toggleAllRowsExpanded();\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      title: 'Toggle All Rows Expanded'\n    }];\n  };\n\n  var defaultGetToggleRowExpandedProps = function defaultGetToggleRowExpandedProps(props, _ref2) {\n    var row = _ref2.row;\n    return [props, {\n      onClick: function onClick() {\n        row.toggleRowExpanded();\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      title: 'Toggle Row Expanded'\n    }];\n  }; // Reducer\n\n\n  function reducer$1(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        expanded: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetExpanded) {\n      return _extends({}, state, {\n        expanded: instance.initialState.expanded || {}\n      });\n    }\n\n    if (action.type === actions.toggleAllRowsExpanded) {\n      var value = action.value;\n      var isAllRowsExpanded = instance.isAllRowsExpanded,\n          rowsById = instance.rowsById;\n      var expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded;\n\n      if (expandAll) {\n        var expanded = {};\n        Object.keys(rowsById).forEach(function (rowId) {\n          expanded[rowId] = true;\n        });\n        return _extends({}, state, {\n          expanded: expanded\n        });\n      }\n\n      return _extends({}, state, {\n        expanded: {}\n      });\n    }\n\n    if (action.type === actions.toggleRowExpanded) {\n      var id = action.id,\n          setExpanded = action.value;\n      var exists = state.expanded[id];\n      var shouldExist = typeof setExpanded !== 'undefined' ? setExpanded : !exists;\n\n      if (!exists && shouldExist) {\n        var _extends2;\n\n        return _extends({}, state, {\n          expanded: _extends({}, state.expanded, (_extends2 = {}, _extends2[id] = true, _extends2))\n        });\n      } else if (exists && !shouldExist) {\n        var _state$expanded = state.expanded,\n            _ = _state$expanded[id],\n            rest = _objectWithoutPropertiesLoose(_state$expanded, [id].map(_toPropertyKey));\n\n        return _extends({}, state, {\n          expanded: rest\n        });\n      } else {\n        return state;\n      }\n    }\n  }\n\n  function useInstance$1(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        rowsById = instance.rowsById,\n        _instance$manualExpan = instance.manualExpandedKey,\n        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n        _instance$paginateExp = instance.paginateExpandedRows,\n        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n        _instance$expandSubRo = instance.expandSubRows,\n        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n        _instance$autoResetEx = instance.autoResetExpanded,\n        autoResetExpanded = _instance$autoResetEx === void 0 ? true : _instance$autoResetEx,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        expanded = instance.state.expanded,\n        dispatch = instance.dispatch;\n    ensurePluginOrder(plugins, ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'], 'useExpanded');\n    var getAutoResetExpanded = useGetLatest(autoResetExpanded);\n    var isAllRowsExpanded = Boolean(Object.keys(rowsById).length && Object.keys(expanded).length);\n\n    if (isAllRowsExpanded) {\n      if (Object.keys(rowsById).some(function (id) {\n        return !expanded[id];\n      })) {\n        isAllRowsExpanded = false;\n      }\n    } // Bypass any effects from firing when this changes\n\n\n    useMountedLayoutEffect(function () {\n      if (getAutoResetExpanded()) {\n        dispatch({\n          type: actions.resetExpanded\n        });\n      }\n    }, [dispatch, data]);\n    var toggleRowExpanded = React.useCallback(function (id, value) {\n      dispatch({\n        type: actions.toggleRowExpanded,\n        id: id,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleAllRowsExpanded = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllRowsExpanded,\n        value: value\n      });\n    }, [dispatch]);\n    var expandedRows = React.useMemo(function () {\n      if (paginateExpandedRows) {\n        return expandRows(rows, {\n          manualExpandedKey: manualExpandedKey,\n          expanded: expanded,\n          expandSubRows: expandSubRows\n        });\n      }\n\n      return rows;\n    }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows]);\n    var expandedDepth = React.useMemo(function () {\n      return findExpandedDepth(expanded);\n    }, [expanded]);\n    var getInstance = useGetLatest(instance);\n    var getToggleAllRowsExpandedProps = makePropGetter(getHooks().getToggleAllRowsExpandedProps, {\n      instance: getInstance()\n    });\n    Object.assign(instance, {\n      preExpandedRows: rows,\n      expandedRows: expandedRows,\n      rows: expandedRows,\n      expandedDepth: expandedDepth,\n      isAllRowsExpanded: isAllRowsExpanded,\n      toggleRowExpanded: toggleRowExpanded,\n      toggleAllRowsExpanded: toggleAllRowsExpanded,\n      getToggleAllRowsExpandedProps: getToggleAllRowsExpandedProps\n    });\n  }\n\n  function prepareRow(row, _ref3) {\n    var getHooks = _ref3.instance.getHooks,\n        instance = _ref3.instance;\n\n    row.toggleRowExpanded = function (set) {\n      return instance.toggleRowExpanded(row.id, set);\n    };\n\n    row.getToggleRowExpandedProps = makePropGetter(getHooks().getToggleRowExpandedProps, {\n      instance: instance,\n      row: row\n    });\n  }\n\n  function findExpandedDepth(expanded) {\n    var maxDepth = 0;\n    Object.keys(expanded).forEach(function (id) {\n      var splitId = id.split('.');\n      maxDepth = Math.max(maxDepth, splitId.length);\n    });\n    return maxDepth;\n  }\n\n  var text = function text(rows, ids, filterValue) {\n    rows = rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return String(rowValue).toLowerCase().includes(String(filterValue).toLowerCase());\n      });\n    });\n    return rows;\n  };\n\n  text.autoRemove = function (val) {\n    return !val;\n  };\n\n  var exactText = function exactText(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase() : true;\n      });\n    });\n  };\n\n  exactText.autoRemove = function (val) {\n    return !val;\n  };\n\n  var exactTextCase = function exactTextCase(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue) === String(filterValue) : true;\n      });\n    });\n  };\n\n  exactTextCase.autoRemove = function (val) {\n    return !val;\n  };\n\n  var includes = function includes(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue.includes(filterValue);\n      });\n    });\n  };\n\n  includes.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var includesAll = function includesAll(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue && rowValue.length && filterValue.every(function (val) {\n          return rowValue.includes(val);\n        });\n      });\n    });\n  };\n\n  includesAll.autoRemove = function (val) {\n    return !val || !val.length;\n  };\n\n  var exact = function exact(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue === filterValue;\n      });\n    });\n  };\n\n  exact.autoRemove = function (val) {\n    return typeof val === 'undefined';\n  };\n\n  var equals = function equals(rows, ids, filterValue) {\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id]; // eslint-disable-next-line eqeqeq\n\n        return rowValue == filterValue;\n      });\n    });\n  };\n\n  equals.autoRemove = function (val) {\n    return val == null;\n  };\n\n  var between = function between(rows, ids, filterValue) {\n    var _ref = filterValue || [],\n        min = _ref[0],\n        max = _ref[1];\n\n    min = typeof min === 'number' ? min : -Infinity;\n    max = typeof max === 'number' ? max : Infinity;\n\n    if (min > max) {\n      var temp = min;\n      min = max;\n      max = temp;\n    }\n\n    return rows.filter(function (row) {\n      return ids.some(function (id) {\n        var rowValue = row.values[id];\n        return rowValue >= min && rowValue <= max;\n      });\n    });\n  };\n\n  between.autoRemove = function (val) {\n    return !val || typeof val[0] !== 'number' && typeof val[1] !== 'number';\n  };\n\n  var filterTypes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    text: text,\n    exactText: exactText,\n    exactTextCase: exactTextCase,\n    includes: includes,\n    includesAll: includesAll,\n    exact: exact,\n    equals: equals,\n    between: between\n  });\n  actions.resetFilters = 'resetFilters';\n  actions.setFilter = 'setFilter';\n  actions.setAllFilters = 'setAllFilters';\n\n  var useFilters = function useFilters(hooks) {\n    hooks.stateReducers.push(reducer$2);\n    hooks.useInstance.push(useInstance$2);\n  };\n\n  useFilters.pluginName = 'useFilters';\n\n  function reducer$2(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        filters: []\n      }, state);\n    }\n\n    if (action.type === actions.resetFilters) {\n      return _extends({}, state, {\n        filters: instance.initialState.filters || []\n      });\n    }\n\n    if (action.type === actions.setFilter) {\n      var columnId = action.columnId,\n          filterValue = action.filterValue;\n      var allColumns = instance.allColumns,\n          userFilterTypes = instance.filterTypes;\n      var column = allColumns.find(function (d) {\n        return d.id === columnId;\n      });\n\n      if (!column) {\n        throw new Error(\"React-Table: Could not find a column with id: \" + columnId);\n      }\n\n      var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n      var previousfilter = state.filters.find(function (d) {\n        return d.id === columnId;\n      });\n      var newFilter = functionalUpdate(filterValue, previousfilter && previousfilter.value); //\n\n      if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n        return _extends({}, state, {\n          filters: state.filters.filter(function (d) {\n            return d.id !== columnId;\n          })\n        });\n      }\n\n      if (previousfilter) {\n        return _extends({}, state, {\n          filters: state.filters.map(function (d) {\n            if (d.id === columnId) {\n              return {\n                id: columnId,\n                value: newFilter\n              };\n            }\n\n            return d;\n          })\n        });\n      }\n\n      return _extends({}, state, {\n        filters: [].concat(state.filters, [{\n          id: columnId,\n          value: newFilter\n        }])\n      });\n    }\n\n    if (action.type === actions.setAllFilters) {\n      var filters = action.filters;\n      var _allColumns = instance.allColumns,\n          _userFilterTypes = instance.filterTypes;\n      return _extends({}, state, {\n        // Filter out undefined values\n        filters: functionalUpdate(filters, state.filters).filter(function (filter) {\n          var column = _allColumns.find(function (d) {\n            return d.id === filter.id;\n          });\n\n          var filterMethod = getFilterMethod(column.filter, _userFilterTypes || {}, filterTypes);\n\n          if (shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)) {\n            return false;\n          }\n\n          return true;\n        })\n      });\n    }\n  }\n\n  function useInstance$2(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes,\n        manualFilters = instance.manualFilters,\n        _instance$defaultCanF = instance.defaultCanFilter,\n        defaultCanFilter = _instance$defaultCanF === void 0 ? false : _instance$defaultCanF,\n        disableFilters = instance.disableFilters,\n        filters = instance.state.filters,\n        dispatch = instance.dispatch,\n        _instance$autoResetFi = instance.autoResetFilters,\n        autoResetFilters = _instance$autoResetFi === void 0 ? true : _instance$autoResetFi;\n    var setFilter = React.useCallback(function (columnId, filterValue) {\n      dispatch({\n        type: actions.setFilter,\n        columnId: columnId,\n        filterValue: filterValue\n      });\n    }, [dispatch]);\n    var setAllFilters = React.useCallback(function (filters) {\n      dispatch({\n        type: actions.setAllFilters,\n        filters: filters\n      });\n    }, [dispatch]);\n    allColumns.forEach(function (column) {\n      var id = column.id,\n          accessor = column.accessor,\n          columnDefaultCanFilter = column.defaultCanFilter,\n          columnDisableFilters = column.disableFilters; // Determine if a column is filterable\n\n      column.canFilter = accessor ? getFirstDefined(columnDisableFilters === true ? false : undefined, disableFilters === true ? false : undefined, true) : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false); // Provide the column a way of updating the filter value\n\n      column.setFilter = function (val) {\n        return setFilter(column.id, val);\n      }; // Provide the current filter value to the column for\n      // convenience\n\n\n      var found = filters.find(function (d) {\n        return d.id === id;\n      });\n      column.filterValue = found && found.value;\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualFilters || !filters.length) {\n        return [rows, flatRows, rowsById];\n      }\n\n      var filteredFlatRows = [];\n      var filteredRowsById = {}; // Filters top level and nested rows\n\n      var filterRows = function filterRows(rows, depth) {\n        if (depth === void 0) {\n          depth = 0;\n        }\n\n        var filteredRows = rows;\n        filteredRows = filters.reduce(function (filteredSoFar, _ref) {\n          var columnId = _ref.id,\n              filterValue = _ref.value; // Find the filters column\n\n          var column = allColumns.find(function (d) {\n            return d.id === columnId;\n          });\n\n          if (!column) {\n            return filteredSoFar;\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar;\n          }\n\n          var filterMethod = getFilterMethod(column.filter, userFilterTypes || {}, filterTypes);\n\n          if (!filterMethod) {\n            console.warn(\"Could not find a valid 'column.filter' for column with the ID: \" + column.id + \".\");\n            return filteredSoFar;\n          } // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n\n\n          column.filteredRows = filterMethod(filteredSoFar, [columnId], filterValue);\n          return column.filteredRows;\n        }, rows); // Apply the filter to any subRows\n        // We technically could do this recursively in the above loop,\n        // but that would severely hinder the API for the user, since they\n        // would be required to do that recursion in some scenarios\n\n        filteredRows.forEach(function (row) {\n          filteredFlatRows.push(row);\n          filteredRowsById[row.id] = row;\n\n          if (!row.subRows) {\n            return;\n          }\n\n          row.subRows = row.subRows && row.subRows.length > 0 ? filterRows(row.subRows, depth + 1) : row.subRows;\n        });\n        return filteredRows;\n      };\n\n      return [filterRows(rows), filteredFlatRows, filteredRowsById];\n    }, [manualFilters, filters, rows, flatRows, rowsById, allColumns, userFilterTypes]),\n        filteredRows = _React$useMemo[0],\n        filteredFlatRows = _React$useMemo[1],\n        filteredRowsById = _React$useMemo[2];\n\n    React.useMemo(function () {\n      // Now that each filtered column has it's partially filtered rows,\n      // lets assign the final filtered rows to all of the other columns\n      var nonFilteredColumns = allColumns.filter(function (column) {\n        return !filters.find(function (d) {\n          return d.id === column.id;\n        });\n      }); // This essentially enables faceted filter options to be built easily\n      // using every column's preFilteredRows value\n\n      nonFilteredColumns.forEach(function (column) {\n        column.preFilteredRows = filteredRows;\n        column.filteredRows = filteredRows;\n      });\n    }, [filteredRows, filters, allColumns]);\n    var getAutoResetFilters = useGetLatest(autoResetFilters);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetFilters()) {\n        dispatch({\n          type: actions.resetFilters\n        });\n      }\n    }, [dispatch, manualFilters ? null : data]);\n    Object.assign(instance, {\n      preFilteredRows: rows,\n      preFilteredFlatRows: flatRows,\n      preFilteredRowsById: rowsById,\n      filteredRows: filteredRows,\n      filteredFlatRows: filteredFlatRows,\n      filteredRowsById: filteredRowsById,\n      rows: filteredRows,\n      flatRows: filteredFlatRows,\n      rowsById: filteredRowsById,\n      setFilter: setFilter,\n      setAllFilters: setAllFilters\n    });\n  }\n\n  actions.resetGlobalFilter = 'resetGlobalFilter';\n  actions.setGlobalFilter = 'setGlobalFilter';\n\n  var useGlobalFilter = function useGlobalFilter(hooks) {\n    hooks.stateReducers.push(reducer$3);\n    hooks.useInstance.push(useInstance$3);\n  };\n\n  useGlobalFilter.pluginName = 'useGlobalFilter';\n\n  function reducer$3(state, action, previousState, instance) {\n    if (action.type === actions.resetGlobalFilter) {\n      return _extends({}, state, {\n        globalFilter: instance.initialState.globalFilter || undefined\n      });\n    }\n\n    if (action.type === actions.setGlobalFilter) {\n      var filterValue = action.filterValue;\n      var userFilterTypes = instance.userFilterTypes;\n      var filterMethod = getFilterMethod(instance.globalFilter, userFilterTypes || {}, filterTypes);\n      var newFilter = functionalUpdate(filterValue, state.globalFilter); //\n\n      if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n        var globalFilter = state.globalFilter,\n            stateWithoutGlobalFilter = _objectWithoutPropertiesLoose(state, [\"globalFilter\"]);\n\n        return stateWithoutGlobalFilter;\n      }\n\n      return _extends({}, state, {\n        globalFilter: newFilter\n      });\n    }\n  }\n\n  function useInstance$3(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        userFilterTypes = instance.filterTypes,\n        globalFilter = instance.globalFilter,\n        manualGlobalFilter = instance.manualGlobalFilter,\n        globalFilterValue = instance.state.globalFilter,\n        dispatch = instance.dispatch,\n        _instance$autoResetGl = instance.autoResetGlobalFilter,\n        autoResetGlobalFilter = _instance$autoResetGl === void 0 ? true : _instance$autoResetGl,\n        disableGlobalFilter = instance.disableGlobalFilter;\n    var setGlobalFilter = React.useCallback(function (filterValue) {\n      dispatch({\n        type: actions.setGlobalFilter,\n        filterValue: filterValue\n      });\n    }, [dispatch]); // TODO: Create a filter cache for incremental high speed multi-filtering\n    // This gets pretty complicated pretty fast, since you have to maintain a\n    // cache for each row group (top-level rows, and each row's recursive subrows)\n    // This would make multi-filtering a lot faster though. Too far?\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n        return [rows, flatRows, rowsById];\n      }\n\n      var filteredFlatRows = [];\n      var filteredRowsById = {};\n      var filterMethod = getFilterMethod(globalFilter, userFilterTypes || {}, filterTypes);\n\n      if (!filterMethod) {\n        console.warn(\"Could not find a valid 'globalFilter' option.\");\n        return rows;\n      }\n\n      allColumns.forEach(function (column) {\n        var columnDisableGlobalFilter = column.disableGlobalFilter;\n        column.canFilter = getFirstDefined(columnDisableGlobalFilter === true ? false : undefined, disableGlobalFilter === true ? false : undefined, true);\n      });\n      var filterableColumns = allColumns.filter(function (c) {\n        return c.canFilter === true;\n      }); // Filters top level and nested rows\n\n      var filterRows = function filterRows(filteredRows) {\n        filteredRows = filterMethod(filteredRows, filterableColumns.map(function (d) {\n          return d.id;\n        }), globalFilterValue);\n        filteredRows.forEach(function (row) {\n          filteredFlatRows.push(row);\n          filteredRowsById[row.id] = row;\n          row.subRows = row.subRows && row.subRows.length ? filterRows(row.subRows) : row.subRows;\n        });\n        return filteredRows;\n      };\n\n      return [filterRows(rows), filteredFlatRows, filteredRowsById];\n    }, [manualGlobalFilter, globalFilterValue, globalFilter, userFilterTypes, allColumns, rows, flatRows, rowsById, disableGlobalFilter]),\n        globalFilteredRows = _React$useMemo[0],\n        globalFilteredFlatRows = _React$useMemo[1],\n        globalFilteredRowsById = _React$useMemo[2];\n\n    var getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetGlobalFilter()) {\n        dispatch({\n          type: actions.resetGlobalFilter\n        });\n      }\n    }, [dispatch, manualGlobalFilter ? null : data]);\n    Object.assign(instance, {\n      preGlobalFilteredRows: rows,\n      preGlobalFilteredFlatRows: flatRows,\n      preGlobalFilteredRowsById: rowsById,\n      globalFilteredRows: globalFilteredRows,\n      globalFilteredFlatRows: globalFilteredFlatRows,\n      globalFilteredRowsById: globalFilteredRowsById,\n      rows: globalFilteredRows,\n      flatRows: globalFilteredFlatRows,\n      rowsById: globalFilteredRowsById,\n      setGlobalFilter: setGlobalFilter,\n      disableGlobalFilter: disableGlobalFilter\n    });\n  }\n\n  function sum(values, aggregatedValues) {\n    // It's faster to just add the aggregations together instead of\n    // process leaf nodes individually\n    return aggregatedValues.reduce(function (sum, next) {\n      return sum + (typeof next === 'number' ? next : 0);\n    }, 0);\n  }\n\n  function min(values) {\n    var min = 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n      }\n    });\n    return min;\n  }\n\n  function max(values) {\n    var max = 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        max = Math.max(max, value);\n      }\n    });\n    return max;\n  }\n\n  function minMax(values) {\n    var min = 0;\n    var max = 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    });\n    return min + \"..\" + max;\n  }\n\n  function average(values) {\n    return sum(null, values) / values.length;\n  }\n\n  function median(values) {\n    if (!values.length) {\n      return null;\n    }\n\n    var min = 0;\n    var max = 0;\n    values.forEach(function (value) {\n      if (typeof value === 'number') {\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    });\n    return (min + max) / 2;\n  }\n\n  function unique(values) {\n    return [].concat(new Set(values).values());\n  }\n\n  function uniqueCount(values) {\n    return new Set(values).size;\n  }\n\n  function count(values) {\n    return values.length;\n  }\n\n  var aggregations = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    sum: sum,\n    min: min,\n    max: max,\n    minMax: minMax,\n    average: average,\n    median: median,\n    unique: unique,\n    uniqueCount: uniqueCount,\n    count: count\n  });\n  var emptyArray = [];\n  var emptyObject = {}; // Actions\n\n  actions.resetGroupBy = 'resetGroupBy';\n  actions.toggleGroupBy = 'toggleGroupBy';\n\n  var useGroupBy = function useGroupBy(hooks) {\n    hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps];\n    hooks.stateReducers.push(reducer$4);\n    hooks.visibleColumnsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.groupBy]);\n    });\n    hooks.visibleColumns.push(visibleColumns);\n    hooks.useInstance.push(useInstance$4);\n    hooks.prepareRow.push(prepareRow$1);\n  };\n\n  useGroupBy.pluginName = 'useGroupBy';\n\n  var defaultGetGroupByToggleProps = function defaultGetGroupByToggleProps(props, _ref2) {\n    var header = _ref2.header;\n    return [props, {\n      onClick: header.canGroupBy ? function (e) {\n        e.persist();\n        header.toggleGroupBy();\n      } : undefined,\n      style: {\n        cursor: header.canGroupBy ? 'pointer' : undefined\n      },\n      title: 'Toggle GroupBy'\n    }];\n  }; // Reducer\n\n\n  function reducer$4(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        groupBy: []\n      }, state);\n    }\n\n    if (action.type === actions.resetGroupBy) {\n      return _extends({}, state, {\n        groupBy: instance.initialState.groupBy || []\n      });\n    }\n\n    if (action.type === actions.toggleGroupBy) {\n      var columnId = action.columnId,\n          setGroupBy = action.value;\n      var resolvedGroupBy = typeof setGroupBy !== 'undefined' ? setGroupBy : !state.groupBy.includes(columnId);\n\n      if (resolvedGroupBy) {\n        return _extends({}, state, {\n          groupBy: [].concat(state.groupBy, [columnId])\n        });\n      }\n\n      return _extends({}, state, {\n        groupBy: state.groupBy.filter(function (d) {\n          return d !== columnId;\n        })\n      });\n    }\n  }\n\n  function visibleColumns(columns, _ref3) {\n    var groupBy = _ref3.instance.state.groupBy; // Sort grouped columns to the start of the column list\n    // before the headers are built\n\n    var groupByColumns = groupBy.map(function (g) {\n      return columns.find(function (col) {\n        return col.id === g;\n      });\n    }).filter(Boolean);\n    var nonGroupByColumns = columns.filter(function (col) {\n      return !groupBy.includes(col.id);\n    });\n    columns = [].concat(groupByColumns, nonGroupByColumns);\n    columns.forEach(function (column) {\n      column.isGrouped = groupBy.includes(column.id);\n      column.groupedIndex = groupBy.indexOf(column.id);\n    });\n    return columns;\n  }\n\n  var defaultUserAggregations = {};\n\n  function useInstance$4(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        rowsById = instance.rowsById,\n        allColumns = instance.allColumns,\n        flatHeaders = instance.flatHeaders,\n        _instance$groupByFn = instance.groupByFn,\n        groupByFn = _instance$groupByFn === void 0 ? defaultGroupByFn : _instance$groupByFn,\n        manualGroupBy = instance.manualGroupBy,\n        _instance$aggregation = instance.aggregations,\n        userAggregations = _instance$aggregation === void 0 ? defaultUserAggregations : _instance$aggregation,\n        plugins = instance.plugins,\n        groupBy = instance.state.groupBy,\n        dispatch = instance.dispatch,\n        _instance$autoResetGr = instance.autoResetGroupBy,\n        autoResetGroupBy = _instance$autoResetGr === void 0 ? true : _instance$autoResetGr,\n        disableGroupBy = instance.disableGroupBy,\n        defaultCanGroupBy = instance.defaultCanGroupBy,\n        getHooks = instance.getHooks;\n    ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy');\n    var getInstance = useGetLatest(instance);\n    allColumns.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnGroupBy = column.defaultGroupBy,\n          columnDisableGroupBy = column.disableGroupBy;\n      column.canGroupBy = accessor ? getFirstDefined(column.canGroupBy, columnDisableGroupBy === true ? false : undefined, disableGroupBy === true ? false : undefined, true) : getFirstDefined(column.canGroupBy, defaultColumnGroupBy, defaultCanGroupBy, false);\n\n      if (column.canGroupBy) {\n        column.toggleGroupBy = function () {\n          return instance.toggleGroupBy(column.id);\n        };\n      }\n\n      column.Aggregated = column.Aggregated || column.Cell;\n    });\n    var toggleGroupBy = React.useCallback(function (columnId, value) {\n      dispatch({\n        type: actions.toggleGroupBy,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    flatHeaders.forEach(function (header) {\n      header.getGroupByToggleProps = makePropGetter(getHooks().getGroupByToggleProps, {\n        instance: getInstance(),\n        header: header\n      });\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualGroupBy || !groupBy.length) {\n        return [rows, flatRows, rowsById, emptyArray, emptyObject, flatRows, rowsById];\n      } // Ensure that the list of filtered columns exist\n\n\n      var existingGroupBy = groupBy.filter(function (g) {\n        return allColumns.find(function (col) {\n          return col.id === g;\n        });\n      }); // Find the columns that can or are aggregating\n      // Uses each column to aggregate rows into a single value\n\n      var aggregateRowsToValues = function aggregateRowsToValues(leafRows, groupedRows, depth) {\n        var values = {};\n        allColumns.forEach(function (column) {\n          // Don't aggregate columns that are in the groupBy\n          if (existingGroupBy.includes(column.id)) {\n            values[column.id] = groupedRows[0] ? groupedRows[0].values[column.id] : null;\n            return;\n          } // Get the columnValues to aggregate\n\n\n          var groupedValues = groupedRows.map(function (row) {\n            return row.values[column.id];\n          }); // Get the columnValues to aggregate\n\n          var leafValues = leafRows.map(function (row) {\n            var columnValue = row.values[column.id];\n\n            if (!depth && column.aggregatedValue) {\n              var aggregateValueFn = typeof column.aggregateValue === 'function' ? column.aggregateValue : userAggregations[column.aggregateValue] || aggregations[column.aggregateValue];\n\n              if (!aggregateValueFn) {\n                console.info({\n                  column: column\n                });\n                throw new Error(\"React Table: Invalid column.aggregateValue option for column listed above\");\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column);\n            }\n\n            return columnValue;\n          }); // Aggregate the values\n\n          var aggregateFn = typeof column.aggregate === 'function' ? column.aggregate : userAggregations[column.aggregate] || aggregations[column.aggregate];\n\n          if (aggregateFn) {\n            values[column.id] = aggregateFn(leafValues, groupedValues);\n          } else if (column.aggregate) {\n            console.info({\n              column: column\n            });\n            throw new Error(\"React Table: Invalid column.aggregate option for column listed above\");\n          } else {\n            values[column.id] = null;\n          }\n        });\n        return values;\n      };\n\n      var groupedFlatRows = [];\n      var groupedRowsById = {};\n      var onlyGroupedFlatRows = [];\n      var onlyGroupedRowsById = {};\n      var nonGroupedFlatRows = [];\n      var nonGroupedRowsById = {}; // Recursively group the data\n\n      var groupUpRecursively = function groupUpRecursively(rows, depth, parentId) {\n        if (depth === void 0) {\n          depth = 0;\n        } // This is the last level, just return the rows\n\n\n        if (depth === existingGroupBy.length) {\n          return rows;\n        }\n\n        var columnId = existingGroupBy[depth]; // Group the rows together for this level\n\n        var rowGroupsMap = groupByFn(rows, columnId); // Peform aggregations for each group\n\n        var aggregatedGroupedRows = Object.entries(rowGroupsMap).map(function (_ref4, index) {\n          var groupByVal = _ref4[0],\n              groupedRows = _ref4[1];\n          var id = columnId + \":\" + groupByVal;\n          id = parentId ? parentId + \">\" + id : id; // First, Recurse to group sub rows before aggregation\n\n          var subRows = groupUpRecursively(groupedRows, depth + 1, id); // Flatten the leaf rows of the rows in this group\n\n          var leafRows = depth ? flattenBy(groupedRows, 'leafRows') : groupedRows;\n          var values = aggregateRowsToValues(leafRows, groupedRows, depth);\n          var row = {\n            id: id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal: groupByVal,\n            values: values,\n            subRows: subRows,\n            leafRows: leafRows,\n            depth: depth,\n            index: index\n          };\n          subRows.forEach(function (subRow) {\n            groupedFlatRows.push(subRow);\n            groupedRowsById[subRow.id] = subRow;\n\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow);\n              onlyGroupedRowsById[subRow.id] = subRow;\n            } else {\n              nonGroupedFlatRows.push(subRow);\n              nonGroupedRowsById[subRow.id] = subRow;\n            }\n          });\n          return row;\n        });\n        return aggregatedGroupedRows;\n      };\n\n      var groupedRows = groupUpRecursively(rows);\n      groupedRows.forEach(function (subRow) {\n        groupedFlatRows.push(subRow);\n        groupedRowsById[subRow.id] = subRow;\n\n        if (subRow.isGrouped) {\n          onlyGroupedFlatRows.push(subRow);\n          onlyGroupedRowsById[subRow.id] = subRow;\n        } else {\n          nonGroupedFlatRows.push(subRow);\n          nonGroupedRowsById[subRow.id] = subRow;\n        }\n      }); // Assign the new data\n\n      return [groupedRows, groupedFlatRows, groupedRowsById, onlyGroupedFlatRows, onlyGroupedRowsById, nonGroupedFlatRows, nonGroupedRowsById];\n    }, [manualGroupBy, groupBy, rows, flatRows, rowsById, allColumns, userAggregations, groupByFn]),\n        groupedRows = _React$useMemo[0],\n        groupedFlatRows = _React$useMemo[1],\n        groupedRowsById = _React$useMemo[2],\n        onlyGroupedFlatRows = _React$useMemo[3],\n        onlyGroupedRowsById = _React$useMemo[4],\n        nonGroupedFlatRows = _React$useMemo[5],\n        nonGroupedRowsById = _React$useMemo[6];\n\n    var getAutoResetGroupBy = useGetLatest(autoResetGroupBy);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetGroupBy()) {\n        dispatch({\n          type: actions.resetGroupBy\n        });\n      }\n    }, [dispatch, manualGroupBy ? null : data]);\n    Object.assign(instance, {\n      preGroupedRows: rows,\n      preGroupedFlatRow: flatRows,\n      preGroupedRowsById: rowsById,\n      groupedRows: groupedRows,\n      groupedFlatRows: groupedFlatRows,\n      groupedRowsById: groupedRowsById,\n      onlyGroupedFlatRows: onlyGroupedFlatRows,\n      onlyGroupedRowsById: onlyGroupedRowsById,\n      nonGroupedFlatRows: nonGroupedFlatRows,\n      nonGroupedRowsById: nonGroupedRowsById,\n      rows: groupedRows,\n      flatRows: groupedFlatRows,\n      rowsById: groupedRowsById,\n      toggleGroupBy: toggleGroupBy\n    });\n  }\n\n  function prepareRow$1(row) {\n    row.allCells.forEach(function (cell) {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID; // Placeholder cells are any columns in the groupBy that are not grouped\n\n      cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped; // Aggregated cells are not grouped, not repeated, but still have subRows\n\n      cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand;\n    });\n  }\n\n  function defaultGroupByFn(rows, columnId) {\n    return rows.reduce(function (prev, row, i) {\n      // TODO: Might want to implement a key serializer here so\n      // irregular column values can still be grouped if needed?\n      var resKey = \"\" + row.values[columnId];\n      prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : [];\n      prev[resKey].push(row);\n      return prev;\n    }, {});\n  }\n\n  var reSplitAlphaNumeric = /([0-9]+)/gm; // Mixed sorting is slow, but very inclusive of many edge cases.\n  // It handles numbers, mixed alphanumeric combinations, and even\n  // null, undefined, and Infinity\n\n  var alphanumeric = function alphanumeric(rowA, rowB, columnId) {\n    var a = getRowValueByColumnID(rowA, columnId);\n    var b = getRowValueByColumnID(rowB, columnId); // Force to strings (or \"\" for unsupported types)\n\n    a = toString(a);\n    b = toString(b); // Split on number groups, but keep the delimiter\n    // Then remove falsey split values\n\n    a = a.split(reSplitAlphaNumeric).filter(Boolean);\n    b = b.split(reSplitAlphaNumeric).filter(Boolean); // While\n\n    while (a.length && b.length) {\n      var aa = a.shift();\n      var bb = b.shift();\n      var an = parseInt(aa, 10);\n      var bn = parseInt(bb, 10);\n      var combo = [an, bn].sort(); // Both are string\n\n      if (isNaN(combo[0])) {\n        if (aa > bb) {\n          return 1;\n        }\n\n        if (bb > aa) {\n          return -1;\n        }\n\n        continue;\n      } // One is a string, one is a number\n\n\n      if (isNaN(combo[1])) {\n        return isNaN(an) ? -1 : 1;\n      } // Both are numbers\n\n\n      if (an > bn) {\n        return 1;\n      }\n\n      if (bn > an) {\n        return -1;\n      }\n    }\n\n    return a.length - b.length;\n  };\n\n  function datetime(rowA, rowB, columnId) {\n    var a = getRowValueByColumnID(rowA, columnId);\n    var b = getRowValueByColumnID(rowB, columnId);\n    a = a.getTime();\n    b = b.getTime();\n    return compareBasic(a, b);\n  }\n\n  function basic(rowA, rowB, columnId) {\n    var a = getRowValueByColumnID(rowA, columnId);\n    var b = getRowValueByColumnID(rowB, columnId);\n    return compareBasic(a, b);\n  } // Utils\n\n\n  function compareBasic(a, b) {\n    return a === b ? 0 : a > b ? 1 : -1;\n  }\n\n  function getRowValueByColumnID(row, columnId) {\n    return row.values[columnId];\n  }\n\n  function toString(a) {\n    if (typeof a === 'number') {\n      if (isNaN(a) || a === Infinity || a === -Infinity) {\n        return '';\n      }\n\n      return String(a);\n    }\n\n    if (typeof a === 'string') {\n      return a;\n    }\n\n    return '';\n  }\n\n  var sortTypes = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    alphanumeric: alphanumeric,\n    datetime: datetime,\n    basic: basic\n  });\n  actions.resetSortBy = 'resetSortBy';\n  actions.toggleSortBy = 'toggleSortBy';\n  actions.clearSortBy = 'clearSortBy';\n  defaultColumn.sortType = 'alphanumeric';\n  defaultColumn.sortDescFirst = false;\n\n  var useSortBy = function useSortBy(hooks) {\n    hooks.getSortByToggleProps = [defaultGetSortByToggleProps];\n    hooks.stateReducers.push(reducer$5);\n    hooks.useInstance.push(useInstance$5);\n  };\n\n  useSortBy.pluginName = 'useSortBy';\n\n  var defaultGetSortByToggleProps = function defaultGetSortByToggleProps(props, _ref) {\n    var instance = _ref.instance,\n        column = _ref.column;\n    var _instance$isMultiSort = instance.isMultiSortEvent,\n        isMultiSortEvent = _instance$isMultiSort === void 0 ? function (e) {\n      return e.shiftKey;\n    } : _instance$isMultiSort;\n    return [props, {\n      onClick: column.canSort ? function (e) {\n        e.persist();\n        column.toggleSortBy(undefined, !instance.disableMultiSort && isMultiSortEvent(e));\n      } : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined\n    }];\n  }; // Reducer\n\n\n  function reducer$5(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        sortBy: []\n      }, state);\n    }\n\n    if (action.type === actions.resetSortBy) {\n      return _extends({}, state, {\n        sortBy: instance.initialState.sortBy || []\n      });\n    }\n\n    if (action.type === actions.clearSortBy) {\n      var sortBy = state.sortBy;\n      var newSortBy = sortBy.filter(function (d) {\n        return d.id !== action.columnId;\n      });\n      return _extends({}, state, {\n        sortBy: newSortBy\n      });\n    }\n\n    if (action.type === actions.toggleSortBy) {\n      var columnId = action.columnId,\n          desc = action.desc,\n          multi = action.multi;\n      var allColumns = instance.allColumns,\n          disableMultiSort = instance.disableMultiSort,\n          disableSortRemove = instance.disableSortRemove,\n          disableMultiRemove = instance.disableMultiRemove,\n          _instance$maxMultiSor = instance.maxMultiSortColCount,\n          maxMultiSortColCount = _instance$maxMultiSor === void 0 ? Number.MAX_SAFE_INTEGER : _instance$maxMultiSor;\n      var _sortBy = state.sortBy; // Find the column for this columnId\n\n      var column = allColumns.find(function (d) {\n        return d.id === columnId;\n      });\n      var sortDescFirst = column.sortDescFirst; // Find any existing sortBy for this column\n\n      var existingSortBy = _sortBy.find(function (d) {\n        return d.id === columnId;\n      });\n\n      var existingIndex = _sortBy.findIndex(function (d) {\n        return d.id === columnId;\n      });\n\n      var hasDescDefined = typeof desc !== 'undefined' && desc !== null;\n      var _newSortBy = []; // What should we do with this sort action?\n\n      var sortAction;\n\n      if (!disableMultiSort && multi) {\n        if (existingSortBy) {\n          sortAction = 'toggle';\n        } else {\n          sortAction = 'add';\n        }\n      } else {\n        // Normal mode\n        if (existingIndex !== _sortBy.length - 1) {\n          sortAction = 'replace';\n        } else if (existingSortBy) {\n          sortAction = 'toggle';\n        } else {\n          sortAction = 'replace';\n        }\n      } // Handle toggle states that will remove the sortBy\n\n\n      if (sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && ( // Must not be setting desc\n      multi ? !disableMultiRemove : true) && ( // If multi, don't allow if disableMultiRemove\n      existingSortBy && // Finally, detect if it should indeed be removed\n      existingSortBy.desc && !sortDescFirst || !existingSortBy.desc && sortDescFirst)) {\n        sortAction = 'remove';\n      }\n\n      if (sortAction === 'replace') {\n        _newSortBy = [{\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst\n        }];\n      } else if (sortAction === 'add') {\n        _newSortBy = [].concat(_sortBy, [{\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst\n        }]); // Take latest n columns\n\n        _newSortBy.splice(0, _newSortBy.length - maxMultiSortColCount);\n      } else if (sortAction === 'toggle') {\n        // This flips (or sets) the\n        _newSortBy = _sortBy.map(function (d) {\n          if (d.id === columnId) {\n            return _extends({}, d, {\n              desc: hasDescDefined ? desc : !existingSortBy.desc\n            });\n          }\n\n          return d;\n        });\n      } else if (sortAction === 'remove') {\n        _newSortBy = _sortBy.filter(function (d) {\n          return d.id !== columnId;\n        });\n      }\n\n      return _extends({}, state, {\n        sortBy: _newSortBy\n      });\n    }\n  }\n\n  function useInstance$5(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        flatRows = instance.flatRows,\n        allColumns = instance.allColumns,\n        _instance$orderByFn = instance.orderByFn,\n        orderByFn = _instance$orderByFn === void 0 ? defaultOrderByFn : _instance$orderByFn,\n        userSortTypes = instance.sortTypes,\n        manualSortBy = instance.manualSortBy,\n        defaultCanSort = instance.defaultCanSort,\n        disableSortBy = instance.disableSortBy,\n        flatHeaders = instance.flatHeaders,\n        sortBy = instance.state.sortBy,\n        dispatch = instance.dispatch,\n        plugins = instance.plugins,\n        getHooks = instance.getHooks,\n        _instance$autoResetSo = instance.autoResetSortBy,\n        autoResetSortBy = _instance$autoResetSo === void 0 ? true : _instance$autoResetSo;\n    ensurePluginOrder(plugins, ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'], 'useSortBy'); // Updates sorting based on a columnId, desc flag and multi flag\n\n    var toggleSortBy = React.useCallback(function (columnId, desc, multi) {\n      dispatch({\n        type: actions.toggleSortBy,\n        columnId: columnId,\n        desc: desc,\n        multi: multi\n      });\n    }, [dispatch]); // use reference to avoid memory leak in #1608\n\n    var getInstance = useGetLatest(instance); // Add the getSortByToggleProps method to columns and headers\n\n    flatHeaders.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnCanSort = column.canSort,\n          columnDisableSortBy = column.disableSortBy,\n          id = column.id;\n      var canSort = accessor ? getFirstDefined(columnDisableSortBy === true ? false : undefined, disableSortBy === true ? false : undefined, true) : getFirstDefined(defaultCanSort, defaultColumnCanSort, false);\n      column.canSort = canSort;\n\n      if (column.canSort) {\n        column.toggleSortBy = function (desc, multi) {\n          return toggleSortBy(column.id, desc, multi);\n        };\n\n        column.clearSortBy = function () {\n          dispatch({\n            type: actions.clearSortBy,\n            columnId: column.id\n          });\n        };\n      }\n\n      column.getSortByToggleProps = makePropGetter(getHooks().getSortByToggleProps, {\n        instance: getInstance(),\n        column: column\n      });\n      var columnSort = sortBy.find(function (d) {\n        return d.id === id;\n      });\n      column.isSorted = !!columnSort;\n      column.sortedIndex = sortBy.findIndex(function (d) {\n        return d.id === id;\n      });\n      column.isSortedDesc = column.isSorted ? columnSort.desc : undefined;\n    });\n\n    var _React$useMemo = React.useMemo(function () {\n      if (manualSortBy || !sortBy.length) {\n        return [rows, flatRows];\n      }\n\n      var sortedFlatRows = []; // Filter out sortBys that correspond to non existing columns\n\n      var availableSortBy = sortBy.filter(function (sort) {\n        return allColumns.find(function (col) {\n          return col.id === sort.id;\n        });\n      });\n\n      var sortData = function sortData(rows) {\n        // Use the orderByFn to compose multiple sortBy's together.\n        // This will also perform a stable sorting using the row index\n        // if needed.\n        var sortedData = orderByFn(rows, availableSortBy.map(function (sort) {\n          // Support custom sorting methods for each column\n          var column = allColumns.find(function (d) {\n            return d.id === sort.id;\n          });\n\n          if (!column) {\n            throw new Error(\"React-Table: Could not find a column with id: \" + sort.id + \" while sorting\");\n          }\n\n          var sortType = column.sortType; // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n\n          var sortMethod = isFunction(sortType) || (userSortTypes || {})[sortType] || sortTypes[sortType];\n\n          if (!sortMethod) {\n            throw new Error(\"React-Table: Could not find a valid sortType of '\" + sortType + \"' for column '\" + sort.id + \"'.\");\n          } // Return the correct sortFn.\n          // This function should always return in ascending order\n\n\n          return function (a, b) {\n            return sortMethod(a, b, sort.id, sort.desc);\n          };\n        }), // Map the directions\n        availableSortBy.map(function (sort) {\n          // Detect and use the sortInverted option\n          var column = allColumns.find(function (d) {\n            return d.id === sort.id;\n          });\n\n          if (column && column.sortInverted) {\n            return sort.desc;\n          }\n\n          return !sort.desc;\n        })); // If there are sub-rows, sort them\n\n        sortedData.forEach(function (row) {\n          sortedFlatRows.push(row);\n\n          if (!row.subRows || row.subRows.length <= 1) {\n            return;\n          }\n\n          row.subRows = sortData(row.subRows);\n        });\n        return sortedData;\n      };\n\n      return [sortData(rows), sortedFlatRows];\n    }, [manualSortBy, sortBy, rows, flatRows, allColumns, orderByFn, userSortTypes]),\n        sortedRows = _React$useMemo[0],\n        sortedFlatRows = _React$useMemo[1];\n\n    var getAutoResetSortBy = useGetLatest(autoResetSortBy);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetSortBy()) {\n        dispatch({\n          type: actions.resetSortBy\n        });\n      }\n    }, [manualSortBy ? null : data]);\n    Object.assign(instance, {\n      preSortedRows: rows,\n      preSortedFlatRows: flatRows,\n      sortedRows: sortedRows,\n      sortedFlatRows: sortedFlatRows,\n      rows: sortedRows,\n      flatRows: sortedFlatRows,\n      toggleSortBy: toggleSortBy\n    });\n  }\n\n  function defaultOrderByFn(arr, funcs, dirs) {\n    return [].concat(arr).sort(function (rowA, rowB) {\n      for (var i = 0; i < funcs.length; i += 1) {\n        var sortFn = funcs[i];\n        var desc = dirs[i] === false || dirs[i] === 'desc';\n        var sortInt = sortFn(rowA, rowB);\n\n        if (sortInt !== 0) {\n          return desc ? -sortInt : sortInt;\n        }\n      }\n\n      return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index;\n    });\n  }\n\n  var pluginName = 'usePagination'; // Actions\n\n  actions.resetPage = 'resetPage';\n  actions.gotoPage = 'gotoPage';\n  actions.setPageSize = 'setPageSize';\n\n  var usePagination = function usePagination(hooks) {\n    hooks.stateReducers.push(reducer$6);\n    hooks.useInstance.push(useInstance$6);\n  };\n\n  usePagination.pluginName = pluginName;\n\n  function reducer$6(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        pageSize: 10,\n        pageIndex: 0\n      }, state);\n    }\n\n    if (action.type === actions.resetPage) {\n      return _extends({}, state, {\n        pageIndex: instance.initialState.pageIndex || 0\n      });\n    }\n\n    if (action.type === actions.gotoPage) {\n      var pageCount = instance.pageCount,\n          page = instance.page;\n      var newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex);\n      var cannnotPreviousPage = newPageIndex < 0;\n      var cannotNextPage = pageCount === -1 ? page.length < state.pageSize : newPageIndex > pageCount - 1;\n\n      if (cannnotPreviousPage || cannotNextPage) {\n        return state;\n      }\n\n      return _extends({}, state, {\n        pageIndex: newPageIndex\n      });\n    }\n\n    if (action.type === actions.setPageSize) {\n      var pageSize = action.pageSize;\n      var topRowIndex = state.pageSize * state.pageIndex;\n      var pageIndex = Math.floor(topRowIndex / pageSize);\n      return _extends({}, state, {\n        pageIndex: pageIndex,\n        pageSize: pageSize\n      });\n    }\n  }\n\n  function useInstance$6(instance) {\n    var rows = instance.rows,\n        _instance$autoResetPa = instance.autoResetPage,\n        autoResetPage = _instance$autoResetPa === void 0 ? true : _instance$autoResetPa,\n        _instance$manualExpan = instance.manualExpandedKey,\n        manualExpandedKey = _instance$manualExpan === void 0 ? 'expanded' : _instance$manualExpan,\n        plugins = instance.plugins,\n        userPageCount = instance.pageCount,\n        _instance$paginateExp = instance.paginateExpandedRows,\n        paginateExpandedRows = _instance$paginateExp === void 0 ? true : _instance$paginateExp,\n        _instance$expandSubRo = instance.expandSubRows,\n        expandSubRows = _instance$expandSubRo === void 0 ? true : _instance$expandSubRo,\n        _instance$state = instance.state,\n        pageSize = _instance$state.pageSize,\n        pageIndex = _instance$state.pageIndex,\n        expanded = _instance$state.expanded,\n        globalFilter = _instance$state.globalFilter,\n        filters = _instance$state.filters,\n        groupBy = _instance$state.groupBy,\n        sortBy = _instance$state.sortBy,\n        dispatch = instance.dispatch,\n        data = instance.data,\n        manualPagination = instance.manualPagination;\n    ensurePluginOrder(plugins, ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'], 'usePagination');\n    var getAutoResetPage = useGetLatest(autoResetPage);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetPage()) {\n        dispatch({\n          type: actions.resetPage\n        });\n      }\n    }, [dispatch, manualPagination ? null : data, globalFilter, filters, groupBy, sortBy]);\n    var pageCount = manualPagination ? userPageCount : Math.ceil(rows.length / pageSize);\n    var pageOptions = React.useMemo(function () {\n      return pageCount > 0 ? [].concat(new Array(pageCount)).fill(null).map(function (d, i) {\n        return i;\n      }) : [];\n    }, [pageCount]);\n    var page = React.useMemo(function () {\n      var page;\n\n      if (manualPagination) {\n        page = rows;\n      } else {\n        var pageStart = pageSize * pageIndex;\n        var pageEnd = pageStart + pageSize;\n        page = rows.slice(pageStart, pageEnd);\n      }\n\n      if (paginateExpandedRows) {\n        return page;\n      }\n\n      return expandRows(page, {\n        manualExpandedKey: manualExpandedKey,\n        expanded: expanded,\n        expandSubRows: expandSubRows\n      });\n    }, [expandSubRows, expanded, manualExpandedKey, manualPagination, pageIndex, pageSize, paginateExpandedRows, rows]);\n    var canPreviousPage = pageIndex > 0;\n    var canNextPage = pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1;\n    var gotoPage = React.useCallback(function (pageIndex) {\n      dispatch({\n        type: actions.gotoPage,\n        pageIndex: pageIndex\n      });\n    }, [dispatch]);\n    var previousPage = React.useCallback(function () {\n      return gotoPage(function (old) {\n        return old - 1;\n      });\n    }, [gotoPage]);\n    var nextPage = React.useCallback(function () {\n      return gotoPage(function (old) {\n        return old + 1;\n      });\n    }, [gotoPage]);\n    var setPageSize = React.useCallback(function (pageSize) {\n      dispatch({\n        type: actions.setPageSize,\n        pageSize: pageSize\n      });\n    }, [dispatch]);\n    Object.assign(instance, {\n      pageOptions: pageOptions,\n      pageCount: pageCount,\n      page: page,\n      canPreviousPage: canPreviousPage,\n      canNextPage: canNextPage,\n      gotoPage: gotoPage,\n      previousPage: previousPage,\n      nextPage: nextPage,\n      setPageSize: setPageSize\n    });\n  }\n\n  actions.resetPivot = 'resetPivot';\n  actions.togglePivot = 'togglePivot';\n\n  var _UNSTABLE_usePivotColumns = function _UNSTABLE_usePivotColumns(hooks) {\n    hooks.getPivotToggleProps = [defaultGetPivotToggleProps];\n    hooks.stateReducers.push(reducer$7);\n    hooks.useInstanceAfterData.push(useInstanceAfterData);\n    hooks.allColumns.push(allColumns);\n    hooks.accessValue.push(accessValue);\n    hooks.materializedColumns.push(materializedColumns);\n    hooks.materializedColumnsDeps.push(materializedColumnsDeps);\n    hooks.visibleColumns.push(visibleColumns$1);\n    hooks.visibleColumnsDeps.push(visibleColumnsDeps);\n    hooks.useInstance.push(useInstance$7);\n    hooks.prepareRow.push(prepareRow$2);\n  };\n\n  _UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns';\n  var defaultPivotColumns = [];\n\n  var defaultGetPivotToggleProps = function defaultGetPivotToggleProps(props, _ref) {\n    var header = _ref.header;\n    return [props, {\n      onClick: header.canPivot ? function (e) {\n        e.persist();\n        header.togglePivot();\n      } : undefined,\n      style: {\n        cursor: header.canPivot ? 'pointer' : undefined\n      },\n      title: 'Toggle Pivot'\n    }];\n  }; // Reducer\n\n\n  function reducer$7(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        pivotColumns: defaultPivotColumns\n      }, state);\n    }\n\n    if (action.type === actions.resetPivot) {\n      return _extends({}, state, {\n        pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns\n      });\n    }\n\n    if (action.type === actions.togglePivot) {\n      var columnId = action.columnId,\n          setPivot = action.value;\n      var resolvedPivot = typeof setPivot !== 'undefined' ? setPivot : !state.pivotColumns.includes(columnId);\n\n      if (resolvedPivot) {\n        return _extends({}, state, {\n          pivotColumns: [].concat(state.pivotColumns, [columnId])\n        });\n      }\n\n      return _extends({}, state, {\n        pivotColumns: state.pivotColumns.filter(function (d) {\n          return d !== columnId;\n        })\n      });\n    }\n  }\n\n  function useInstanceAfterData(instance) {\n    instance.allColumns.forEach(function (column) {\n      column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n    });\n  }\n\n  function allColumns(columns, _ref2) {\n    var instance = _ref2.instance;\n    columns.forEach(function (column) {\n      column.isPivotSource = instance.state.pivotColumns.includes(column.id);\n      column.uniqueValues = new Set();\n    });\n    return columns;\n  }\n\n  function accessValue(value, _ref3) {\n    var column = _ref3.column;\n\n    if (column.uniqueValues && typeof value !== 'undefined') {\n      column.uniqueValues.add(value);\n    }\n\n    return value;\n  }\n\n  function materializedColumns(materialized, _ref4) {\n    var instance = _ref4.instance;\n    var allColumns = instance.allColumns,\n        state = instance.state;\n\n    if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n      return materialized;\n    }\n\n    var pivotColumns = state.pivotColumns.map(function (id) {\n      return allColumns.find(function (d) {\n        return d.id === id;\n      });\n    }).filter(Boolean);\n    var sourceColumns = allColumns.filter(function (d) {\n      return !d.isPivotSource && !state.groupBy.includes(d.id) && !state.pivotColumns.includes(d.id);\n    });\n\n    var buildPivotColumns = function buildPivotColumns(depth, parent, pivotFilters) {\n      if (depth === void 0) {\n        depth = 0;\n      }\n\n      if (pivotFilters === void 0) {\n        pivotFilters = [];\n      }\n\n      var pivotColumn = pivotColumns[depth];\n\n      if (!pivotColumn) {\n        return sourceColumns.map(function (sourceColumn) {\n          // TODO: We could offer support here for renesting pivoted\n          // columns inside copies of their header groups. For now,\n          // that seems like it would be (1) overkill on nesting, considering\n          // you already get nesting for every pivot level and (2)\n          // really hard. :)\n          return _extends({}, sourceColumn, {\n            canPivot: false,\n            isPivoted: true,\n            parent: parent,\n            depth: depth,\n            id: \"\" + (parent ? parent.id + \".\" + sourceColumn.id : sourceColumn.id),\n            accessor: function accessor(originalRow, i, row) {\n              if (pivotFilters.every(function (filter) {\n                return filter(row);\n              })) {\n                return row.values[sourceColumn.id];\n              }\n            }\n          });\n        });\n      }\n\n      var uniqueValues = Array.from(pivotColumn.uniqueValues).sort();\n      return uniqueValues.map(function (uniqueValue) {\n        var columnGroup = _extends({}, pivotColumn, {\n          Header: pivotColumn.PivotHeader || typeof pivotColumn.header === 'string' ? pivotColumn.Header + \": \" + uniqueValue : uniqueValue,\n          isPivotGroup: true,\n          parent: parent,\n          depth: depth,\n          id: parent ? parent.id + \".\" + pivotColumn.id + \".\" + uniqueValue : pivotColumn.id + \".\" + uniqueValue,\n          pivotValue: uniqueValue\n        });\n\n        columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [].concat(pivotFilters, [function (row) {\n          return row.values[pivotColumn.id] === uniqueValue;\n        }]));\n        return columnGroup;\n      });\n    };\n\n    var newMaterialized = flattenColumns(buildPivotColumns());\n    return [].concat(materialized, newMaterialized);\n  }\n\n  function materializedColumnsDeps(deps, _ref5) {\n    var _ref5$instance$state = _ref5.instance.state,\n        pivotColumns = _ref5$instance$state.pivotColumns,\n        groupBy = _ref5$instance$state.groupBy;\n    return [].concat(deps, [pivotColumns, groupBy]);\n  }\n\n  function visibleColumns$1(visibleColumns, _ref6) {\n    var state = _ref6.instance.state;\n    visibleColumns = visibleColumns.filter(function (d) {\n      return !d.isPivotSource;\n    });\n\n    if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n      visibleColumns = visibleColumns.filter(function (column) {\n        return column.isGrouped || column.isPivoted;\n      });\n    }\n\n    return visibleColumns;\n  }\n\n  function visibleColumnsDeps(deps, _ref7) {\n    var instance = _ref7.instance;\n    return [].concat(deps, [instance.state.pivotColumns, instance.state.groupBy]);\n  }\n\n  function useInstance$7(instance) {\n    var columns = instance.columns,\n        allColumns = instance.allColumns,\n        flatHeaders = instance.flatHeaders,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        dispatch = instance.dispatch,\n        _instance$autoResetPi = instance.autoResetPivot,\n        autoResetPivot = _instance$autoResetPi === void 0 ? true : _instance$autoResetPi,\n        manaulPivot = instance.manaulPivot,\n        disablePivot = instance.disablePivot,\n        defaultCanPivot = instance.defaultCanPivot;\n    ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns');\n    var getInstance = useGetLatest(instance);\n    allColumns.forEach(function (column) {\n      var accessor = column.accessor,\n          defaultColumnPivot = column.defaultPivot,\n          columnDisablePivot = column.disablePivot;\n      column.canPivot = accessor ? getFirstDefined(column.canPivot, columnDisablePivot === true ? false : undefined, disablePivot === true ? false : undefined, true) : getFirstDefined(column.canPivot, defaultColumnPivot, defaultCanPivot, false);\n\n      if (column.canPivot) {\n        column.togglePivot = function () {\n          return instance.togglePivot(column.id);\n        };\n      }\n\n      column.Aggregated = column.Aggregated || column.Cell;\n    });\n\n    var togglePivot = function togglePivot(columnId, value) {\n      dispatch({\n        type: actions.togglePivot,\n        columnId: columnId,\n        value: value\n      });\n    };\n\n    flatHeaders.forEach(function (header) {\n      header.getPivotToggleProps = makePropGetter(getHooks().getPivotToggleProps, {\n        instance: getInstance(),\n        header: header\n      });\n    });\n    var getAutoResetPivot = useGetLatest(autoResetPivot);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetPivot()) {\n        dispatch({\n          type: actions.resetPivot\n        });\n      }\n    }, [dispatch, manaulPivot ? null : columns]);\n    Object.assign(instance, {\n      togglePivot: togglePivot\n    });\n  }\n\n  function prepareRow$2(row) {\n    row.allCells.forEach(function (cell) {\n      // Grouped cells are in the pivotColumns and the pivot cell for the row\n      cell.isPivoted = cell.column.isPivoted;\n    });\n  }\n\n  var pluginName$1 = 'useRowSelect'; // Actions\n\n  actions.resetSelectedRows = 'resetSelectedRows';\n  actions.toggleAllRowsSelected = 'toggleAllRowsSelected';\n  actions.toggleRowSelected = 'toggleRowSelected';\n\n  var useRowSelect = function useRowSelect(hooks) {\n    hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps];\n    hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps];\n    hooks.stateReducers.push(reducer$8);\n    hooks.useInstance.push(useInstance$8);\n    hooks.prepareRow.push(prepareRow$3);\n  };\n\n  useRowSelect.pluginName = pluginName$1;\n\n  var defaultGetToggleRowSelectedProps = function defaultGetToggleRowSelectedProps(props, _ref) {\n    var instance = _ref.instance,\n        row = _ref.row;\n    var _instance$manualRowSe = instance.manualRowSelectedKey,\n        manualRowSelectedKey = _instance$manualRowSe === void 0 ? 'isSelected' : _instance$manualRowSe;\n    var checked = false;\n\n    if (row.original && row.original[manualRowSelectedKey]) {\n      checked = true;\n    } else {\n      checked = row.isSelected;\n    }\n\n    return [props, {\n      onChange: function onChange(e) {\n        row.toggleRowSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected\n    }];\n  };\n\n  var defaultGetToggleAllRowsSelectedProps = function defaultGetToggleAllRowsSelectedProps(props, _ref2) {\n    var instance = _ref2.instance;\n    return [props, {\n      onChange: function onChange(e) {\n        instance.toggleAllRowsSelected(e.target.checked);\n      },\n      style: {\n        cursor: 'pointer'\n      },\n      checked: instance.isAllRowsSelected,\n      title: 'Toggle All Rows Selected',\n      indeterminate: Boolean(!instance.isAllRowsSelected && Object.keys(instance.state.selectedRowIds).length)\n    }];\n  };\n\n  function reducer$8(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        selectedRowIds: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetSelectedRows) {\n      return _extends({}, state, {\n        selectedRowIds: instance.initialState.selectedRowIds || {}\n      });\n    }\n\n    if (action.type === actions.toggleAllRowsSelected) {\n      var setSelected = action.value;\n      var isAllRowsSelected = instance.isAllRowsSelected,\n          rowsById = instance.rowsById,\n          _instance$nonGroupedR = instance.nonGroupedRowsById,\n          nonGroupedRowsById = _instance$nonGroupedR === void 0 ? rowsById : _instance$nonGroupedR;\n      var selectAll = typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected; // Only remove/add the rows that are visible on the screen\n      //  Leave all the other rows that are selected alone.\n\n      var selectedRowIds = Object.assign({}, state.selectedRowIds);\n\n      if (selectAll) {\n        Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n          selectedRowIds[rowId] = true;\n        });\n      } else {\n        Object.keys(nonGroupedRowsById).forEach(function (rowId) {\n          delete selectedRowIds[rowId];\n        });\n      }\n\n      return _extends({}, state, {\n        selectedRowIds: selectedRowIds\n      });\n    }\n\n    if (action.type === actions.toggleRowSelected) {\n      var id = action.id,\n          _setSelected = action.value;\n      var _rowsById = instance.rowsById,\n          _instance$selectSubRo = instance.selectSubRows,\n          selectSubRows = _instance$selectSubRo === void 0 ? true : _instance$selectSubRo; // Join the ids of deep rows\n      // to make a key, then manage all of the keys\n      // in a flat object\n\n      var row = _rowsById[id];\n      var isSelected = row.isSelected;\n      var shouldExist = typeof _setSelected !== 'undefined' ? _setSelected : !isSelected;\n\n      if (isSelected === shouldExist) {\n        return state;\n      }\n\n      var newSelectedRowIds = _extends({}, state.selectedRowIds);\n\n      var handleRowById = function handleRowById(id) {\n        var row = _rowsById[id];\n\n        if (!row.isGrouped) {\n          if (shouldExist) {\n            newSelectedRowIds[id] = true;\n          } else {\n            delete newSelectedRowIds[id];\n          }\n        }\n\n        if (selectSubRows && row.subRows) {\n          return row.subRows.forEach(function (row) {\n            return handleRowById(row.id);\n          });\n        }\n      };\n\n      handleRowById(id);\n      return _extends({}, state, {\n        selectedRowIds: newSelectedRowIds\n      });\n    }\n  }\n\n  function useInstance$8(instance) {\n    var data = instance.data,\n        rows = instance.rows,\n        getHooks = instance.getHooks,\n        plugins = instance.plugins,\n        rowsById = instance.rowsById,\n        _instance$nonGroupedR2 = instance.nonGroupedRowsById,\n        nonGroupedRowsById = _instance$nonGroupedR2 === void 0 ? rowsById : _instance$nonGroupedR2,\n        _instance$autoResetSe = instance.autoResetSelectedRows,\n        autoResetSelectedRows = _instance$autoResetSe === void 0 ? true : _instance$autoResetSe,\n        selectedRowIds = instance.state.selectedRowIds,\n        _instance$selectSubRo2 = instance.selectSubRows,\n        selectSubRows = _instance$selectSubRo2 === void 0 ? true : _instance$selectSubRo2,\n        dispatch = instance.dispatch;\n    ensurePluginOrder(plugins, ['useFilters', 'useGroupBy', 'useSortBy'], 'useRowSelect');\n    var selectedFlatRows = React.useMemo(function () {\n      var selectedFlatRows = [];\n      rows.forEach(function (row) {\n        var isSelected = selectSubRows ? getRowIsSelected(row, selectedRowIds) : !!selectedRowIds[row.id];\n        row.isSelected = !!isSelected;\n        row.isSomeSelected = isSelected === null;\n\n        if (isSelected) {\n          selectedFlatRows.push(row);\n        }\n      });\n      return selectedFlatRows;\n    }, [rows, selectSubRows, selectedRowIds]);\n    var isAllRowsSelected = Boolean(Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length);\n\n    if (isAllRowsSelected) {\n      if (Object.keys(nonGroupedRowsById).some(function (id) {\n        return !selectedRowIds[id];\n      })) {\n        isAllRowsSelected = false;\n      }\n    }\n\n    var getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetSelectedRows()) {\n        dispatch({\n          type: actions.resetSelectedRows\n        });\n      }\n    }, [dispatch, data]);\n    var toggleAllRowsSelected = React.useCallback(function (value) {\n      return dispatch({\n        type: actions.toggleAllRowsSelected,\n        value: value\n      });\n    }, [dispatch]);\n    var toggleRowSelected = React.useCallback(function (id, value) {\n      return dispatch({\n        type: actions.toggleRowSelected,\n        id: id,\n        value: value\n      });\n    }, [dispatch]);\n    var getInstance = useGetLatest(instance);\n    var getToggleAllRowsSelectedProps = makePropGetter(getHooks().getToggleAllRowsSelectedProps, {\n      instance: getInstance()\n    });\n    Object.assign(instance, {\n      selectedFlatRows: selectedFlatRows,\n      isAllRowsSelected: isAllRowsSelected,\n      toggleRowSelected: toggleRowSelected,\n      toggleAllRowsSelected: toggleAllRowsSelected,\n      getToggleAllRowsSelectedProps: getToggleAllRowsSelectedProps\n    });\n  }\n\n  function prepareRow$3(row, _ref3) {\n    var instance = _ref3.instance;\n\n    row.toggleRowSelected = function (set) {\n      return instance.toggleRowSelected(row.id, set);\n    };\n\n    row.getToggleRowSelectedProps = makePropGetter(instance.getHooks().getToggleRowSelectedProps, {\n      instance: instance,\n      row: row\n    });\n  }\n\n  function getRowIsSelected(row, selectedRowIds) {\n    if (selectedRowIds[row.id]) {\n      return true;\n    }\n\n    if (row.subRows && row.subRows.length) {\n      var allChildrenSelected = true;\n      var someSelected = false;\n      row.subRows.forEach(function (subRow) {\n        // Bail out early if we know both of these\n        if (someSelected && !allChildrenSelected) {\n          return;\n        }\n\n        if (getRowIsSelected(subRow, selectedRowIds)) {\n          someSelected = true;\n        } else {\n          allChildrenSelected = false;\n        }\n      });\n      return allChildrenSelected ? true : someSelected ? null : false;\n    }\n\n    return false;\n  }\n\n  var defaultInitialRowStateAccessor = function defaultInitialRowStateAccessor(originalRow) {\n    return {};\n  };\n\n  var defaultInitialCellStateAccessor = function defaultInitialCellStateAccessor(originalRow) {\n    return {};\n  }; // Actions\n\n\n  actions.setRowState = 'setRowState';\n  actions.setCellState = 'setCellState';\n  actions.resetRowState = 'resetRowState';\n\n  var useRowState = function useRowState(hooks) {\n    hooks.stateReducers.push(reducer$9);\n    hooks.useInstance.push(useInstance$9);\n    hooks.prepareRow.push(prepareRow$4);\n  };\n\n  useRowState.pluginName = 'useRowState';\n\n  function reducer$9(state, action, previousState, instance) {\n    var _instance$initialRowS = instance.initialRowStateAccessor,\n        initialRowStateAccessor = _instance$initialRowS === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS,\n        _instance$initialCell = instance.initialCellStateAccessor,\n        initialCellStateAccessor = _instance$initialCell === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell,\n        rowsById = instance.rowsById;\n\n    if (action.type === actions.init) {\n      return _extends({\n        rowState: {}\n      }, state);\n    }\n\n    if (action.type === actions.resetRowState) {\n      return _extends({}, state, {\n        rowState: instance.initialState.rowState || {}\n      });\n    }\n\n    if (action.type === actions.setRowState) {\n      var _extends2;\n\n      var rowId = action.rowId,\n          value = action.value;\n      var oldRowState = typeof state.rowState[rowId] !== 'undefined' ? state.rowState[rowId] : initialRowStateAccessor(rowsById[rowId].original);\n      return _extends({}, state, {\n        rowState: _extends({}, state.rowState, (_extends2 = {}, _extends2[rowId] = functionalUpdate(value, oldRowState), _extends2))\n      });\n    }\n\n    if (action.type === actions.setCellState) {\n      var _oldRowState$cellStat, _extends3, _extends4;\n\n      var _rowId = action.rowId,\n          columnId = action.columnId,\n          _value = action.value;\n\n      var _oldRowState = typeof state.rowState[_rowId] !== 'undefined' ? state.rowState[_rowId] : initialRowStateAccessor(rowsById[_rowId].original);\n\n      var oldCellState = typeof (_oldRowState == null ? void 0 : (_oldRowState$cellStat = _oldRowState.cellState) == null ? void 0 : _oldRowState$cellStat[columnId]) !== 'undefined' ? _oldRowState.cellState[columnId] : initialCellStateAccessor(rowsById[_rowId].original);\n      return _extends({}, state, {\n        rowState: _extends({}, state.rowState, (_extends4 = {}, _extends4[_rowId] = _extends({}, _oldRowState, {\n          cellState: _extends({}, _oldRowState.cellState || {}, (_extends3 = {}, _extends3[columnId] = functionalUpdate(_value, oldCellState), _extends3))\n        }), _extends4))\n      });\n    }\n  }\n\n  function useInstance$9(instance) {\n    var _instance$autoResetRo = instance.autoResetRowState,\n        autoResetRowState = _instance$autoResetRo === void 0 ? true : _instance$autoResetRo,\n        data = instance.data,\n        dispatch = instance.dispatch;\n    var setRowState = React.useCallback(function (rowId, value) {\n      return dispatch({\n        type: actions.setRowState,\n        rowId: rowId,\n        value: value\n      });\n    }, [dispatch]);\n    var setCellState = React.useCallback(function (rowId, columnId, value) {\n      return dispatch({\n        type: actions.setCellState,\n        rowId: rowId,\n        columnId: columnId,\n        value: value\n      });\n    }, [dispatch]);\n    var getAutoResetRowState = useGetLatest(autoResetRowState);\n    useMountedLayoutEffect(function () {\n      if (getAutoResetRowState()) {\n        dispatch({\n          type: actions.resetRowState\n        });\n      }\n    }, [data]);\n    Object.assign(instance, {\n      setRowState: setRowState,\n      setCellState: setCellState\n    });\n  }\n\n  function prepareRow$4(row, _ref) {\n    var instance = _ref.instance;\n    var _instance$initialRowS2 = instance.initialRowStateAccessor,\n        initialRowStateAccessor = _instance$initialRowS2 === void 0 ? defaultInitialRowStateAccessor : _instance$initialRowS2,\n        _instance$initialCell2 = instance.initialCellStateAccessor,\n        initialCellStateAccessor = _instance$initialCell2 === void 0 ? defaultInitialCellStateAccessor : _instance$initialCell2,\n        rowState = instance.state.rowState;\n\n    if (row.original) {\n      row.state = typeof rowState[row.id] !== 'undefined' ? rowState[row.id] : initialRowStateAccessor(row.original);\n\n      row.setState = function (updater) {\n        return instance.setRowState(row.id, updater);\n      };\n\n      row.cells.forEach(function (cell) {\n        if (!row.state.cellState) {\n          row.state.cellState = {};\n        }\n\n        cell.state = typeof row.state.cellState[cell.column.id] !== 'undefined' ? row.state.cellState[cell.column.id] : initialCellStateAccessor(row.original);\n\n        cell.setState = function (updater) {\n          return instance.setCellState(row.id, cell.column.id, updater);\n        };\n      });\n    }\n  }\n\n  actions.resetColumnOrder = 'resetColumnOrder';\n  actions.setColumnOrder = 'setColumnOrder';\n\n  var useColumnOrder = function useColumnOrder(hooks) {\n    hooks.stateReducers.push(reducer$a);\n    hooks.visibleColumnsDeps.push(function (deps, _ref) {\n      var instance = _ref.instance;\n      return [].concat(deps, [instance.state.columnOrder]);\n    });\n    hooks.visibleColumns.push(visibleColumns$2);\n    hooks.useInstance.push(useInstance$a);\n  };\n\n  useColumnOrder.pluginName = 'useColumnOrder';\n\n  function reducer$a(state, action, previousState, instance) {\n    if (action.type === actions.init) {\n      return _extends({\n        columnOrder: []\n      }, state);\n    }\n\n    if (action.type === actions.resetColumnOrder) {\n      return _extends({}, state, {\n        columnOrder: instance.initialState.columnOrder || []\n      });\n    }\n\n    if (action.type === actions.setColumnOrder) {\n      return _extends({}, state, {\n        columnOrder: functionalUpdate(action.columnOrder, state.columnOrder)\n      });\n    }\n  }\n\n  function visibleColumns$2(columns, _ref2) {\n    var columnOrder = _ref2.instance.state.columnOrder; // If there is no order, return the normal columns\n\n    if (!columnOrder || !columnOrder.length) {\n      return columns;\n    }\n\n    var columnOrderCopy = [].concat(columnOrder); // If there is an order, make a copy of the columns\n\n    var columnsCopy = [].concat(columns); // And make a new ordered array of the columns\n\n    var columnsInOrder = []; // Loop over the columns and place them in order into the new array\n\n    var _loop = function _loop() {\n      var targetColumnId = columnOrderCopy.shift();\n      var foundIndex = columnsCopy.findIndex(function (d) {\n        return d.id === targetColumnId;\n      });\n\n      if (foundIndex > -1) {\n        columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0]);\n      }\n    };\n\n    while (columnsCopy.length && columnOrderCopy.length) {\n      _loop();\n    } // If there are any columns left, add them to the end\n\n\n    return [].concat(columnsInOrder, columnsCopy);\n  }\n\n  function useInstance$a(instance) {\n    var dispatch = instance.dispatch;\n    instance.setColumnOrder = React.useCallback(function (columnOrder) {\n      return dispatch({\n        type: actions.setColumnOrder,\n        columnOrder: columnOrder\n      });\n    }, [dispatch]);\n  }\n\n  defaultColumn.canResize = true; // Actions\n\n  actions.columnStartResizing = 'columnStartResizing';\n  actions.columnResizing = 'columnResizing';\n  actions.columnDoneResizing = 'columnDoneResizing';\n\n  var useResizeColumns = function useResizeColumns(hooks) {\n    hooks.getResizerProps = [defaultGetResizerProps];\n    hooks.getHeaderProps.push({\n      style: {\n        position: 'relative'\n      }\n    });\n    hooks.stateReducers.push(reducer$b);\n    hooks.useInstance.push(useInstance$b);\n    hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions$1);\n  };\n\n  var defaultGetResizerProps = function defaultGetResizerProps(props, _ref) {\n    var instance = _ref.instance,\n        header = _ref.header;\n    var dispatch = instance.dispatch;\n\n    var onResizeStart = function onResizeStart(e, header) {\n      var isTouchEvent = false;\n\n      if (e.type === 'touchstart') {\n        // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n        if (e.touches && e.touches.length > 1) {\n          return;\n        }\n\n        isTouchEvent = true;\n      }\n\n      var headersToResize = getLeafHeaders(header);\n      var headerIdWidths = headersToResize.map(function (d) {\n        return [d.id, d.totalWidth];\n      });\n      var clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX;\n\n      var dispatchMove = function dispatchMove(clientXPos) {\n        dispatch({\n          type: actions.columnResizing,\n          clientX: clientXPos\n        });\n      };\n\n      var dispatchEnd = function dispatchEnd() {\n        return dispatch({\n          type: actions.columnDoneResizing\n        });\n      };\n\n      var handlersAndEvents = {\n        mouse: {\n          moveEvent: 'mousemove',\n          moveHandler: function moveHandler(e) {\n            return dispatchMove(e.clientX);\n          },\n          upEvent: 'mouseup',\n          upHandler: function upHandler(e) {\n            document.removeEventListener('mousemove', handlersAndEvents.mouse.moveHandler);\n            document.removeEventListener('mouseup', handlersAndEvents.mouse.upHandler);\n            dispatchEnd();\n          }\n        },\n        touch: {\n          moveEvent: 'touchmove',\n          moveHandler: function moveHandler(e) {\n            if (e.cancelable) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n\n            dispatchMove(e.touches[0].clientX);\n            return false;\n          },\n          upEvent: 'touchend',\n          upHandler: function upHandler(e) {\n            document.removeEventListener(handlersAndEvents.touch.moveEvent, handlersAndEvents.touch.moveHandler);\n            document.removeEventListener(handlersAndEvents.touch.upEvent, handlersAndEvents.touch.moveHandler);\n            dispatchEnd();\n          }\n        }\n      };\n      var events = isTouchEvent ? handlersAndEvents.touch : handlersAndEvents.mouse;\n      document.addEventListener(events.moveEvent, events.moveHandler, {\n        passive: false\n      });\n      document.addEventListener(events.upEvent, events.upHandler, {\n        passive: false\n      });\n      dispatch({\n        type: actions.columnStartResizing,\n        columnId: header.id,\n        columnWidth: header.totalWidth,\n        headerIdWidths: headerIdWidths,\n        clientX: clientX\n      });\n    };\n\n    return [props, {\n      onMouseDown: function onMouseDown(e) {\n        return e.persist() || onResizeStart(e, header);\n      },\n      onTouchStart: function onTouchStart(e) {\n        return e.persist() || onResizeStart(e, header);\n      },\n      style: {\n        cursor: 'ew-resize'\n      },\n      draggable: false,\n      role: 'separator'\n    }];\n  };\n\n  useResizeColumns.pluginName = 'useResizeColumns';\n\n  function reducer$b(state, action) {\n    if (action.type === actions.init) {\n      return _extends({\n        columnResizing: {\n          columnWidths: {}\n        }\n      }, state);\n    }\n\n    if (action.type === actions.columnStartResizing) {\n      var clientX = action.clientX,\n          columnId = action.columnId,\n          columnWidth = action.columnWidth,\n          headerIdWidths = action.headerIdWidths;\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          startX: clientX,\n          headerIdWidths: headerIdWidths,\n          columnWidth: columnWidth,\n          isResizingColumn: columnId\n        })\n      });\n    }\n\n    if (action.type === actions.columnResizing) {\n      var _clientX = action.clientX;\n      var _state$columnResizing = state.columnResizing,\n          startX = _state$columnResizing.startX,\n          _columnWidth = _state$columnResizing.columnWidth,\n          _headerIdWidths = _state$columnResizing.headerIdWidths;\n      var deltaX = _clientX - startX;\n      var percentageDeltaX = deltaX / _columnWidth;\n      var newColumnWidths = {};\n\n      _headerIdWidths.forEach(function (_ref2) {\n        var headerId = _ref2[0],\n            headerWidth = _ref2[1];\n        newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);\n      });\n\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          columnWidths: _extends({}, state.columnResizing.columnWidths, {}, newColumnWidths)\n        })\n      });\n    }\n\n    if (action.type === actions.columnDoneResizing) {\n      return _extends({}, state, {\n        columnResizing: _extends({}, state.columnResizing, {\n          startX: null,\n          isResizingColumn: null\n        })\n      });\n    }\n  }\n\n  var useInstanceBeforeDimensions$1 = function useInstanceBeforeDimensions(instance) {\n    var flatHeaders = instance.flatHeaders,\n        disableResizing = instance.disableResizing,\n        getHooks = instance.getHooks,\n        columnResizing = instance.state.columnResizing;\n    var getInstance = useGetLatest(instance);\n    flatHeaders.forEach(function (header) {\n      var canResize = getFirstDefined(header.disableResizing === true ? false : undefined, disableResizing === true ? false : undefined, true);\n      header.canResize = canResize;\n      header.width = columnResizing.columnWidths[header.id] || header.width;\n      header.isResizing = columnResizing.isResizingColumn === header.id;\n\n      if (canResize) {\n        header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n          instance: getInstance(),\n          header: header\n        });\n      }\n    });\n  };\n\n  function useInstance$b(_ref3) {\n    var plugins = _ref3.plugins;\n    ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns');\n  }\n\n  function getLeafHeaders(header) {\n    var leafHeaders = [];\n\n    var recurseHeader = function recurseHeader(header) {\n      if (header.columns && header.columns.length) {\n        header.columns.map(recurseHeader);\n      }\n\n      leafHeaders.push(header);\n    };\n\n    recurseHeader(header);\n    return leafHeaders;\n  }\n\n  var cellStyles = {\n    position: 'absolute',\n    top: 0\n  };\n\n  var useAbsoluteLayout = function useAbsoluteLayout(hooks) {\n    hooks.getTableBodyProps.push(getRowStyles);\n    hooks.getRowProps.push(getRowStyles);\n    hooks.getHeaderGroupProps.push(getRowStyles);\n    hooks.getHeaderProps.push(function (props, _ref) {\n      var column = _ref.column;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: column.totalLeft + \"px\",\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getCellProps.push(function (props, _ref2) {\n      var cell = _ref2.cell;\n      return [props, {\n        style: _extends({}, cellStyles, {\n          left: cell.column.totalLeft + \"px\",\n          width: cell.column.totalWidth + \"px\"\n        })\n      }];\n    });\n  };\n\n  useAbsoluteLayout.pluginName = 'useAbsoluteLayout';\n\n  var getRowStyles = function getRowStyles(props, _ref3) {\n    var instance = _ref3.instance;\n    return [props, {\n      style: {\n        position: 'relative',\n        width: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var cellStyles$1 = {\n    display: 'inline-block',\n    boxSizing: 'border-box'\n  };\n\n  var getRowStyles$1 = function getRowStyles(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      style: {\n        display: 'flex',\n        width: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var useBlockLayout = function useBlockLayout(hooks) {\n    hooks.getRowProps.push(getRowStyles$1);\n    hooks.getHeaderGroupProps.push(getRowStyles$1);\n    hooks.getHeaderProps.push(function (props, _ref2) {\n      var column = _ref2.column;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: column.totalWidth + \"px\"\n        })\n      }];\n    });\n    hooks.getCellProps.push(function (props, _ref3) {\n      var cell = _ref3.cell;\n      return [props, {\n        style: _extends({}, cellStyles$1, {\n          width: cell.column.totalWidth + \"px\"\n        })\n      }];\n    });\n  };\n\n  useBlockLayout.pluginName = 'useBlockLayout';\n\n  function useFlexLayout(hooks) {\n    hooks.getTableProps.push(getTableProps);\n    hooks.getRowProps.push(getRowStyles$2);\n    hooks.getHeaderGroupProps.push(getRowStyles$2);\n    hooks.getHeaderProps.push(getHeaderProps);\n    hooks.getCellProps.push(getCellProps);\n  }\n\n  useFlexLayout.pluginName = 'useFlexLayout';\n\n  var getTableProps = function getTableProps(props, _ref) {\n    var instance = _ref.instance;\n    return [props, {\n      style: {\n        minWidth: instance.totalColumnsWidth + \"px\"\n      }\n    }];\n  };\n\n  var getRowStyles$2 = function getRowStyles(props, _ref2) {\n    var instance = _ref2.instance;\n    return [props, {\n      style: {\n        display: 'flex',\n        flex: '1 0 auto',\n        minWidth: instance.totalColumnsMinWidth + \"px\"\n      }\n    }];\n  };\n\n  var getHeaderProps = function getHeaderProps(props, _ref3) {\n    var column = _ref3.column;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: column.totalFlexWidth ? column.totalFlexWidth + \" 0 auto\" : undefined,\n        minWidth: column.totalMinWidth + \"px\",\n        width: column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  var getCellProps = function getCellProps(props, _ref4) {\n    var cell = _ref4.cell;\n    return [props, {\n      style: {\n        boxSizing: 'border-box',\n        flex: cell.column.totalFlexWidth + \" 0 auto\",\n        minWidth: cell.column.totalMinWidth + \"px\",\n        width: cell.column.totalWidth + \"px\"\n      }\n    }];\n  };\n\n  exports._UNSTABLE_usePivotColumns = _UNSTABLE_usePivotColumns;\n  exports.actions = actions;\n  exports.defaultColumn = defaultColumn;\n  exports.defaultGroupByFn = defaultGroupByFn;\n  exports.defaultOrderByFn = defaultOrderByFn;\n  exports.ensurePluginOrder = ensurePluginOrder;\n  exports.flexRender = flexRender;\n  exports.functionalUpdate = functionalUpdate;\n  exports.loopHooks = loopHooks;\n  exports.makePropGetter = makePropGetter;\n  exports.makeRenderer = makeRenderer;\n  exports.reduceHooks = reduceHooks;\n  exports.safeUseLayoutEffect = safeUseLayoutEffect;\n  exports.useAbsoluteLayout = useAbsoluteLayout;\n  exports.useAsyncDebounce = useAsyncDebounce;\n  exports.useBlockLayout = useBlockLayout;\n  exports.useColumnOrder = useColumnOrder;\n  exports.useExpanded = useExpanded;\n  exports.useFilters = useFilters;\n  exports.useFlexLayout = useFlexLayout;\n  exports.useGetLatest = useGetLatest;\n  exports.useGlobalFilter = useGlobalFilter;\n  exports.useGroupBy = useGroupBy;\n  exports.useMountedLayoutEffect = useMountedLayoutEffect;\n  exports.usePagination = usePagination;\n  exports.useResizeColumns = useResizeColumns;\n  exports.useRowSelect = useRowSelect;\n  exports.useRowState = useRowState;\n  exports.useSortBy = useSortBy;\n  exports.useTable = useTable;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"names":["renderErr","actions","init","defaultColumn","Cell","value","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","propList","style","className","rest","next","props","handlePropGetter","userProps","Array","mergeProps","makePropGetter","meta","reduceHooks","nextValue","process","console","loopHooks","hook","pluginIndex","plugin","befores","beforeIndex","updater","ref","React","safeUseLayoutEffect","useEffect","mountedRef","fn","defaultWait","debounceRef","getDefaultFn","useGetLatest","getDefaultWait","args","clearTimeout","setTimeout","Comp","column","flexRender","isReactComponent","isClassComponent","isExoticComponent","proto","Object","component","depth","parent","assignColumnAccessor","linkColumnStructure","flattenBy","id","accessor","Header","accessorPath","getBy","Footer","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","d","latestParentColumn","newParent","originalId","decorateColumn","placeholderOf","pathObjCache","cacheKey","JSON","pathObj","makePathArray","val","cursor","i","flat","recurse","arr","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","row","rows","isFunction","userFilterTypes","filterTypes","autoRemove","reOpenBracket","reCloseBracket","String","newArr","flattenDeep","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","key","colSpan","defaultGetFooterProps","totalVisibleHeaderCount","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","useOptions","stateReducers","useControlledState","columns","columnsDeps","allColumns","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","useColumnVisibility","hooks","instance","defaultGetToggleHiddenProps","onChange","e","checked","title","defaultGetToggleHideAllColumnsProps","indeterminate","length","action","hiddenColumns","should","state","functionalUpdate","shouldAll","isMountedRef","handleColumn","parentVisible","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","allColumnsHidden","toggleHideColumn","type","columnId","setHiddenColumns","toggleHideAllColumns","getToggleHideAllColumnsProps","getAutoResetHiddenColumns","useMountedLayoutEffect","resetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","initialState","getSubRows","getRowId","stateReducer","useTable","plugins","applyDefaults","instanceRef","makeDefaultPluginHooks","data","userColumns","getStateReducer","reducer","handler","reducerState","flattenColumns","flatRows","rowsById","allColumnsQueue","accessRowsForColumn","accessValueHooks","duplicateColumns","makeHeaderGroups","visibleColumnsDep","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","calculateHeaderWidths","makeRenderer","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","subHeaders","header","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","accessRow","original","cells","parentRows","subRows","useExpanded","defaultGetToggleAllRowsExpandedProps","onClick","defaultGetToggleRowExpandedProps","isAllRowsExpanded","expandAll","setExpanded","exists","shouldExist","_","paginateExpandedRows","autoResetExpanded","ensurePluginOrder","getAutoResetExpanded","Boolean","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","expandRows","expandedDepth","findExpandedDepth","getToggleAllRowsExpandedProps","preExpandedRows","maxDepth","splitId","text","rowValue","exactText","exactTextCase","includes","includesAll","exact","equals","between","min","max","filterValue","temp","useFilters","filters","filterMethod","getFilterMethod","previousfilter","newFilter","shouldAutoRemoveFilter","filter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","setFilter","setAllFilters","columnDefaultCanFilter","columnDisableFilters","getFirstDefined","found","filteredRows","filteredFlatRows","filteredRowsById","filterRows","nonFilteredColumns","getAutoResetFilters","resetFilters","preFilteredRows","preFilteredFlatRows","preFilteredRowsById","useGlobalFilter","globalFilter","undefined","stateWithoutGlobalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","setGlobalFilter","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","columnDisableGlobalFilter","filterableColumns","c","getAutoResetGlobalFilter","resetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","values","emptyArray","emptyObject","useGroupBy","defaultGetGroupByToggleProps","groupBy","setGroupBy","resolvedGroupBy","groupByColumns","col","nonGroupByColumns","defaultUserAggregations","groupByFn","manualGroupBy","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","columnDisableGroupBy","toggleGroupBy","groupedRows","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","existingGroupBy","aggregateRowsToValues","groupedValues","leafValues","columnValue","aggregateValueFn","aggregations","aggregateFn","groupUpRecursively","rowGroupsMap","aggregatedGroupedRows","groupByVal","parentId","leafRows","isGrouped","groupByID","subRow","getAutoResetGroupBy","resetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","resKey","prev","reSplitAlphaNumeric","alphanumeric","a","getRowValueByColumnID","b","toString","aa","bb","an","parseInt","bn","combo","isNaN","compareBasic","useSortBy","defaultGetSortByToggleProps","isMultiSortEvent","sortBy","newSortBy","desc","multi","disableMultiSort","disableSortRemove","disableMultiRemove","maxMultiSortColCount","sortDescFirst","existingSortBy","existingIndex","hasDescDefined","sortAction","orderByFn","userSortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","toggleSortBy","defaultColumnCanSort","columnDisableSortBy","canSort","columnSort","sortedRows","sortedFlatRows","availableSortBy","sort","sortData","sortedData","sortType","sortMethod","sortTypes","getAutoResetSortBy","resetSortBy","preSortedRows","preSortedFlatRows","funcs","sortFn","dirs","sortInt","rowA","rowB","pluginName","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","cannnotPreviousPage","cannotNextPage","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","resetPage","pageOptions","pageStart","pageEnd","canPreviousPage","canNextPage","gotoPage","previousPage","old","nextPage","setPageSize","_UNSTABLE_usePivotColumns","defaultPivotColumns","defaultGetPivotToggleProps","pivotColumns","setPivot","resolvedPivot","sourceColumns","buildPivotColumns","pivotFilters","pivotColumn","canPivot","isPivoted","sourceColumn","uniqueValues","columnGroup","isPivotGroup","pivotValue","uniqueValue","newMaterialized","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","columnDisablePivot","togglePivot","getAutoResetPivot","resetPivot","useRowSelect","defaultGetToggleRowSelectedProps","manualRowSelectedKey","isSomeSelected","defaultGetToggleAllRowsSelectedProps","selectedRowIds","setSelected","isAllRowsSelected","selectAll","selectSubRows","isSelected","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","getAutoResetSelectedRows","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","getToggleAllRowsSelectedProps","allChildrenSelected","someSelected","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","rowId","oldRowState","oldCellState","cellState","autoResetRowState","setRowState","setCellState","getAutoResetRowState","resetRowState","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","useResizeColumns","position","defaultGetResizerProps","onResizeStart","isTouchEvent","headersToResize","getLeafHeaders","headerIdWidths","clientX","dispatchMove","clientXPos","dispatchEnd","columnDoneResizing","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","document","touch","events","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnResizing","columnWidths","startX","isResizingColumn","deltaX","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","canResize","leafHeaders","recurseHeader","cellStyles","top","useAbsoluteLayout","getRowStyles","display","boxSizing","useBlockLayout","useFlexLayout","flex"],"mappings":"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","sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ value = '' }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    const cannnotPreviousPage = newPageIndex < 0\n    const cannotNextPage =\n      pageCount === -1\n        ? page.length < state.pageSize\n        : newPageIndex > pageCount - 1\n\n    if (cannnotPreviousPage || cannotNextPage) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n"]},"metadata":{},"sourceType":"script"}