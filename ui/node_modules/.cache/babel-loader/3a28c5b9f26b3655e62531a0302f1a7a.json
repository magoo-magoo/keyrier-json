{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { RestWalker } from \"./rest\";\nimport { cloneArr, drop, dropRight, first as _first, forEach, isEmpty, last } from \"../../utils/utils\";\nimport { first } from \"./first\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"./gast/gast_public\";\n\nvar AbstractNextPossibleTokensWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this) || this;\n\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    } // immutable for the win\n\n\n    this.ruleStack = cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion\n\n    this.occurrenceStack = cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    } // stop scanning once we found the path\n\n\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n\n  return AbstractNextPossibleTokensWalker;\n}(RestWalker);\n\nexport { AbstractNextPossibleTokensWalker };\n\nvar NextAfterTokenWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextAfterTokenWalker, _super);\n\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path) || this;\n\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  };\n\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\n\nexport { NextAfterTokenWalker };\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\n\nvar AbstractNextTerminalAfterProductionWalker =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this) || this;\n\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n\n  return AbstractNextTerminalAfterProductionWalker;\n}(RestWalker);\n\nexport { AbstractNextTerminalAfterProductionWalker };\n\nvar NextTerminalAfterManyWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterMany === undefined;\n\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterManyWalker };\n\nvar NextTerminalAfterManySepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterManySepWalker };\n\nvar NextTerminalAfterAtLeastOneWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterAtLeastOneWalker }; // TODO: reduce code duplication in the AfterWalkers\n\nvar NextTerminalAfterAtLeastOneSepWalker =\n/** @class */\nfunction (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = _first(currRest.concat(prevRest));\n\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\n\nexport { NextTerminalAfterAtLeastOneSepWalker };\nexport function possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  } // avoid side effects\n\n\n  currPath = cloneArr(currPath);\n  var result = [];\n  var i = 0; // TODO: avoid inner funcs\n\n  function remainingPathWith(nextDef) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  } // TODO: avoid inner funcs\n\n\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n\n\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      var newDef = prod.definition.concat([new Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      var newDef = [new Alternative({\n        definition: prod.definition\n      }), new Repetition({\n        definition: [new Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new Repetition({\n        definition: [new Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      var newDef = prod.definition.concat([new Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, function (currAlt) {\n        result = getAlternativesForProd(currAlt.definition);\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i)\n  });\n  return result;\n}\nexport function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\"; // to avoid creating a new Array each time.\n\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    var currPath = possiblePaths.pop(); // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && last(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n\n      continue;\n    }\n\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack; // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    var prod = currDef[0];\n    /* istanbul ignore else */\n\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        } // end of the line\n\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      var newRuleStack = cloneArr(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = cloneArr(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout); // required marker to avoid backtracking paths whose higher priority alternatives already matched\n\n      possiblePaths.push(EXIT_ALTERNATIVE); // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n\n      var nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n\n  return result;\n}\n\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = cloneArr(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = cloneArr(currOccurrenceStack); // top rule is always assumed to have been called with occurrence index 1\n\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"sources":["../../../../src/parse/grammar/interpreter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { RestWalker } from \"./rest\";\nimport { cloneArr, drop, dropRight, first as _first, forEach, isEmpty, last } from \"../../utils/utils\";\nimport { first } from \"./first\";\nimport { Alternation, Alternative, NonTerminal, Option, Repetition, RepetitionMandatory, RepetitionMandatoryWithSeparator, RepetitionWithSeparator, Rule, Terminal } from \"./gast/gast_public\";\nvar AbstractNextPossibleTokensWalker = /** @class */ (function (_super) {\n    __extends(AbstractNextPossibleTokensWalker, _super);\n    function AbstractNextPossibleTokensWalker(topProd, path) {\n        var _this = _super.call(this) || this;\n        _this.topProd = topProd;\n        _this.path = path;\n        _this.possibleTokTypes = [];\n        _this.nextProductionName = \"\";\n        _this.nextProductionOccurrence = 0;\n        _this.found = false;\n        _this.isAtEndOfPath = false;\n        return _this;\n    }\n    AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n        this.found = false;\n        if (this.path.ruleStack[0] !== this.topProd.name) {\n            throw Error(\"The path does not start with the walker's top Rule!\");\n        }\n        // immutable for the win\n        this.ruleStack = cloneArr(this.path.ruleStack).reverse(); // intelij bug requires assertion\n        this.occurrenceStack = cloneArr(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n        // already verified that the first production is valid, we now seek the 2nd production\n        this.ruleStack.pop();\n        this.occurrenceStack.pop();\n        this.updateExpectedNext();\n        this.walk(this.topProd);\n        return this.possibleTokTypes;\n    };\n    AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n        if (prevRest === void 0) { prevRest = []; }\n        // stop scanning once we found the path\n        if (!this.found) {\n            _super.prototype.walk.call(this, prod, prevRest);\n        }\n    };\n    AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n        // found the next production, need to keep walking in it\n        if (refProd.referencedRule.name === this.nextProductionName &&\n            refProd.idx === this.nextProductionOccurrence) {\n            var fullRest = currRest.concat(prevRest);\n            this.updateExpectedNext();\n            this.walk(refProd.referencedRule, fullRest);\n        }\n    };\n    AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n        // need to consume the Terminal\n        if (isEmpty(this.ruleStack)) {\n            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n            // really seeking is the last Terminal...\n            this.nextProductionName = \"\";\n            this.nextProductionOccurrence = 0;\n            this.isAtEndOfPath = true;\n        }\n        else {\n            this.nextProductionName = this.ruleStack.pop();\n            this.nextProductionOccurrence = this.occurrenceStack.pop();\n        }\n    };\n    return AbstractNextPossibleTokensWalker;\n}(RestWalker));\nexport { AbstractNextPossibleTokensWalker };\nvar NextAfterTokenWalker = /** @class */ (function (_super) {\n    __extends(NextAfterTokenWalker, _super);\n    function NextAfterTokenWalker(topProd, path) {\n        var _this = _super.call(this, topProd, path) || this;\n        _this.path = path;\n        _this.nextTerminalName = \"\";\n        _this.nextTerminalOccurrence = 0;\n        _this.nextTerminalName = _this.path.lastTok.name;\n        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n        return _this;\n    }\n    NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n        if (this.isAtEndOfPath &&\n            terminal.terminalType.name === this.nextTerminalName &&\n            terminal.idx === this.nextTerminalOccurrence &&\n            !this.found) {\n            var fullRest = currRest.concat(prevRest);\n            var restProd = new Alternative({ definition: fullRest });\n            this.possibleTokTypes = first(restProd);\n            this.found = true;\n        }\n    };\n    return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker));\nexport { NextAfterTokenWalker };\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nvar AbstractNextTerminalAfterProductionWalker = /** @class */ (function (_super) {\n    __extends(AbstractNextTerminalAfterProductionWalker, _super);\n    function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n        var _this = _super.call(this) || this;\n        _this.topRule = topRule;\n        _this.occurrence = occurrence;\n        _this.result = {\n            token: undefined,\n            occurrence: undefined,\n            isEndOfRule: undefined\n        };\n        return _this;\n    }\n    AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n        this.walk(this.topRule);\n        return this.result;\n    };\n    return AbstractNextTerminalAfterProductionWalker;\n}(RestWalker));\nexport { AbstractNextTerminalAfterProductionWalker };\nvar NextTerminalAfterManyWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterManyWalker, _super);\n    function NextTerminalAfterManyWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n        if (manyProd.idx === this.occurrence) {\n            var firstAfterMany = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterMany === undefined;\n            if (firstAfterMany instanceof Terminal) {\n                this.result.token = firstAfterMany.terminalType;\n                this.result.occurrence = firstAfterMany.idx;\n            }\n        }\n        else {\n            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexport { NextTerminalAfterManyWalker };\nvar NextTerminalAfterManySepWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterManySepWalker, _super);\n    function NextTerminalAfterManySepWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n        if (manySepProd.idx === this.occurrence) {\n            var firstAfterManySep = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterManySep === undefined;\n            if (firstAfterManySep instanceof Terminal) {\n                this.result.token = firstAfterManySep.terminalType;\n                this.result.occurrence = firstAfterManySep.idx;\n            }\n        }\n        else {\n            _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexport { NextTerminalAfterManySepWalker };\nvar NextTerminalAfterAtLeastOneWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterAtLeastOneWalker, _super);\n    function NextTerminalAfterAtLeastOneWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n        if (atLeastOneProd.idx === this.occurrence) {\n            var firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n            if (firstAfterAtLeastOne instanceof Terminal) {\n                this.result.token = firstAfterAtLeastOne.terminalType;\n                this.result.occurrence = firstAfterAtLeastOne.idx;\n            }\n        }\n        else {\n            _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexport { NextTerminalAfterAtLeastOneWalker };\n// TODO: reduce code duplication in the AfterWalkers\nvar NextTerminalAfterAtLeastOneSepWalker = /** @class */ (function (_super) {\n    __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n    function NextTerminalAfterAtLeastOneSepWalker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n        if (atleastOneSepProd.idx === this.occurrence) {\n            var firstAfterfirstAfterAtLeastOneSep = _first(currRest.concat(prevRest));\n            this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n            if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n                this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n            }\n        }\n        else {\n            _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n        }\n    };\n    return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker));\nexport { NextTerminalAfterAtLeastOneSepWalker };\nexport function possiblePathsFrom(targetDef, maxLength, currPath) {\n    if (currPath === void 0) { currPath = []; }\n    // avoid side effects\n    currPath = cloneArr(currPath);\n    var result = [];\n    var i = 0;\n    // TODO: avoid inner funcs\n    function remainingPathWith(nextDef) {\n        return nextDef.concat(drop(targetDef, i + 1));\n    }\n    // TODO: avoid inner funcs\n    function getAlternativesForProd(definition) {\n        var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n        return result.concat(alternatives);\n    }\n    /**\n     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n     * following (rest) of the targetDef.\n     *\n     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n     * the optional production.\n     */\n    while (currPath.length < maxLength && i < targetDef.length) {\n        var prod = targetDef[i];\n        /* istanbul ignore else */\n        if (prod instanceof Alternative) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof NonTerminal) {\n            return getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof Option) {\n            result = getAlternativesForProd(prod.definition);\n        }\n        else if (prod instanceof RepetitionMandatory) {\n            var newDef = prod.definition.concat([\n                new Repetition({\n                    definition: prod.definition\n                })\n            ]);\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof RepetitionMandatoryWithSeparator) {\n            var newDef = [\n                new Alternative({ definition: prod.definition }),\n                new Repetition({\n                    definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition)\n                })\n            ];\n            return getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof RepetitionWithSeparator) {\n            var newDef = prod.definition.concat([\n                new Repetition({\n                    definition: [new Terminal({ terminalType: prod.separator })].concat(prod.definition)\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof Repetition) {\n            var newDef = prod.definition.concat([\n                new Repetition({\n                    definition: prod.definition\n                })\n            ]);\n            result = getAlternativesForProd(newDef);\n        }\n        else if (prod instanceof Alternation) {\n            forEach(prod.definition, function (currAlt) {\n                result = getAlternativesForProd(currAlt.definition);\n            });\n            return result;\n        }\n        else if (prod instanceof Terminal) {\n            currPath.push(prod.terminalType);\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n        i++;\n    }\n    result.push({\n        partialPath: currPath,\n        suffixDef: drop(targetDef, i)\n    });\n    return result;\n}\nexport function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n    var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n    // to avoid creating a new Array each time.\n    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n    var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n    var foundCompletePath = false;\n    var tokenVectorLength = tokenVector.length;\n    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n    var result = [];\n    var possiblePaths = [];\n    possiblePaths.push({\n        idx: -1,\n        def: initialDef,\n        ruleStack: [],\n        occurrenceStack: []\n    });\n    while (!isEmpty(possiblePaths)) {\n        var currPath = possiblePaths.pop();\n        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n        if (currPath === EXIT_ALTERNATIVE) {\n            if (foundCompletePath &&\n                last(possiblePaths).idx <= minimalAlternativesIndex) {\n                // remove irrelevant alternative\n                possiblePaths.pop();\n            }\n            continue;\n        }\n        var currDef = currPath.def;\n        var currIdx = currPath.idx;\n        var currRuleStack = currPath.ruleStack;\n        var currOccurrenceStack = currPath.occurrenceStack;\n        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n        if (isEmpty(currDef)) {\n            continue;\n        }\n        var prod = currDef[0];\n        /* istanbul ignore else */\n        if (prod === EXIT_NON_TERMINAL) {\n            var nextPath = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: dropRight(currRuleStack),\n                occurrenceStack: dropRight(currOccurrenceStack)\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof Terminal) {\n            /* istanbul ignore else */\n            if (currIdx < tokenVectorLength - 1) {\n                var nextIdx = currIdx + 1;\n                var actualToken = tokenVector[nextIdx];\n                if (tokMatcher(actualToken, prod.terminalType)) {\n                    var nextPath = {\n                        idx: nextIdx,\n                        def: drop(currDef),\n                        ruleStack: currRuleStack,\n                        occurrenceStack: currOccurrenceStack\n                    };\n                    possiblePaths.push(nextPath);\n                }\n                // end of the line\n            }\n            else if (currIdx === tokenVectorLength - 1) {\n                // IGNORE ABOVE ELSE\n                result.push({\n                    nextTokenType: prod.terminalType,\n                    nextTokenOccurrence: prod.idx,\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                });\n                foundCompletePath = true;\n            }\n            else {\n                throw Error(\"non exhaustive match\");\n            }\n        }\n        else if (prod instanceof NonTerminal) {\n            var newRuleStack = cloneArr(currRuleStack);\n            newRuleStack.push(prod.nonTerminalName);\n            var newOccurrenceStack = cloneArr(currOccurrenceStack);\n            newOccurrenceStack.push(prod.idx);\n            var nextPath = {\n                idx: currIdx,\n                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n                ruleStack: newRuleStack,\n                occurrenceStack: newOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof Option) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            var nextPathWith = {\n                idx: currIdx,\n                def: prod.definition.concat(drop(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof RepetitionMandatory) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            var secondIteration = new Repetition({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([secondIteration], drop(currDef));\n            var nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof RepetitionMandatoryWithSeparator) {\n            // TODO:(THE NEW operators here take a while...) (convert once?)\n            var separatorGast = new Terminal({\n                terminalType: prod.separator\n            });\n            var secondIteration = new Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([secondIteration], drop(currDef));\n            var nextPath = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPath);\n        }\n        else if (prod instanceof RepetitionWithSeparator) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            var separatorGast = new Terminal({\n                terminalType: prod.separator\n            });\n            var nthRepetition = new Repetition({\n                definition: [separatorGast].concat(prod.definition),\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n            var nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof Repetition) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            var nextPathWithout = {\n                idx: currIdx,\n                def: drop(currDef),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWithout);\n            // required marker to avoid backtracking paths whose higher priority alternatives already matched\n            possiblePaths.push(EXIT_ALTERNATIVE);\n            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n            var nthRepetition = new Repetition({\n                definition: prod.definition,\n                idx: prod.idx\n            });\n            var nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n            var nextPathWith = {\n                idx: currIdx,\n                def: nextDef,\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            };\n            possiblePaths.push(nextPathWith);\n        }\n        else if (prod instanceof Alternation) {\n            // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n            for (var i = prod.definition.length - 1; i >= 0; i--) {\n                var currAlt = prod.definition[i];\n                var currAltPath = {\n                    idx: currIdx,\n                    def: currAlt.definition.concat(drop(currDef)),\n                    ruleStack: currRuleStack,\n                    occurrenceStack: currOccurrenceStack\n                };\n                possiblePaths.push(currAltPath);\n                possiblePaths.push(EXIT_ALTERNATIVE);\n            }\n        }\n        else if (prod instanceof Alternative) {\n            possiblePaths.push({\n                idx: currIdx,\n                def: prod.definition.concat(drop(currDef)),\n                ruleStack: currRuleStack,\n                occurrenceStack: currOccurrenceStack\n            });\n        }\n        else if (prod instanceof Rule) {\n            // last because we should only encounter at most a single one of these per invocation.\n            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n        }\n        else {\n            throw Error(\"non exhaustive match\");\n        }\n    }\n    return result;\n}\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n    var newRuleStack = cloneArr(currRuleStack);\n    newRuleStack.push(topRule.name);\n    var newCurrOccurrenceStack = cloneArr(currOccurrenceStack);\n    // top rule is always assumed to have been called with occurrence index 1\n    newCurrOccurrenceStack.push(1);\n    return {\n        idx: currIdx,\n        def: topRule.definition,\n        ruleStack: newRuleStack,\n        occurrenceStack: newCurrOccurrenceStack\n    };\n}\n//# sourceMappingURL=interpreter.js.map"]},"metadata":{},"sourceType":"module"}