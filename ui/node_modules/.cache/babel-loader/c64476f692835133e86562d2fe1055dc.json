{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/components/query/QueryEditor.tsx\";\nimport { updateQuery } from 'actions/actions';\nimport { AceEditor } from 'components/common/DeferredAceEditor';\nimport { withErrorBoundary } from 'components/common/ErrorBoundary';\nimport { withPerformance } from 'core/logging/performance';\nimport * as React from 'react';\nimport { memo, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { unstable_IdlePriority, unstable_runWithPriority } from 'scheduler';\nimport { getEditorTheme, getQueryMode, getQueryText } from 'store/selectors';\n\nconst QueryEditor = ({\n  setQuery,\n  queryText,\n  mode,\n  currentEditorTheme\n}) => {\n  const onChange = useCallback(a => {\n    if (queryText !== a) {\n      unstable_runWithPriority(unstable_IdlePriority, () => setQuery(a));\n    }\n  }, [setQuery, queryText]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AceEditor, {\n    mode: mode === 'Javascript' ? 'javascript' : 'mysql',\n    theme: currentEditorTheme,\n    name: \"queryAceEditor\",\n    onChange: onChange,\n    value: queryText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  queryText: getQueryText(state),\n  mode: getQueryMode(state),\n  currentEditorTheme: getEditorTheme(state)\n});\n\nexport default connect(mapStateToProps, {\n  setQuery: updateQuery\n})(withErrorBoundary(memo(withPerformance(QueryEditor, 'QueryEditor'))));","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/components/query/QueryEditor.tsx"],"names":["updateQuery","AceEditor","withErrorBoundary","withPerformance","React","memo","useCallback","connect","unstable_IdlePriority","unstable_runWithPriority","getEditorTheme","getQueryMode","getQueryText","QueryEditor","setQuery","queryText","mode","currentEditorTheme","onChange","a","mapStateToProps","state"],"mappings":";AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAaC,IAAb,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,QAAgE,WAAhE;AAEA,SAASC,cAAT,EAAyBC,YAAzB,EAAuCC,YAAvC,QAA2D,iBAA3D;;AAUA,MAAMC,WAAsB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,SAAZ;AAAuBC,EAAAA,IAAvB;AAA6BC,EAAAA;AAA7B,CAAD,KAAuD;AAClF,QAAMC,QAAQ,GAAGZ,WAAW,CACvBa,CAAD,IAAe;AACX,QAAIJ,SAAS,KAAKI,CAAlB,EAAqB;AACjBV,MAAAA,wBAAwB,CAACD,qBAAD,EAAwB,MAAMM,QAAQ,CAACK,CAAD,CAAtC,CAAxB;AACH;AACJ,GALuB,EAMxB,CAACL,QAAD,EAAWC,SAAX,CANwB,CAA5B;AAQA,sBACI,uDACI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAEC,IAAI,KAAK,YAAT,GAAwB,YAAxB,GAAuC,OADjD;AAEI,IAAA,KAAK,EAAEC,kBAFX;AAGI,IAAA,IAAI,EAAC,gBAHT;AAII,IAAA,QAAQ,EAAEC,QAJd;AAKI,IAAA,KAAK,EAAEH,SALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAWH,CApBD;;AAsBA,MAAMK,eAAe,GAAIC,KAAD,KAAuB;AAC3CN,EAAAA,SAAS,EAAEH,YAAY,CAACS,KAAD,CADoB;AAE3CL,EAAAA,IAAI,EAAEL,YAAY,CAACU,KAAD,CAFyB;AAG3CJ,EAAAA,kBAAkB,EAAEP,cAAc,CAACW,KAAD;AAHS,CAAvB,CAAxB;;AAMA,eAAed,OAAO,CAACa,eAAD,EAAkB;AAAEN,EAAAA,QAAQ,EAAEd;AAAZ,CAAlB,CAAP,CACXE,iBAAiB,CAACG,IAAI,CAACF,eAAe,CAACU,WAAD,EAAc,aAAd,CAAhB,CAAL,CADN,CAAf","sourcesContent":["import { updateQuery } from 'actions/actions'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\nimport * as React from 'react'\nimport { FC, memo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { unstable_IdlePriority, unstable_runWithPriority } from 'scheduler'\nimport { QueryMode, RootState } from 'state/State'\nimport { getEditorTheme, getQueryMode, getQueryText } from 'store/selectors'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n    setQuery: typeof updateQuery\n    queryText: string\n    currentEditorTheme: EditorTheme\n    mode: QueryMode\n}\n\nconst QueryEditor: FC<Props> = ({ setQuery, queryText, mode, currentEditorTheme }) => {\n    const onChange = useCallback(\n        (a: string) => {\n            if (queryText !== a) {\n                unstable_runWithPriority(unstable_IdlePriority, () => setQuery(a))\n            }\n        },\n        [setQuery, queryText]\n    )\n    return (\n        <>\n            <AceEditor\n                mode={mode === 'Javascript' ? 'javascript' : 'mysql'}\n                theme={currentEditorTheme}\n                name=\"queryAceEditor\"\n                onChange={onChange}\n                value={queryText}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    queryText: getQueryText(state),\n    mode: getQueryMode(state),\n    currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(mapStateToProps, { setQuery: updateQuery })(\n    withErrorBoundary(memo(withPerformance(QueryEditor, 'QueryEditor')))\n)\n"]},"metadata":{},"sourceType":"module"}