{"ast":null,"code":"ace.define(\"ace/mode/elixir_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var ElixirHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: ['meta.module.elixir', 'keyword.control.module.elixir', 'meta.module.elixir', 'entity.name.type.module.elixir'],\n        regex: '^(\\\\s*)(defmodule)(\\\\s+)((?:[A-Z]\\\\w*\\\\s*\\\\.\\\\s*)*[A-Z]\\\\w*)'\n      }, {\n        token: 'comment.documentation.heredoc',\n        regex: '@(?:module|type)?doc (?:~[a-z])?\"\"\"',\n        push: [{\n          token: 'comment.documentation.heredoc',\n          regex: '\\\\s*\"\"\"',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'comment.documentation.heredoc'\n        }],\n        comment: '@doc with heredocs is treated as documentation'\n      }, {\n        token: 'comment.documentation.heredoc',\n        regex: '@(?:module|type)?doc ~[A-Z]\"\"\"',\n        push: [{\n          token: 'comment.documentation.heredoc',\n          regex: '\\\\s*\"\"\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.documentation.heredoc'\n        }],\n        comment: '@doc with heredocs is treated as documentation'\n      }, {\n        token: 'comment.documentation.heredoc',\n        regex: '@(?:module|type)?doc (?:~[a-z])?\\'\\'\\'',\n        push: [{\n          token: 'comment.documentation.heredoc',\n          regex: '\\\\s*\\'\\'\\'',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'comment.documentation.heredoc'\n        }],\n        comment: '@doc with heredocs is treated as documentation'\n      }, {\n        token: 'comment.documentation.heredoc',\n        regex: '@(?:module|type)?doc ~[A-Z]\\'\\'\\'',\n        push: [{\n          token: 'comment.documentation.heredoc',\n          regex: '\\\\s*\\'\\'\\'',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.documentation.heredoc'\n        }],\n        comment: '@doc with heredocs is treated as documentation'\n      }, {\n        token: 'comment.documentation.false',\n        regex: '@(?:module|type)?doc false',\n        comment: '@doc false is treated as documentation'\n      }, {\n        token: 'comment.documentation.string',\n        regex: '@(?:module|type)?doc \"',\n        push: [{\n          token: 'comment.documentation.string',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'comment.documentation.string'\n        }],\n        comment: '@doc with string is treated as documentation'\n      }, {\n        token: 'keyword.control.elixir',\n        regex: '\\\\b(?:do|end|case|bc|lc|for|if|cond|unless|try|receive|fn|defmodule|defp?|defprotocol|defimpl|defrecord|defstruct|defmacrop?|defdelegate|defcallback|defmacrocallback|defexception|defoverridable|exit|after|rescue|catch|else|raise|throw|import|require|alias|use|quote|unquote|super)\\\\b(?![?!])',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?<!\\\\.)\\\\b(do|end|case|bc|lc|for|if|cond|unless|try|receive|fn|defmodule|defp?|defprotocol|defimpl|defrecord|defstruct|defmacrop?|defdelegate|defcallback|defmacrocallback|defexception|defoverridable|exit|after|rescue|catch|else|raise|throw|import|require|alias|use|quote|unquote|super)\\\\b(?![?!])'\n      }, {\n        token: 'keyword.operator.elixir',\n        regex: '\\\\b(?:and|not|or|when|xor|in|inlist|inbits)\\\\b',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?<!\\\\.)\\\\b(and|not|or|when|xor|in|inlist|inbits)\\\\b',\n        comment: ' as above, just doesn\\'t need a \\'end\\' and does a logic operation'\n      }, {\n        token: 'constant.language.elixir',\n        regex: '\\\\b(?:nil|true|false)\\\\b(?![?!])'\n      }, {\n        token: 'variable.language.elixir',\n        regex: '\\\\b__(?:CALLER|ENV|MODULE|DIR)__\\\\b(?![?!])'\n      }, {\n        token: ['punctuation.definition.variable.elixir', 'variable.other.readwrite.module.elixir'],\n        regex: '(@)([a-zA-Z_]\\\\w*)'\n      }, {\n        token: ['punctuation.definition.variable.elixir', 'variable.other.anonymous.elixir'],\n        regex: '(&)(\\\\d*)'\n      }, {\n        token: 'variable.other.constant.elixir',\n        regex: '\\\\b[A-Z]\\\\w*\\\\b'\n      }, {\n        token: 'constant.numeric.elixir',\n        regex: '\\\\b(?:0x[\\\\da-fA-F](?:_?[\\\\da-fA-F])*|\\\\d(?:_?\\\\d)*(?:\\\\.(?![^[:space:][:digit:]])(?:_?\\\\d)*)?(?:[eE][-+]?\\\\d(?:_?\\\\d)*)?|0b[01]+|0o[0-7]+)\\\\b',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '\\\\b(0x\\\\h(?>_?\\\\h)*|\\\\d(?>_?\\\\d)*(\\\\.(?![^[:space:][:digit:]])(?>_?\\\\d)*)?([eE][-+]?\\\\d(?>_?\\\\d)*)?|0b[01]+|0o[0-7]+)\\\\b'\n      }, {\n        token: 'punctuation.definition.constant.elixir',\n        regex: ':\\'',\n        push: [{\n          token: 'punctuation.definition.constant.elixir',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'constant.other.symbol.single-quoted.elixir'\n        }]\n      }, {\n        token: 'punctuation.definition.constant.elixir',\n        regex: ':\"',\n        push: [{\n          token: 'punctuation.definition.constant.elixir',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'constant.other.symbol.double-quoted.elixir'\n        }]\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '(?:\\'\\'\\')',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?>\\'\\'\\')',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '^\\\\s*\\'\\'\\'',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'support.function.variable.quoted.single.heredoc.elixir'\n        }],\n        comment: 'Single-quoted heredocs'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '\\'',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\'',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'support.function.variable.quoted.single.elixir'\n        }],\n        comment: 'single quoted string (allows for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '(?:\"\"\")',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?>\"\"\")',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '^\\\\s*\"\"\"',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.quoted.double.heredoc.elixir'\n        }],\n        comment: 'Double-quoted heredocs'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '\"',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.quoted.double.elixir'\n        }],\n        comment: 'double quoted string (allows for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[a-z](?:\"\"\")',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '~[a-z](?>\"\"\")',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '^\\\\s*\"\"\"',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.quoted.double.heredoc.elixir'\n        }],\n        comment: 'Double-quoted heredocs sigils'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[a-z]\\\\{',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\}[a-z]*',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.interpolated.elixir'\n        }],\n        comment: 'sigil (allow for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[a-z]\\\\[',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\][a-z]*',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.interpolated.elixir'\n        }],\n        comment: 'sigil (allow for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[a-z]\\\\<',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\>[a-z]*',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.interpolated.elixir'\n        }],\n        comment: 'sigil (allow for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[a-z]\\\\(',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\)[a-z]*',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.interpolated.elixir'\n        }],\n        comment: 'sigil (allow for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[a-z][^\\\\w]',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '[^\\\\w][a-z]*',\n          next: 'pop'\n        }, {\n          include: '#interpolated_elixir'\n        }, {\n          include: '#escaped_char'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.interpolated.elixir'\n        }],\n        comment: 'sigil (allow for interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[A-Z](?:\"\"\")',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '~[A-Z](?>\"\"\")',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '^\\\\s*\"\"\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.other.literal.upper.elixir'\n        }],\n        comment: 'Double-quoted heredocs sigils'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[A-Z]\\\\{',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\}[a-z]*',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.other.literal.upper.elixir'\n        }],\n        comment: 'sigil (without interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[A-Z]\\\\[',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\][a-z]*',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.other.literal.upper.elixir'\n        }],\n        comment: 'sigil (without interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[A-Z]\\\\<',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\>[a-z]*',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.other.literal.upper.elixir'\n        }],\n        comment: 'sigil (without interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[A-Z]\\\\(',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '\\\\)[a-z]*',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.other.literal.upper.elixir'\n        }],\n        comment: 'sigil (without interpolation)'\n      }, {\n        token: 'punctuation.definition.string.begin.elixir',\n        regex: '~[A-Z][^\\\\w]',\n        push: [{\n          token: 'punctuation.definition.string.end.elixir',\n          regex: '[^\\\\w][a-z]*',\n          next: 'pop'\n        }, {\n          defaultToken: 'string.quoted.other.literal.upper.elixir'\n        }],\n        comment: 'sigil (without interpolation)'\n      }, {\n        token: ['punctuation.definition.constant.elixir', 'constant.other.symbol.elixir'],\n        regex: '(:)([a-zA-Z_][\\\\w@]*(?:[?!]|=(?![>=]))?|\\\\<\\\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\\\-|\\\\|>|=>|~|~=|=|/|\\\\\\\\\\\\\\\\|\\\\*\\\\*?|\\\\.\\\\.?\\\\.?|>=?|<=?|&&?&?|\\\\+\\\\+?|\\\\-\\\\-?|\\\\|\\\\|?\\\\|?|\\\\!|@|\\\\%?\\\\{\\\\}|%|\\\\[\\\\]|\\\\^(?:\\\\^\\\\^)?)',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?<!:)(:)(?>[a-zA-Z_][\\\\w@]*(?>[?!]|=(?![>=]))?|\\\\<\\\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\\\-|\\\\|>|=>|~|~=|=|/|\\\\\\\\\\\\\\\\|\\\\*\\\\*?|\\\\.\\\\.?\\\\.?|>=?|<=?|&&?&?|\\\\+\\\\+?|\\\\-\\\\-?|\\\\|\\\\|?\\\\|?|\\\\!|@|\\\\%?\\\\{\\\\}|%|\\\\[\\\\]|\\\\^(\\\\^\\\\^)?)',\n        comment: 'symbols'\n      }, {\n        token: 'punctuation.definition.constant.elixir',\n        regex: '(?:[a-zA-Z_][\\\\w@]*(?:[?!])?):(?!:)',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?>[a-zA-Z_][\\\\w@]*(?>[?!])?)(:)(?!:)',\n        comment: 'symbols'\n      }, {\n        token: ['punctuation.definition.comment.elixir', 'comment.line.number-sign.elixir'],\n        regex: '(#)(.*)'\n      }, {\n        token: 'constant.numeric.elixir',\n        regex: '\\\\?(?:\\\\\\\\(?:x[\\\\da-fA-F]{1,2}(?![\\\\da-fA-F])\\\\b|[^xMC])|[^\\\\s\\\\\\\\])',\n        TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n        originalRegex: '(?<!\\\\w)\\\\?(\\\\\\\\(x\\\\h{1,2}(?!\\\\h)\\\\b|[^xMC])|[^\\\\s\\\\\\\\])',\n        comment: '\\n\\t\\t\\tmatches questionmark-letters.\\n\\n\\t\\t\\texamples (1st alternation = hex):\\n\\t\\t\\t?\\\\x1     ?\\\\x61\\n\\n\\t\\t\\texamples (2rd alternation = escaped):\\n\\t\\t\\t?\\\\n      ?\\\\b\\n\\n\\t\\t\\texamples (3rd alternation = normal):\\n\\t\\t\\t?a       ?A       ?0 \\n\\t\\t\\t?*       ?\"       ?( \\n\\t\\t\\t?.       ?#\\n\\t\\t\\t\\n\\t\\t\\tthe negative lookbehind prevents against matching\\n\\t\\t\\tp(42.tainted?)\\n\\t\\t\\t'\n      }, {\n        token: 'keyword.operator.assignment.augmented.elixir',\n        regex: '\\\\+=|\\\\-=|\\\\|\\\\|=|~=|&&='\n      }, {\n        token: 'keyword.operator.comparison.elixir',\n        regex: '===?|!==?|<=?|>=?'\n      }, {\n        token: 'keyword.operator.bitwise.elixir',\n        regex: '\\\\|{3}|&{3}|\\\\^{3}|<{3}|>{3}|~{3}'\n      }, {\n        token: 'keyword.operator.logical.elixir',\n        regex: '!+|\\\\bnot\\\\b|&&|\\\\band\\\\b|\\\\|\\\\||\\\\bor\\\\b|\\\\bxor\\\\b',\n        originalRegex: '(?<=[ \\\\t])!+|\\\\bnot\\\\b|&&|\\\\band\\\\b|\\\\|\\\\||\\\\bor\\\\b|\\\\bxor\\\\b'\n      }, {\n        token: 'keyword.operator.arithmetic.elixir',\n        regex: '\\\\*|\\\\+|\\\\-|/'\n      }, {\n        token: 'keyword.operator.other.elixir',\n        regex: '\\\\||\\\\+\\\\+|\\\\-\\\\-|\\\\*\\\\*|\\\\\\\\\\\\\\\\|\\\\<\\\\-|\\\\<\\\\>|\\\\<\\\\<|\\\\>\\\\>|\\\\:\\\\:|\\\\.\\\\.|\\\\|>|~|=>'\n      }, {\n        token: 'keyword.operator.assignment.elixir',\n        regex: '='\n      }, {\n        token: 'punctuation.separator.other.elixir',\n        regex: ':'\n      }, {\n        token: 'punctuation.separator.statement.elixir',\n        regex: '\\\\;'\n      }, {\n        token: 'punctuation.separator.object.elixir',\n        regex: ','\n      }, {\n        token: 'punctuation.separator.method.elixir',\n        regex: '\\\\.'\n      }, {\n        token: 'punctuation.section.scope.elixir',\n        regex: '\\\\{|\\\\}'\n      }, {\n        token: 'punctuation.section.array.elixir',\n        regex: '\\\\[|\\\\]'\n      }, {\n        token: 'punctuation.section.function.elixir',\n        regex: '\\\\(|\\\\)'\n      }],\n      '#escaped_char': [{\n        token: 'constant.character.escape.elixir',\n        regex: '\\\\\\\\(?:x[\\\\da-fA-F]{1,2}|.)'\n      }],\n      '#interpolated_elixir': [{\n        token: ['source.elixir.embedded.source', 'source.elixir.embedded.source.empty'],\n        regex: '(#\\\\{)(\\\\})'\n      }, {\n        todo: {\n          token: 'punctuation.section.embedded.elixir',\n          regex: '#\\\\{',\n          push: [{\n            token: 'punctuation.section.embedded.elixir',\n            regex: '\\\\}',\n            next: 'pop'\n          }, {\n            include: '#nest_curly_and_self'\n          }, {\n            include: '$self'\n          }, {\n            defaultToken: 'source.elixir.embedded.source'\n          }]\n        }\n      }],\n      '#nest_curly_and_self': [{\n        token: 'punctuation.section.scope.elixir',\n        regex: '\\\\{',\n        push: [{\n          token: 'punctuation.section.scope.elixir',\n          regex: '\\\\}',\n          next: 'pop'\n        }, {\n          include: '#nest_curly_and_self'\n        }]\n      }, {\n        include: '$self'\n      }],\n      '#regex_sub': [{\n        include: '#interpolated_elixir'\n      }, {\n        include: '#escaped_char'\n      }, {\n        token: ['punctuation.definition.arbitrary-repitition.elixir', 'string.regexp.arbitrary-repitition.elixir', 'string.regexp.arbitrary-repitition.elixir', 'punctuation.definition.arbitrary-repitition.elixir'],\n        regex: '(\\\\{)(\\\\d+)((?:,\\\\d+)?)(\\\\})'\n      }, {\n        token: 'punctuation.definition.character-class.elixir',\n        regex: '\\\\[(?:\\\\^?\\\\])?',\n        push: [{\n          token: 'punctuation.definition.character-class.elixir',\n          regex: '\\\\]',\n          next: 'pop'\n        }, {\n          include: '#escaped_char'\n        }, {\n          defaultToken: 'string.regexp.character-class.elixir'\n        }]\n      }, {\n        token: 'punctuation.definition.group.elixir',\n        regex: '\\\\(',\n        push: [{\n          token: 'punctuation.definition.group.elixir',\n          regex: '\\\\)',\n          next: 'pop'\n        }, {\n          include: '#regex_sub'\n        }, {\n          defaultToken: 'string.regexp.group.elixir'\n        }]\n      }, {\n        token: ['punctuation.definition.comment.elixir', 'comment.line.number-sign.elixir'],\n        regex: '(?:^|\\\\s)(#)(\\\\s[[a-zA-Z0-9,. \\\\t?!-][^\\\\x00-\\\\x7F]]*$)',\n        originalRegex: '(?<=^|\\\\s)(#)\\\\s[[a-zA-Z0-9,. \\\\t?!-][^\\\\x{00}-\\\\x{7F}]]*$',\n        comment: 'We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  ElixirHighlightRules.metaData = {\n    comment: 'Textmate bundle for Elixir Programming Language.',\n    fileTypes: ['ex', 'exs'],\n    firstLineMatch: '^#!/.*\\\\belixir',\n    foldingStartMarker: '(after|else|catch|rescue|\\\\-\\\\>|\\\\{|\\\\[|do)\\\\s*$',\n    foldingStopMarker: '^\\\\s*((\\\\}|\\\\]|after|else|catch|rescue)\\\\s*$|end\\\\b)',\n    keyEquivalent: '^~E',\n    name: 'Elixir',\n    scopeName: 'source.elixir'\n  };\n  oop.inherits(ElixirHighlightRules, TextHighlightRules);\n  exports.ElixirHighlightRules = ElixirHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/elixir\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/elixir_highlight_rules\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var ElixirHighlightRules = require(\"./elixir_highlight_rules\").ElixirHighlightRules;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = ElixirHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/elixir\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/elixir\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-elixir.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","ElixirHighlightRules","$rules","start","token","regex","push","next","include","defaultToken","comment","TODO","originalRegex","todo","normalizeRules","metaData","fileTypes","firstLineMatch","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/elixir_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ElixirHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { token: \n            [ 'meta.module.elixir',\n              'keyword.control.module.elixir',\n              'meta.module.elixir',\n              'entity.name.type.module.elixir' ],\n           regex: '^(\\\\s*)(defmodule)(\\\\s+)((?:[A-Z]\\\\w*\\\\s*\\\\.\\\\s*)*[A-Z]\\\\w*)' },\n         { token: 'comment.documentation.heredoc',\n           regex: '@(?:module|type)?doc (?:~[a-z])?\"\"\"',\n           push: \n            [ { token: 'comment.documentation.heredoc',\n                regex: '\\\\s*\"\"\"',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'comment.documentation.heredoc' } ],\n           comment: '@doc with heredocs is treated as documentation' },\n         { token: 'comment.documentation.heredoc',\n           regex: '@(?:module|type)?doc ~[A-Z]\"\"\"',\n           push: \n            [ { token: 'comment.documentation.heredoc',\n                regex: '\\\\s*\"\"\"',\n                next: 'pop' },\n              { defaultToken: 'comment.documentation.heredoc' } ],\n           comment: '@doc with heredocs is treated as documentation' },\n         { token: 'comment.documentation.heredoc',\n           regex: '@(?:module|type)?doc (?:~[a-z])?\\'\\'\\'',\n           push: \n            [ { token: 'comment.documentation.heredoc',\n                regex: '\\\\s*\\'\\'\\'',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'comment.documentation.heredoc' } ],\n           comment: '@doc with heredocs is treated as documentation' },\n         { token: 'comment.documentation.heredoc',\n           regex: '@(?:module|type)?doc ~[A-Z]\\'\\'\\'',\n           push: \n            [ { token: 'comment.documentation.heredoc',\n                regex: '\\\\s*\\'\\'\\'',\n                next: 'pop' },\n              { defaultToken: 'comment.documentation.heredoc' } ],\n           comment: '@doc with heredocs is treated as documentation' },\n         { token: 'comment.documentation.false',\n           regex: '@(?:module|type)?doc false',\n           comment: '@doc false is treated as documentation' },\n         { token: 'comment.documentation.string',\n           regex: '@(?:module|type)?doc \"',\n           push: \n            [ { token: 'comment.documentation.string',\n                regex: '\"',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'comment.documentation.string' } ],\n           comment: '@doc with string is treated as documentation' },\n         { token: 'keyword.control.elixir',\n           regex: '\\\\b(?:do|end|case|bc|lc|for|if|cond|unless|try|receive|fn|defmodule|defp?|defprotocol|defimpl|defrecord|defstruct|defmacrop?|defdelegate|defcallback|defmacrocallback|defexception|defoverridable|exit|after|rescue|catch|else|raise|throw|import|require|alias|use|quote|unquote|super)\\\\b(?![?!])',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?<!\\\\.)\\\\b(do|end|case|bc|lc|for|if|cond|unless|try|receive|fn|defmodule|defp?|defprotocol|defimpl|defrecord|defstruct|defmacrop?|defdelegate|defcallback|defmacrocallback|defexception|defoverridable|exit|after|rescue|catch|else|raise|throw|import|require|alias|use|quote|unquote|super)\\\\b(?![?!])' },\n         { token: 'keyword.operator.elixir',\n           regex: '\\\\b(?:and|not|or|when|xor|in|inlist|inbits)\\\\b',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?<!\\\\.)\\\\b(and|not|or|when|xor|in|inlist|inbits)\\\\b',\n           comment: ' as above, just doesn\\'t need a \\'end\\' and does a logic operation' },\n         { token: 'constant.language.elixir',\n           regex: '\\\\b(?:nil|true|false)\\\\b(?![?!])' },\n         { token: 'variable.language.elixir',\n           regex: '\\\\b__(?:CALLER|ENV|MODULE|DIR)__\\\\b(?![?!])' },\n         { token: \n            [ 'punctuation.definition.variable.elixir',\n              'variable.other.readwrite.module.elixir' ],\n           regex: '(@)([a-zA-Z_]\\\\w*)' },\n         { token: \n            [ 'punctuation.definition.variable.elixir',\n              'variable.other.anonymous.elixir' ],\n           regex: '(&)(\\\\d*)' },\n         { token: 'variable.other.constant.elixir',\n           regex: '\\\\b[A-Z]\\\\w*\\\\b' },\n         { token: 'constant.numeric.elixir',\n           regex: '\\\\b(?:0x[\\\\da-fA-F](?:_?[\\\\da-fA-F])*|\\\\d(?:_?\\\\d)*(?:\\\\.(?![^[:space:][:digit:]])(?:_?\\\\d)*)?(?:[eE][-+]?\\\\d(?:_?\\\\d)*)?|0b[01]+|0o[0-7]+)\\\\b',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '\\\\b(0x\\\\h(?>_?\\\\h)*|\\\\d(?>_?\\\\d)*(\\\\.(?![^[:space:][:digit:]])(?>_?\\\\d)*)?([eE][-+]?\\\\d(?>_?\\\\d)*)?|0b[01]+|0o[0-7]+)\\\\b' },\n         { token: 'punctuation.definition.constant.elixir',\n           regex: ':\\'',\n           push: \n            [ { token: 'punctuation.definition.constant.elixir',\n                regex: '\\'',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'constant.other.symbol.single-quoted.elixir' } ] },\n         { token: 'punctuation.definition.constant.elixir',\n           regex: ':\"',\n           push: \n            [ { token: 'punctuation.definition.constant.elixir',\n                regex: '\"',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'constant.other.symbol.double-quoted.elixir' } ] },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '(?:\\'\\'\\')',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?>\\'\\'\\')',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '^\\\\s*\\'\\'\\'',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'support.function.variable.quoted.single.heredoc.elixir' } ],\n           comment: 'Single-quoted heredocs' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '\\'',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\'',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'support.function.variable.quoted.single.elixir' } ],\n           comment: 'single quoted string (allows for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '(?:\"\"\")',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?>\"\"\")',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '^\\\\s*\"\"\"',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.quoted.double.heredoc.elixir' } ],\n           comment: 'Double-quoted heredocs' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '\"',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\"',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.quoted.double.elixir' } ],\n           comment: 'double quoted string (allows for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[a-z](?:\"\"\")',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '~[a-z](?>\"\"\")',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '^\\\\s*\"\"\"',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.quoted.double.heredoc.elixir' } ],\n           comment: 'Double-quoted heredocs sigils' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[a-z]\\\\{',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\}[a-z]*',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.interpolated.elixir' } ],\n           comment: 'sigil (allow for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[a-z]\\\\[',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\][a-z]*',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.interpolated.elixir' } ],\n           comment: 'sigil (allow for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[a-z]\\\\<',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\>[a-z]*',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.interpolated.elixir' } ],\n           comment: 'sigil (allow for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[a-z]\\\\(',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\)[a-z]*',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.interpolated.elixir' } ],\n           comment: 'sigil (allow for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[a-z][^\\\\w]',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '[^\\\\w][a-z]*',\n                next: 'pop' },\n              { include: '#interpolated_elixir' },\n              { include: '#escaped_char' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.interpolated.elixir' } ],\n           comment: 'sigil (allow for interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[A-Z](?:\"\"\")',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '~[A-Z](?>\"\"\")',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '^\\\\s*\"\"\"',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.other.literal.upper.elixir' } ],\n           comment: 'Double-quoted heredocs sigils' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[A-Z]\\\\{',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\}[a-z]*',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.other.literal.upper.elixir' } ],\n           comment: 'sigil (without interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[A-Z]\\\\[',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\][a-z]*',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.other.literal.upper.elixir' } ],\n           comment: 'sigil (without interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[A-Z]\\\\<',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\>[a-z]*',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.other.literal.upper.elixir' } ],\n           comment: 'sigil (without interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[A-Z]\\\\(',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '\\\\)[a-z]*',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.other.literal.upper.elixir' } ],\n           comment: 'sigil (without interpolation)' },\n         { token: 'punctuation.definition.string.begin.elixir',\n           regex: '~[A-Z][^\\\\w]',\n           push: \n            [ { token: 'punctuation.definition.string.end.elixir',\n                regex: '[^\\\\w][a-z]*',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.other.literal.upper.elixir' } ],\n           comment: 'sigil (without interpolation)' },\n         { token: ['punctuation.definition.constant.elixir', 'constant.other.symbol.elixir'],\n           regex: '(:)([a-zA-Z_][\\\\w@]*(?:[?!]|=(?![>=]))?|\\\\<\\\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\\\-|\\\\|>|=>|~|~=|=|/|\\\\\\\\\\\\\\\\|\\\\*\\\\*?|\\\\.\\\\.?\\\\.?|>=?|<=?|&&?&?|\\\\+\\\\+?|\\\\-\\\\-?|\\\\|\\\\|?\\\\|?|\\\\!|@|\\\\%?\\\\{\\\\}|%|\\\\[\\\\]|\\\\^(?:\\\\^\\\\^)?)',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?<!:)(:)(?>[a-zA-Z_][\\\\w@]*(?>[?!]|=(?![>=]))?|\\\\<\\\\>|===?|!==?|<<>>|<<<|>>>|~~~|::|<\\\\-|\\\\|>|=>|~|~=|=|/|\\\\\\\\\\\\\\\\|\\\\*\\\\*?|\\\\.\\\\.?\\\\.?|>=?|<=?|&&?&?|\\\\+\\\\+?|\\\\-\\\\-?|\\\\|\\\\|?\\\\|?|\\\\!|@|\\\\%?\\\\{\\\\}|%|\\\\[\\\\]|\\\\^(\\\\^\\\\^)?)',\n           comment: 'symbols' },\n         { token: 'punctuation.definition.constant.elixir',\n           regex: '(?:[a-zA-Z_][\\\\w@]*(?:[?!])?):(?!:)',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?>[a-zA-Z_][\\\\w@]*(?>[?!])?)(:)(?!:)',\n           comment: 'symbols' },\n         { token: \n            [ 'punctuation.definition.comment.elixir',\n              'comment.line.number-sign.elixir' ],\n           regex: '(#)(.*)' },\n         { token: 'constant.numeric.elixir',\n           regex: '\\\\?(?:\\\\\\\\(?:x[\\\\da-fA-F]{1,2}(?![\\\\da-fA-F])\\\\b|[^xMC])|[^\\\\s\\\\\\\\])',\n           TODO: 'FIXME: regexp doesn\\'t have js equivalent',\n           originalRegex: '(?<!\\\\w)\\\\?(\\\\\\\\(x\\\\h{1,2}(?!\\\\h)\\\\b|[^xMC])|[^\\\\s\\\\\\\\])',\n           comment: '\\n\\t\\t\\tmatches questionmark-letters.\\n\\n\\t\\t\\texamples (1st alternation = hex):\\n\\t\\t\\t?\\\\x1     ?\\\\x61\\n\\n\\t\\t\\texamples (2rd alternation = escaped):\\n\\t\\t\\t?\\\\n      ?\\\\b\\n\\n\\t\\t\\texamples (3rd alternation = normal):\\n\\t\\t\\t?a       ?A       ?0 \\n\\t\\t\\t?*       ?\"       ?( \\n\\t\\t\\t?.       ?#\\n\\t\\t\\t\\n\\t\\t\\tthe negative lookbehind prevents against matching\\n\\t\\t\\tp(42.tainted?)\\n\\t\\t\\t' },\n         { token: 'keyword.operator.assignment.augmented.elixir',\n           regex: '\\\\+=|\\\\-=|\\\\|\\\\|=|~=|&&=' },\n         { token: 'keyword.operator.comparison.elixir',\n           regex: '===?|!==?|<=?|>=?' },\n         { token: 'keyword.operator.bitwise.elixir',\n           regex: '\\\\|{3}|&{3}|\\\\^{3}|<{3}|>{3}|~{3}' },\n         { token: 'keyword.operator.logical.elixir',\n           regex: '!+|\\\\bnot\\\\b|&&|\\\\band\\\\b|\\\\|\\\\||\\\\bor\\\\b|\\\\bxor\\\\b',\n           originalRegex: '(?<=[ \\\\t])!+|\\\\bnot\\\\b|&&|\\\\band\\\\b|\\\\|\\\\||\\\\bor\\\\b|\\\\bxor\\\\b' },\n         { token: 'keyword.operator.arithmetic.elixir',\n           regex: '\\\\*|\\\\+|\\\\-|/' },\n         { token: 'keyword.operator.other.elixir',\n           regex: '\\\\||\\\\+\\\\+|\\\\-\\\\-|\\\\*\\\\*|\\\\\\\\\\\\\\\\|\\\\<\\\\-|\\\\<\\\\>|\\\\<\\\\<|\\\\>\\\\>|\\\\:\\\\:|\\\\.\\\\.|\\\\|>|~|=>' },\n         { token: 'keyword.operator.assignment.elixir', regex: '=' },\n         { token: 'punctuation.separator.other.elixir', regex: ':' },\n         { token: 'punctuation.separator.statement.elixir',\n           regex: '\\\\;' },\n         { token: 'punctuation.separator.object.elixir', regex: ',' },\n         { token: 'punctuation.separator.method.elixir', regex: '\\\\.' },\n         { token: 'punctuation.section.scope.elixir', regex: '\\\\{|\\\\}' },\n         { token: 'punctuation.section.array.elixir', regex: '\\\\[|\\\\]' },\n         { token: 'punctuation.section.function.elixir',\n           regex: '\\\\(|\\\\)' } ],\n      '#escaped_char': \n       [ { token: 'constant.character.escape.elixir',\n           regex: '\\\\\\\\(?:x[\\\\da-fA-F]{1,2}|.)' } ],\n      '#interpolated_elixir': \n       [ { token: \n            [ 'source.elixir.embedded.source',\n              'source.elixir.embedded.source.empty' ],\n           regex: '(#\\\\{)(\\\\})' },\n         { todo: \n            { token: 'punctuation.section.embedded.elixir',\n              regex: '#\\\\{',\n              push: \n               [ { token: 'punctuation.section.embedded.elixir',\n                   regex: '\\\\}',\n                   next: 'pop' },\n                 { include: '#nest_curly_and_self' },\n                 { include: '$self' },\n                 { defaultToken: 'source.elixir.embedded.source' } ] } } ],\n      '#nest_curly_and_self': \n       [ { token: 'punctuation.section.scope.elixir',\n           regex: '\\\\{',\n           push: \n            [ { token: 'punctuation.section.scope.elixir',\n                regex: '\\\\}',\n                next: 'pop' },\n              { include: '#nest_curly_and_self' } ] },\n         { include: '$self' } ],\n      '#regex_sub': \n       [ { include: '#interpolated_elixir' },\n         { include: '#escaped_char' },\n         { token: \n            [ 'punctuation.definition.arbitrary-repitition.elixir',\n              'string.regexp.arbitrary-repitition.elixir',\n              'string.regexp.arbitrary-repitition.elixir',\n              'punctuation.definition.arbitrary-repitition.elixir' ],\n           regex: '(\\\\{)(\\\\d+)((?:,\\\\d+)?)(\\\\})' },\n         { token: 'punctuation.definition.character-class.elixir',\n           regex: '\\\\[(?:\\\\^?\\\\])?',\n           push: \n            [ { token: 'punctuation.definition.character-class.elixir',\n                regex: '\\\\]',\n                next: 'pop' },\n              { include: '#escaped_char' },\n              { defaultToken: 'string.regexp.character-class.elixir' } ] },\n         { token: 'punctuation.definition.group.elixir',\n           regex: '\\\\(',\n           push: \n            [ { token: 'punctuation.definition.group.elixir',\n                regex: '\\\\)',\n                next: 'pop' },\n              { include: '#regex_sub' },\n              { defaultToken: 'string.regexp.group.elixir' } ] },\n         { token: \n            [ 'punctuation.definition.comment.elixir',\n              'comment.line.number-sign.elixir' ],\n           regex: '(?:^|\\\\s)(#)(\\\\s[[a-zA-Z0-9,. \\\\t?!-][^\\\\x00-\\\\x7F]]*$)',\n           originalRegex: '(?<=^|\\\\s)(#)\\\\s[[a-zA-Z0-9,. \\\\t?!-][^\\\\x{00}-\\\\x{7F}]]*$',\n           comment: 'We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.' } ] };\n    \n    this.normalizeRules();\n};\n\nElixirHighlightRules.metaData = { comment: 'Textmate bundle for Elixir Programming Language.',\n      fileTypes: [ 'ex', 'exs' ],\n      firstLineMatch: '^#!/.*\\\\belixir',\n      foldingStartMarker: '(after|else|catch|rescue|\\\\-\\\\>|\\\\{|\\\\[|do)\\\\s*$',\n      foldingStopMarker: '^\\\\s*((\\\\}|\\\\]|after|else|catch|rescue)\\\\s*$|end\\\\b)',\n      keyEquivalent: '^~E',\n      name: 'Elixir',\n      scopeName: 'source.elixir' };\n\n\noop.inherits(ElixirHighlightRules, TextHighlightRules);\n\nexports.ElixirHighlightRules = ElixirHighlightRules;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/elixir\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/elixir_highlight_rules\",\"ace/mode/folding/coffee\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar ElixirHighlightRules = require(\"./elixir_highlight_rules\").ElixirHighlightRules;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = ElixirHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/elixir\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/elixir\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}