{"ast":null,"code":"import { useCallback, useEffect } from 'react';\n\nvar useBeforeUnload = function (enabled, message) {\n  if (enabled === void 0) {\n    enabled = true;\n  }\n\n  var handler = useCallback(function (event) {\n    var finalEnabled = typeof enabled === 'function' ? enabled() : true;\n\n    if (!finalEnabled) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (message) {\n      event.returnValue = message;\n    }\n\n    return message;\n  }, [enabled, message]);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n\n    window.addEventListener('beforeunload', handler);\n    return function () {\n      return window.removeEventListener('beforeunload', handler);\n    };\n  }, [enabled, handler]);\n};\n\nexport default useBeforeUnload;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/react-use/esm/useBeforeUnload.js"],"names":["useCallback","useEffect","useBeforeUnload","enabled","message","handler","event","finalEnabled","preventDefault","returnValue","window","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;;AACA,IAAIC,eAAe,GAAG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AAC9C,MAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,IAAV;AAAiB;;AAC3C,MAAIE,OAAO,GAAGL,WAAW,CAAC,UAAUM,KAAV,EAAiB;AACvC,QAAIC,YAAY,GAAG,OAAOJ,OAAP,KAAmB,UAAnB,GAAgCA,OAAO,EAAvC,GAA4C,IAA/D;;AACA,QAAI,CAACI,YAAL,EAAmB;AACf;AACH;;AACDD,IAAAA,KAAK,CAACE,cAAN;;AACA,QAAIJ,OAAJ,EAAa;AACTE,MAAAA,KAAK,CAACG,WAAN,GAAoBL,OAApB;AACH;;AACD,WAAOA,OAAP;AACH,GAVwB,EAUtB,CAACD,OAAD,EAAUC,OAAV,CAVsB,CAAzB;AAWAH,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAI,CAACE,OAAL,EAAc;AACV;AACH;;AACDO,IAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwCN,OAAxC;AACA,WAAO,YAAY;AAAE,aAAOK,MAAM,CAACE,mBAAP,CAA2B,cAA3B,EAA2CP,OAA3C,CAAP;AAA6D,KAAlF;AACH,GANQ,EAMN,CAACF,OAAD,EAAUE,OAAV,CANM,CAAT;AAOH,CApBD;;AAqBA,eAAeH,eAAf","sourcesContent":["import { useCallback, useEffect } from 'react';\nvar useBeforeUnload = function (enabled, message) {\n    if (enabled === void 0) { enabled = true; }\n    var handler = useCallback(function (event) {\n        var finalEnabled = typeof enabled === 'function' ? enabled() : true;\n        if (!finalEnabled) {\n            return;\n        }\n        event.preventDefault();\n        if (message) {\n            event.returnValue = message;\n        }\n        return message;\n    }, [enabled, message]);\n    useEffect(function () {\n        if (!enabled) {\n            return;\n        }\n        window.addEventListener('beforeunload', handler);\n        return function () { return window.removeEventListener('beforeunload', handler); };\n    }, [enabled, handler]);\n};\nexport default useBeforeUnload;\n"]},"metadata":{},"sourceType":"module"}