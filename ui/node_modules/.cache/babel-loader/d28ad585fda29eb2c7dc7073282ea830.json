{"ast":null,"code":"ace.define(\"ace/mode/yaml_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var YamlHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"list.markup\",\n        regex: /^(?:-{3}|\\.{3})\\s*(?=#|$)/\n      }, {\n        token: \"list.markup\",\n        regex: /^\\s*[\\-?](?:$|\\s)/\n      }, {\n        token: \"constant\",\n        regex: \"!![\\\\w//]+\"\n      }, {\n        token: \"constant.language\",\n        regex: \"[&\\\\*][a-zA-Z0-9-_]+\"\n      }, {\n        token: [\"meta.tag\", \"keyword\"],\n        regex: /^(\\s*\\w.*?)(:(?=\\s|$))/\n      }, {\n        token: [\"meta.tag\", \"keyword\"],\n        regex: /(\\w+?)(\\s*:(?=\\s|$))/\n      }, {\n        token: \"keyword.operator\",\n        regex: \"<<\\\\w*:\\\\w*\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"-\\\\s*(?=[{])\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n      }, {\n        token: \"string\",\n        // multi line string start\n        regex: /[|>][-+\\d]*(?:$|\\s+(?:$|#))/,\n        onMatch: function (val, state, stack, line) {\n          line = line.replace(/ #.*/, \"\");\n          var indent = /^ *((:\\s*)?-(\\s*[^|>])?)?/.exec(line)[0].replace(/\\S\\s*$/, \"\").length;\n          var indentationIndicator = parseInt(/\\d+[\\s+-]*$/.exec(line));\n\n          if (indentationIndicator) {\n            indent += indentationIndicator - 1;\n            this.next = \"mlString\";\n          } else {\n            this.next = \"mlStringPre\";\n          }\n\n          if (!stack.length) {\n            stack.push(this.next);\n            stack.push(indent);\n          } else {\n            stack[0] = this.next;\n            stack[1] = indent;\n          }\n\n          return this.token;\n        },\n        next: \"mlString\"\n      }, {\n        token: \"string\",\n        // single quoted string\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /(\\b|[+\\-\\.])[\\d_]+(?:(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)(?=[^\\d-\\w]|$)/\n      }, {\n        token: \"constant.numeric\",\n        // other number\n        regex: /[+\\-]?\\.inf\\b|NaN\\b|0x[\\dA-Fa-f_]+|0b[10_]+/\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"\\\\b(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: /[^\\s,:\\[\\]\\{\\}]+/\n      }],\n      \"mlStringPre\": [{\n        token: \"indent\",\n        regex: /^ *$/\n      }, {\n        token: \"indent\",\n        regex: /^ */,\n        onMatch: function (val, state, stack) {\n          var curIndent = stack[1];\n\n          if (curIndent >= val.length) {\n            this.next = \"start\";\n            stack.shift();\n            stack.shift();\n          } else {\n            stack[1] = val.length - 1;\n            this.next = stack[0] = \"mlString\";\n          }\n\n          return this.token;\n        },\n        next: \"mlString\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"mlString\": [{\n        token: \"indent\",\n        regex: /^ *$/\n      }, {\n        token: \"indent\",\n        regex: /^ */,\n        onMatch: function (val, state, stack) {\n          var curIndent = stack[1];\n\n          if (curIndent >= val.length) {\n            this.next = \"start\";\n            stack.splice(0);\n          } else {\n            this.next = \"mlString\";\n          }\n\n          return this.token;\n        },\n        next: \"mlString\"\n      }, {\n        token: \"string\",\n        regex: '.+'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(YamlHighlightRules, TextHighlightRules);\n  exports.YamlHighlightRules = YamlHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/yaml\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/yaml_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var YamlHighlightRules = require(\"./yaml_highlight_rules\").YamlHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = YamlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = [\"#\"];\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/yaml\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/yaml\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-yaml.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","YamlHighlightRules","$rules","token","regex","onMatch","val","state","stack","line","replace","indent","exec","length","indentationIndicator","parseInt","next","push","curIndent","shift","defaultToken","splice","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","input","test","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","$getIndent","call","prototype","BaseFoldMode","FoldMode","getFoldWidgetRange","session","foldStyle","range","indentationBlock","re","startLevel","search","startColumn","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","prev","prevIndent","nextIndent","foldWidgets","TextMode","Mode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","tab","$id","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/yaml_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar YamlHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"#.*$\"\n            }, {\n                token : \"list.markup\",\n                regex : /^(?:-{3}|\\.{3})\\s*(?=#|$)/\n            },  {\n                token : \"list.markup\",\n                regex : /^\\s*[\\-?](?:$|\\s)/\n            }, {\n                token: \"constant\",\n                regex: \"!![\\\\w//]+\"\n            }, {\n                token: \"constant.language\",\n                regex: \"[&\\\\*][a-zA-Z0-9-_]+\"\n            }, {\n                token: [\"meta.tag\", \"keyword\"],\n                regex: /^(\\s*\\w.*?)(:(?=\\s|$))/\n            },{\n                token: [\"meta.tag\", \"keyword\"],\n                regex: /(\\w+?)(\\s*:(?=\\s|$))/\n            }, {\n                token : \"keyword.operator\",\n                regex : \"<<\\\\w*:\\\\w*\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"-\\\\s*(?=[{])\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // multi line string start\n                regex : /[|>][-+\\d]*(?:$|\\s+(?:$|#))/,\n                onMatch: function(val, state, stack, line) {\n                    line = line.replace(/ #.*/, \"\");\n                    var indent = /^ *((:\\s*)?-(\\s*[^|>])?)?/.exec(line)[0]\n                        .replace(/\\S\\s*$/, \"\").length;\n                    var indentationIndicator = parseInt(/\\d+[\\s+-]*$/.exec(line));\n                    \n                    if (indentationIndicator) {\n                        indent += indentationIndicator - 1;\n                        this.next = \"mlString\";\n                    } else {\n                        this.next = \"mlStringPre\";\n                    }\n                    if (!stack.length) {\n                        stack.push(this.next);\n                        stack.push(indent);\n                    } else {\n                        stack[0] = this.next;\n                        stack[1] = indent;\n                    }\n                    return this.token;\n                },\n                next : \"mlString\"\n            }, {\n                token : \"string\", // single quoted string\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /(\\b|[+\\-\\.])[\\d_]+(?:(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)(?=[^\\d-\\w]|$)/\n            }, {\n                token : \"constant.numeric\", // other number\n                regex : /[+\\-]?\\.inf\\b|NaN\\b|0x[\\dA-Fa-f_]+|0b[10_]+/\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"\\\\b(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : /[^\\s,:\\[\\]\\{\\}]+/\n            }\n        ],\n        \"mlStringPre\" : [\n            {\n                token : \"indent\",\n                regex : /^ *$/\n            }, {\n                token : \"indent\",\n                regex : /^ */,\n                onMatch: function(val, state, stack) {\n                    var curIndent = stack[1];\n\n                    if (curIndent >= val.length) {\n                        this.next = \"start\";\n                        stack.shift();\n                        stack.shift();\n                    }\n                    else {\n                        stack[1] = val.length - 1;\n                        this.next = stack[0] = \"mlString\";\n                    }\n                    return this.token;\n                },\n                next : \"mlString\"\n            }, {\n                defaultToken : \"string\"\n            }\n        ],\n        \"mlString\" : [\n            {\n                token : \"indent\",\n                regex : /^ *$/\n            }, {\n                token : \"indent\",\n                regex : /^ */,\n                onMatch: function(val, state, stack) {\n                    var curIndent = stack[1];\n\n                    if (curIndent >= val.length) {\n                        this.next = \"start\";\n                        stack.splice(0);\n                    }\n                    else {\n                        this.next = \"mlString\";\n                    }\n                    return this.token;\n                },\n                next : \"mlString\"\n            }, {\n                token : \"string\",\n                regex : '.+'\n            }\n        ]};\n    this.normalizeRules();\n\n};\n\noop.inherits(YamlHighlightRules, TextHighlightRules);\n\nexports.YamlHighlightRules = YamlHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/yaml\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/yaml_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/coffee\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar YamlHighlightRules = require(\"./yaml_highlight_rules\").YamlHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = YamlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = [\"#\"];\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n\n    this.$id = \"ace/mode/yaml\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/yaml\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}