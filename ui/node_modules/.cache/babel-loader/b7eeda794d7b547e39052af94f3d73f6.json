{"ast":null,"code":"ace.define(\"ace/snippets/clojure\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"snippet comm\\n\\\n\t(comment\\n\\\n\t  ${1}\\n\\\n\t  )\\n\\\nsnippet condp\\n\\\n\t(condp ${1:pred} ${2:expr}\\n\\\n\t  ${3})\\n\\\nsnippet def\\n\\\n\t(def ${1})\\n\\\nsnippet defm\\n\\\n\t(defmethod ${1:multifn} \\\"${2:doc-string}\\\" ${3:dispatch-val} [${4:args}]\\n\\\n\t  ${5})\\n\\\nsnippet defmm\\n\\\n\t(defmulti ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\nsnippet defma\\n\\\n\t(defmacro ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\nsnippet defn\\n\\\n\t(defn ${1:name} \\\"${2:doc-string}\\\" [${3:arg-list}]\\n\\\n\t  ${4})\\n\\\nsnippet defp\\n\\\n\t(defprotocol ${1:name}\\n\\\n\t  ${2})\\n\\\nsnippet defr\\n\\\n\t(defrecord ${1:name} [${2:fields}]\\n\\\n\t  ${3:protocol}\\n\\\n\t  ${4})\\n\\\nsnippet deft\\n\\\n\t(deftest ${1:name}\\n\\\n\t    (is (= ${2:assertion})))\\n\\\n\t  ${3})\\n\\\nsnippet is\\n\\\n\t(is (= ${1} ${2}))\\n\\\nsnippet defty\\n\\\n\t(deftype ${1:Name} [${2:fields}]\\n\\\n\t  ${3:Protocol}\\n\\\n\t  ${4})\\n\\\nsnippet doseq\\n\\\n\t(doseq [${1:elem} ${2:coll}]\\n\\\n\t  ${3})\\n\\\nsnippet fn\\n\\\n\t(fn [${1:arg-list}] ${2})\\n\\\nsnippet if\\n\\\n\t(if ${1:test-expr}\\n\\\n\t  ${2:then-expr}\\n\\\n\t  ${3:else-expr})\\n\\\nsnippet if-let \\n\\\n\t(if-let [${1:result} ${2:test-expr}]\\n\\\n\t\t(${3:then-expr} $1)\\n\\\n\t\t(${4:else-expr}))\\n\\\nsnippet imp\\n\\\n\t(:import [${1:package}])\\n\\\n\t& {:keys [${1:keys}] :or {${2:defaults}}}\\n\\\nsnippet let\\n\\\n\t(let [${1:name} ${2:expr}]\\n\\\n\t\t${3})\\n\\\nsnippet letfn\\n\\\n\t(letfn [(${1:name) [${2:args}]\\n\\\n\t          ${3})])\\n\\\nsnippet map\\n\\\n\t(map ${1:func} ${2:coll})\\n\\\nsnippet mapl\\n\\\n\t(map #(${1:lambda}) ${2:coll})\\n\\\nsnippet met\\n\\\n\t(${1:name} [${2:this} ${3:args}]\\n\\\n\t  ${4})\\n\\\nsnippet ns\\n\\\n\t(ns ${1:name}\\n\\\n\t  ${2})\\n\\\nsnippet dotimes\\n\\\n\t(dotimes [_ 10]\\n\\\n\t  (time\\n\\\n\t    (dotimes [_ ${1:times}]\\n\\\n\t      ${2})))\\n\\\nsnippet pmethod\\n\\\n\t(${1:name} [${2:this} ${3:args}])\\n\\\nsnippet refer\\n\\\n\t(:refer-clojure :exclude [${1}])\\n\\\nsnippet require\\n\\\n\t(:require [${1:namespace} :as [${2}]])\\n\\\nsnippet use\\n\\\n\t(:use [${1:namespace} :only [${2}]])\\n\\\nsnippet print\\n\\\n\t(println ${1})\\n\\\nsnippet reduce\\n\\\n\t(reduce ${1:(fn [p n] ${3})} ${2})\\n\\\nsnippet when\\n\\\n\t(when ${1:test} ${2:body})\\n\\\nsnippet when-let\\n\\\n\t(when-let [${1:result} ${2:test}]\\n\\\n\t\t${3:body})\\n\\\n\";\n  exports.scope = \"clojure\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/clojure\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/snippets/clojure.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,sBAAX,EAAkC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAlC,EAAkE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACrG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AA2FAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,SAAhB;AAEC,CAhGD;;AAgGmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,sBAAD,CAAZ,EAAsC,UAASK,CAAT,EAAY;AAC9C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/clojure\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\nexports.snippetText = \"snippet comm\\n\\\n\t(comment\\n\\\n\t  ${1}\\n\\\n\t  )\\n\\\nsnippet condp\\n\\\n\t(condp ${1:pred} ${2:expr}\\n\\\n\t  ${3})\\n\\\nsnippet def\\n\\\n\t(def ${1})\\n\\\nsnippet defm\\n\\\n\t(defmethod ${1:multifn} \\\"${2:doc-string}\\\" ${3:dispatch-val} [${4:args}]\\n\\\n\t  ${5})\\n\\\nsnippet defmm\\n\\\n\t(defmulti ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\nsnippet defma\\n\\\n\t(defmacro ${1:name} \\\"${2:doc-string}\\\" ${3:dispatch-fn})\\n\\\nsnippet defn\\n\\\n\t(defn ${1:name} \\\"${2:doc-string}\\\" [${3:arg-list}]\\n\\\n\t  ${4})\\n\\\nsnippet defp\\n\\\n\t(defprotocol ${1:name}\\n\\\n\t  ${2})\\n\\\nsnippet defr\\n\\\n\t(defrecord ${1:name} [${2:fields}]\\n\\\n\t  ${3:protocol}\\n\\\n\t  ${4})\\n\\\nsnippet deft\\n\\\n\t(deftest ${1:name}\\n\\\n\t    (is (= ${2:assertion})))\\n\\\n\t  ${3})\\n\\\nsnippet is\\n\\\n\t(is (= ${1} ${2}))\\n\\\nsnippet defty\\n\\\n\t(deftype ${1:Name} [${2:fields}]\\n\\\n\t  ${3:Protocol}\\n\\\n\t  ${4})\\n\\\nsnippet doseq\\n\\\n\t(doseq [${1:elem} ${2:coll}]\\n\\\n\t  ${3})\\n\\\nsnippet fn\\n\\\n\t(fn [${1:arg-list}] ${2})\\n\\\nsnippet if\\n\\\n\t(if ${1:test-expr}\\n\\\n\t  ${2:then-expr}\\n\\\n\t  ${3:else-expr})\\n\\\nsnippet if-let \\n\\\n\t(if-let [${1:result} ${2:test-expr}]\\n\\\n\t\t(${3:then-expr} $1)\\n\\\n\t\t(${4:else-expr}))\\n\\\nsnippet imp\\n\\\n\t(:import [${1:package}])\\n\\\n\t& {:keys [${1:keys}] :or {${2:defaults}}}\\n\\\nsnippet let\\n\\\n\t(let [${1:name} ${2:expr}]\\n\\\n\t\t${3})\\n\\\nsnippet letfn\\n\\\n\t(letfn [(${1:name) [${2:args}]\\n\\\n\t          ${3})])\\n\\\nsnippet map\\n\\\n\t(map ${1:func} ${2:coll})\\n\\\nsnippet mapl\\n\\\n\t(map #(${1:lambda}) ${2:coll})\\n\\\nsnippet met\\n\\\n\t(${1:name} [${2:this} ${3:args}]\\n\\\n\t  ${4})\\n\\\nsnippet ns\\n\\\n\t(ns ${1:name}\\n\\\n\t  ${2})\\n\\\nsnippet dotimes\\n\\\n\t(dotimes [_ 10]\\n\\\n\t  (time\\n\\\n\t    (dotimes [_ ${1:times}]\\n\\\n\t      ${2})))\\n\\\nsnippet pmethod\\n\\\n\t(${1:name} [${2:this} ${3:args}])\\n\\\nsnippet refer\\n\\\n\t(:refer-clojure :exclude [${1}])\\n\\\nsnippet require\\n\\\n\t(:require [${1:namespace} :as [${2}]])\\n\\\nsnippet use\\n\\\n\t(:use [${1:namespace} :only [${2}]])\\n\\\nsnippet print\\n\\\n\t(println ${1})\\n\\\nsnippet reduce\\n\\\n\t(reduce ${1:(fn [p n] ${3})} ${2})\\n\\\nsnippet when\\n\\\n\t(when ${1:test} ${2:body})\\n\\\nsnippet when-let\\n\\\n\t(when-let [${1:result} ${2:test}]\\n\\\n\t\t${3:body})\\n\\\n\";\nexports.scope = \"clojure\";\n\n});                (function() {\n                    ace.require([\"ace/snippets/clojure\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}