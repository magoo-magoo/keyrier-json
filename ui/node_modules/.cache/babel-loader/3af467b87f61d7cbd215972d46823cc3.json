{"ast":null,"code":"ace.define(\"ace/mode/logiql_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var LogiQLHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        token: 'comment.block',\n        regex: '/\\\\*',\n        push: [{\n          token: 'comment.block',\n          regex: '\\\\*/',\n          next: 'pop'\n        }, {\n          defaultToken: 'comment.block'\n        }]\n      }, {\n        token: 'comment.single',\n        regex: '//.*'\n      }, {\n        token: 'constant.numeric',\n        regex: '\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?'\n      }, {\n        token: 'string',\n        regex: '\"',\n        push: [{\n          token: 'string',\n          regex: '\"',\n          next: 'pop'\n        }, {\n          defaultToken: 'string'\n        }]\n      }, {\n        token: 'constant.language',\n        regex: '\\\\b(true|false)\\\\b'\n      }, {\n        token: 'entity.name.type.logicblox',\n        regex: '`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b'\n      }, {\n        token: 'keyword.start',\n        regex: '->',\n        comment: 'Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '-->',\n        comment: 'Level 1 Constraint'\n      }, {\n        token: 'keyword.start',\n        regex: '<-',\n        comment: 'Rule'\n      }, {\n        token: 'keyword.start',\n        regex: '<--',\n        comment: 'Level 1 Rule'\n      }, {\n        token: 'keyword.end',\n        regex: '\\\\.',\n        comment: 'Terminator'\n      }, {\n        token: 'keyword.other',\n        regex: '!',\n        comment: 'Negation'\n      }, {\n        token: 'keyword.other',\n        regex: ',',\n        comment: 'Conjunction'\n      }, {\n        token: 'keyword.other',\n        regex: ';',\n        comment: 'Disjunction'\n      }, {\n        token: 'keyword.operator',\n        regex: '<=|>=|!=|<|>',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.other',\n        regex: '@',\n        comment: 'Equality'\n      }, {\n        token: 'keyword.operator',\n        regex: '\\\\+|-|\\\\*|/',\n        comment: 'Arithmetic operations'\n      }, {\n        token: 'keyword',\n        regex: '::',\n        comment: 'Colon colon'\n      }, {\n        token: 'support.function',\n        regex: '\\\\b(agg\\\\s*<<)',\n        push: [{\n          include: '$self'\n        }, {\n          token: 'support.function',\n          regex: '>>',\n          next: 'pop'\n        }]\n      }, {\n        token: 'storage.modifier',\n        regex: '\\\\b(lang:[\\\\w:]*)'\n      }, {\n        token: ['storage.type', 'text'],\n        regex: '(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)'\n      }, {\n        token: 'entity.name',\n        regex: '[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))'\n      }, {\n        token: 'variable.parameter',\n        regex: '([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))'\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(LogiQLHighlightRules, TextHighlightRules);\n  exports.LogiQLHighlightRules = LogiQLHighlightRules;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/logiql\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/logiql_highlight_rules\", \"ace/mode/folding/coffee\", \"ace/token_iterator\", \"ace/range\", \"ace/mode/behaviour/cstyle\", \"ace/mode/matching_brace_outdent\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var LogiQLHighlightRules = require(\"./logiql_highlight_rules\").LogiQLHighlightRules;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var TokenIterator = require(\"../token_iterator\").TokenIterator;\n\n  var Range = require(\"../range\").Range;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Mode = function () {\n    this.HighlightRules = LogiQLHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n      var endState = tokenizedLine.state;\n      if (/comment|string/.test(endState)) return indent;\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment.single\") return indent;\n      var match = line.match();\n      if (/(-->|<--|<-|->|{)\\s*$/.test(line)) indent += tab;\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      if (this.$outdent.checkOutdent(line, input)) return true;\n      if (input !== \"\\n\" && input !== \"\\r\\n\") return false;\n      if (!/^\\s+/.test(line)) return false;\n      return true;\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      if (this.$outdent.autoOutdent(doc, row)) return;\n      var prevLine = doc.getLine(row);\n      var match = prevLine.match(/^\\s+/);\n      var column = prevLine.lastIndexOf(\".\") + 1;\n      if (!match || !row || !column) return 0;\n      var line = doc.getLine(row + 1);\n      var startRange = this.getMatching(doc, {\n        row: row,\n        column: column\n      });\n      if (!startRange || startRange.start.row == row) return 0;\n      column = match[0].length;\n      var indent = this.$getIndent(doc.getLine(startRange.start.row));\n      doc.replace(new Range(row + 1, 0, row + 1, column), indent);\n    };\n\n    this.getMatching = function (session, row, column) {\n      if (row == undefined) row = session.selection.lead;\n\n      if (typeof row == \"object\") {\n        column = row.column;\n        row = row.row;\n      }\n\n      var startToken = session.getTokenAt(row, column);\n      var KW_START = \"keyword.start\",\n          KW_END = \"keyword.end\";\n      var tok;\n      if (!startToken) return;\n\n      if (startToken.type == KW_START) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepForward;\n      } else if (startToken.type == KW_END) {\n        var it = new TokenIterator(session, row, column);\n        it.step = it.stepBackward;\n      } else return;\n\n      while (tok = it.step()) {\n        if (tok.type == KW_START || tok.type == KW_END) break;\n      }\n\n      if (!tok || tok.type == startToken.type) return;\n      var col = it.getCurrentTokenColumn();\n      var row = it.getCurrentTokenRow();\n      return new Range(row, col, row, col + tok.value.length);\n    };\n\n    this.$id = \"ace/mode/logiql\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/logiql\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-logiql.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","LogiQLHighlightRules","$rules","start","token","regex","push","next","defaultToken","comment","include","normalizeRules","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","MatchingBraceOutdent","checkOutdent","input","test","autoOutdent","doc","match","column","openBracePos","findMatchingBracket","$getIndent","replace","TextMode","Mode","TokenIterator","CstyleBehaviour","HighlightRules","foldingRules","$outdent","$behaviour","lineCommentStart","blockComment","end","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","prevLine","lastIndexOf","startRange","getMatching","undefined","selection","lead","startToken","getTokenAt","KW_START","KW_END","tok","it","step","stepForward","stepBackward","col","getCurrentTokenColumn","getCurrentTokenRow","value","$id","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/logiql_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar LogiQLHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { token: 'comment.block',\n           regex: '/\\\\*',\n           push: \n            [ { token: 'comment.block', regex: '\\\\*/', next: 'pop' },\n              { defaultToken: 'comment.block' } ]\n            },\n         { token: 'comment.single',\n           regex: '//.*'\n            },\n         { token: 'constant.numeric',\n           regex: '\\\\d+(?:\\\\.\\\\d+)?(?:[eE][+-]?\\\\d+)?[fd]?'\n            },\n         { token: 'string',\n           regex: '\"',\n           push: \n            [ { token: 'string', regex: '\"', next: 'pop' },\n              { defaultToken: 'string' } ]\n            },\n         { token: 'constant.language',\n           regex: '\\\\b(true|false)\\\\b'\n            },\n         { token: 'entity.name.type.logicblox',\n           regex: '`[a-zA-Z_:]+(\\\\d|\\\\a)*\\\\b'\n            },\n         { token: 'keyword.start', regex: '->',  comment: 'Constraint' },\n         { token: 'keyword.start', regex: '-->', comment: 'Level 1 Constraint'},\n         { token: 'keyword.start', regex: '<-',  comment: 'Rule' },\n         { token: 'keyword.start', regex: '<--', comment: 'Level 1 Rule' },\n         { token: 'keyword.end',   regex: '\\\\.', comment: 'Terminator' },\n         { token: 'keyword.other', regex: '!',   comment: 'Negation' },\n         { token: 'keyword.other', regex: ',',   comment: 'Conjunction' },\n         { token: 'keyword.other', regex: ';',   comment: 'Disjunction' },\n         { token: 'keyword.operator', regex: '<=|>=|!=|<|>', comment: 'Equality'},\n         { token: 'keyword.other', regex: '@', comment: 'Equality' },\n         { token: 'keyword.operator', regex: '\\\\+|-|\\\\*|/', comment: 'Arithmetic operations'},\n         { token: 'keyword', regex: '::', comment: 'Colon colon' },\n         { token: 'support.function',\n           regex: '\\\\b(agg\\\\s*<<)',\n           push: \n            [ { include: '$self' },\n              { token: 'support.function',\n                regex: '>>',\n                next: 'pop' } ]\n            },\n         { token: 'storage.modifier',\n           regex: '\\\\b(lang:[\\\\w:]*)'\n            },\n         { token: [ 'storage.type', 'text' ],\n           regex: '(export|sealed|clauses|block|alias|alias_all)(\\\\s*\\\\()(?=`)'\n            },\n         { token: 'entity.name',\n           regex: '[a-zA-Z_][a-zA-Z_0-9:]*(@prev|@init|@final)?(?=(\\\\(|\\\\[))'\n            },\n         { token: 'variable.parameter',\n           regex: '([a-zA-Z][a-zA-Z_0-9]*|_)\\\\s*(?=(,|\\\\.|<-|->|\\\\)|\\\\]|=))'\n            } ] };\n    \n    this.normalizeRules();\n};\n\noop.inherits(LogiQLHighlightRules, TextHighlightRules);\n\nexports.LogiQLHighlightRules = LogiQLHighlightRules;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/logiql\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/logiql_highlight_rules\",\"ace/mode/folding/coffee\",\"ace/token_iterator\",\"ace/range\",\"ace/mode/behaviour/cstyle\",\"ace/mode/matching_brace_outdent\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar LogiQLHighlightRules = require(\"./logiql_highlight_rules\").LogiQLHighlightRules;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\nvar TokenIterator = require(\"../token_iterator\").TokenIterator;\nvar Range = require(\"../range\").Range;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\nvar Mode = function() {\n    this.HighlightRules = LogiQLHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n        if (/comment|string/.test(endState))  \n            return indent;\n        if (tokens.length && tokens[tokens.length - 1].type == \"comment.single\")\n            return indent;\n\n        var match = line.match();\n        if (/(-->|<--|<-|->|{)\\s*$/.test(line))\n            indent += tab;\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        if (this.$outdent.checkOutdent(line, input))\n            return true;\n\n        if (input !== \"\\n\" && input !== \"\\r\\n\")\n            return false;\n            \n        if (!/^\\s+/.test(line))\n            return false;\n\n        return true;\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        if (this.$outdent.autoOutdent(doc, row))\n            return;\n        var prevLine = doc.getLine(row);\n        var match = prevLine.match(/^\\s+/);\n        var column = prevLine.lastIndexOf(\".\") + 1;\n        if (!match || !row || !column) return 0;\n\n        var line = doc.getLine(row + 1);\n        var startRange = this.getMatching(doc, {row: row, column: column});\n        if (!startRange || startRange.start.row == row) return 0;\n\n        column = match[0].length;\n        var indent = this.$getIndent(doc.getLine(startRange.start.row));\n        doc.replace(new Range(row + 1, 0, row + 1, column), indent);\n    };\n\n    this.getMatching = function(session, row, column) {\n        if (row == undefined)\n            row = session.selection.lead;\n        if (typeof row == \"object\") {\n            column = row.column;\n            row = row.row;\n        }\n\n        var startToken = session.getTokenAt(row, column);\n        var KW_START = \"keyword.start\", KW_END = \"keyword.end\";\n        var tok;\n        if (!startToken)\n            return;\n        if (startToken.type == KW_START) {\n            var it = new TokenIterator(session, row, column);\n            it.step = it.stepForward;\n        } else if (startToken.type == KW_END) {\n            var it = new TokenIterator(session, row, column);\n            it.step = it.stepBackward;\n        } else\n            return;\n\n        while (tok = it.step()) {\n            if (tok.type == KW_START || tok.type == KW_END)\n                break;\n        }\n        if (!tok || tok.type == startToken.type)\n            return;\n\n        var col = it.getCurrentTokenColumn();\n        var row = it.getCurrentTokenRow();\n        return new Range(row, col, row, col + tok.value.length);\n    };\n    this.$id = \"ace/mode/logiql\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/logiql\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}