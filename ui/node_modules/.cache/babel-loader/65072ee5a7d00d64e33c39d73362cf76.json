{"ast":null,"code":"ace.define(\"ace/mode/ada_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var AdaHighlightRules = function () {\n    var keywords = \"abort|else|new|return|abs|elsif|not|reverse|abstract|end|null|accept|entry|select|\" + \"access|exception|of|separate|aliased|exit|or|some|all|others|subtype|and|for|out|synchronized|\" + \"array|function|overriding|at|tagged|generic|package|task|begin|goto|pragma|terminate|\" + \"body|private|then|if|procedure|type|case|in|protected|constant|interface|until|\" + \"|is|raise|use|declare|range|delay|limited|record|when|delta|loop|rem|while|digits|renames|with|do|mod|requeue|xor\";\n    var builtinConstants = \"true|false|null\";\n    var builtinFunctions = \"count|min|max|avg|sum|rank|now|coalesce|main\";\n    var keywordMapper = this.createKeywordMapper({\n      \"support.function\": builtinFunctions,\n      \"keyword\": keywords,\n      \"constant.language\": builtinConstants\n    }, \"identifier\", true);\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"--.*$\"\n      }, {\n        token: \"string\",\n        // \" string\n        regex: '\".*?\"'\n      }, {\n        token: \"string\",\n        // character\n        regex: \"'.'\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n      }, {\n        token: \"keyword.operator\",\n        regex: \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[\\\\(]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\)]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }]\n    };\n  };\n\n  oop.inherits(AdaHighlightRules, TextHighlightRules);\n  exports.AdaHighlightRules = AdaHighlightRules;\n});\nace.define(\"ace/mode/ada\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/ada_highlight_rules\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var AdaHighlightRules = require(\"./ada_highlight_rules\").AdaHighlightRules;\n\n  var Range = require(\"../range\").Range;\n\n  var Mode = function () {\n    this.HighlightRules = AdaHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*(begin|loop|then|is|do)\\s*$/);\n\n        if (match) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      var complete_line = line + input;\n\n      if (complete_line.match(/^\\s*(begin|end)$/)) {\n        return true;\n      }\n\n      return false;\n    };\n\n    this.autoOutdent = function (state, session, row) {\n      var line = session.getLine(row);\n      var prevLine = session.getLine(row - 1);\n      var prevIndent = this.$getIndent(prevLine).length;\n      var indent = this.$getIndent(line).length;\n\n      if (indent <= prevIndent) {\n        return;\n      }\n\n      session.outdentRows(new Range(row, 0, row + 2, 0));\n    };\n\n    this.$id = \"ace/mode/ada\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/ada\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-ada.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","AdaHighlightRules","keywords","builtinConstants","builtinFunctions","keywordMapper","createKeywordMapper","$rules","token","regex","inherits","TextMode","Mode","Range","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","line","tab","indent","$getIndent","tokenizedLine","getTokenizer","getLineTokens","tokens","length","type","match","checkOutdent","input","complete_line","autoOutdent","session","row","getLine","prevLine","prevIndent","outdentRows","$id","call","prototype","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/ada_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar AdaHighlightRules = function() {\nvar keywords = \"abort|else|new|return|abs|elsif|not|reverse|abstract|end|null|accept|entry|select|\" +\n\"access|exception|of|separate|aliased|exit|or|some|all|others|subtype|and|for|out|synchronized|\" +\n\"array|function|overriding|at|tagged|generic|package|task|begin|goto|pragma|terminate|\" +\n\"body|private|then|if|procedure|type|case|in|protected|constant|interface|until|\" +\n\"|is|raise|use|declare|range|delay|limited|record|when|delta|loop|rem|while|digits|renames|with|do|mod|requeue|xor\";\n\n    var builtinConstants = (\n        \"true|false|null\"\n    );\n\n    var builtinFunctions = (\n        \"count|min|max|avg|sum|rank|now|coalesce|main\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"support.function\": builtinFunctions,\n        \"keyword\": keywords,\n        \"constant.language\": builtinConstants\n    }, \"identifier\", true);\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"--.*$\"\n        }, {\n            token : \"string\",           // \" string\n            regex : '\".*?\"'\n        }, {\n            token : \"string\",           // character\n            regex : \"'.'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\(]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        } ]\n    };\n};\n\noop.inherits(AdaHighlightRules, TextHighlightRules);\n\nexports.AdaHighlightRules = AdaHighlightRules;\n});\n\nace.define(\"ace/mode/ada\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/ada_highlight_rules\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar AdaHighlightRules = require(\"./ada_highlight_rules\").AdaHighlightRules;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = AdaHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        if (state == \"start\") {\n            var match = line.match(/^.*(begin|loop|then|is|do)\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        var complete_line = line + input;\n        if (complete_line.match(/^\\s*(begin|end)$/)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    this.autoOutdent = function(state, session, row) {\n\n        var line = session.getLine(row);\n        var prevLine = session.getLine(row - 1);\n        var prevIndent = this.$getIndent(prevLine).length;\n        var indent = this.$getIndent(line).length;\n        if (indent <= prevIndent) {\n            return;\n        }\n\n        session.outdentRows(new Range(row, 0, row + 2, 0));\n    };\n\n\n    this.$id = \"ace/mode/ada\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/ada\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}