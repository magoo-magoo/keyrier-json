{"ast":null,"code":"ace.define(\"ace/mode/kotlin_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var KotlinHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#comments\"\n      }, {\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"entity.name.package.kotlin\", \"text\"],\n        regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n      }, {\n        include: \"#imports\"\n      }, {\n        include: \"#statements\"\n      }],\n      \"#classes\": [{\n        token: \"text\",\n        regex: /(?=\\s*(?:companion|class|object|interface))/,\n        push: [{\n          token: \"text\",\n          regex: /}|(?=$)/,\n          next: \"pop\"\n        }, {\n          token: [\"keyword.other.kotlin\", \"text\"],\n          regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=<|{|\\(|:)/,\n            next: \"pop\"\n          }, {\n            token: \"keyword.other.kotlin\",\n            regex: /\\bobject\\b/\n          }, {\n            token: \"entity.name.type.class.kotlin\",\n            regex: /\\w+/\n          }]\n        }, {\n          token: \"text\",\n          regex: /</,\n          push: [{\n            token: \"text\",\n            regex: />/,\n            next: \"pop\"\n          }, {\n            include: \"#generics\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?={|$)/,\n            next: \"pop\"\n          }, {\n            token: \"entity.other.inherited-class.kotlin\",\n            regex: /\\w+/\n          }, {\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n              token: \"text\",\n              regex: /\\)/,\n              next: \"pop\"\n            }, {\n              include: \"#expressions\"\n            }]\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#statements\"\n          }]\n        }]\n      }],\n      \"#comments\": [{\n        token: \"punctuation.definition.comment.kotlin\",\n        regex: /\\/\\*/,\n        push: [{\n          token: \"punctuation.definition.comment.kotlin\",\n          regex: /\\*\\//,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.block.kotlin\"\n        }]\n      }, {\n        token: [\"text\", \"punctuation.definition.comment.kotlin\", \"comment.line.double-slash.kotlin\"],\n        regex: /(\\s*)(\\/\\/)(.*$)/\n      }],\n      \"#constants\": [{\n        token: \"constant.language.kotlin\",\n        regex: /\\b(?:true|false|null|this|super)\\b/\n      }, {\n        token: \"constant.numeric.kotlin\",\n        regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n      }, {\n        token: \"constant.other.kotlin\",\n        regex: /\\b[A-Z][A-Z0-9_]+\\b/\n      }],\n      \"#expressions\": [{\n        token: \"text\",\n        regex: /\\(/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        include: \"#types\"\n      }, {\n        include: \"#strings\"\n      }, {\n        include: \"#constants\"\n      }, {\n        include: \"#comments\"\n      }, {\n        include: \"#keywords\"\n      }],\n      \"#functions\": [{\n        token: \"text\",\n        regex: /(?=\\s*fun)/,\n        push: [{\n          token: \"text\",\n          regex: /}|(?=$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\bfun\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=\\()/,\n            next: \"pop\"\n          }, {\n            token: \"text\",\n            regex: /</,\n            push: [{\n              token: \"text\",\n              regex: />/,\n              next: \"pop\"\n            }, {\n              include: \"#generics\"\n            }]\n          }, {\n            token: [\"text\", \"entity.name.function.kotlin\"],\n            regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?={|=|$)/,\n            next: \"pop\"\n          }, {\n            include: \"#types\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /(?=\\})/,\n            next: \"pop\"\n          }, {\n            include: \"#statements\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }],\n      \"#generics\": [{\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|>)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        include: \"#keywords\"\n      }, {\n        token: \"storage.type.generic.kotlin\",\n        regex: /\\w+/\n      }],\n      \"#getters-and-setters\": [{\n        token: [\"entity.name.function.kotlin\", \"text\"],\n        regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\n        push: [{\n          token: \"text\",\n          regex: /\\}|(?=\\bset\\b)|$/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$|\\bset\\b)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }, {\n        token: [\"entity.name.function.kotlin\", \"text\"],\n        regex: /\\b(set)\\b(\\s*)(?=\\()/,\n        push: [{\n          token: \"text\",\n          regex: /\\}|(?=\\bget\\b)|$/,\n          next: \"pop\"\n        }, {\n          token: \"text\",\n          regex: /\\(/,\n          push: [{\n            token: \"text\",\n            regex: /\\)/,\n            next: \"pop\"\n          }, {\n            include: \"#parameters\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$|\\bset\\b)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }, {\n          token: \"text\",\n          regex: /\\{/,\n          push: [{\n            token: \"text\",\n            regex: /\\}/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }]\n        }]\n      }],\n      \"#imports\": [{\n        token: [\"text\", \"keyword.other.kotlin\", \"text\", \"keyword.other.kotlin\"],\n        regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n      }],\n      \"#keywords\": [{\n        token: \"storage.modifier.kotlin\",\n        regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\n      }, {\n        token: \"keyword.control.catch-exception.kotlin\",\n        regex: /\\b(?:try|catch|finally|throw)\\b/\n      }, {\n        token: \"keyword.control.kotlin\",\n        regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\n      }, {\n        token: \"keyword.operator.kotlin\",\n        regex: /\\b(?:in|is|as|assert)\\b/\n      }, {\n        token: \"keyword.operator.comparison.kotlin\",\n        regex: /==|!=|===|!==|<=|>=|<|>/\n      }, {\n        token: \"keyword.operator.assignment.kotlin\",\n        regex: /=/\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/\n      }, {\n        token: \"keyword.operator.dot.kotlin\",\n        regex: /\\./\n      }, {\n        token: \"keyword.operator.increment-decrement.kotlin\",\n        regex: /\\-\\-|\\+\\+/\n      }, {\n        token: \"keyword.operator.arithmetic.kotlin\",\n        regex: /\\-|\\+|\\*|\\/|%/\n      }, {\n        token: \"keyword.operator.arithmetic.assign.kotlin\",\n        regex: /\\+=|\\-=|\\*=|\\/=/\n      }, {\n        token: \"keyword.operator.logical.kotlin\",\n        regex: /!|&&|\\|\\|/\n      }, {\n        token: \"keyword.operator.range.kotlin\",\n        regex: /\\.\\./\n      }, {\n        token: \"punctuation.terminator.kotlin\",\n        regex: /;/\n      }],\n      \"#namespaces\": [{\n        token: \"keyword.other.kotlin\",\n        regex: /\\bnamespace\\b/\n      }, {\n        token: \"text\",\n        regex: /\\{/,\n        push: [{\n          token: \"text\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#statements\"\n        }]\n      }],\n      \"#parameters\": [{\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /:/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|\\)|=)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /=/,\n        push: [{\n          token: \"text\",\n          regex: /(?=,|\\))/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        include: \"#keywords\"\n      }, {\n        token: \"variable.parameter.function.kotlin\",\n        regex: /\\w+/\n      }],\n      \"#statements\": [{\n        include: \"#namespaces\"\n      }, {\n        include: \"#typedefs\"\n      }, {\n        include: \"#classes\"\n      }, {\n        include: \"#functions\"\n      }, {\n        include: \"#variables\"\n      }, {\n        include: \"#getters-and-setters\"\n      }, {\n        include: \"#expressions\"\n      }],\n      \"#strings\": [{\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /\"\"\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /\"\"\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.third.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /\"/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          token: \"variable.parameter.template.kotlin\",\n          regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.double.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /'/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /'/,\n          next: \"pop\"\n        }, {\n          token: \"constant.character.escape.kotlin\",\n          regex: /\\\\./\n        }, {\n          defaultToken: \"string.quoted.single.kotlin\"\n        }]\n      }, {\n        token: \"punctuation.definition.string.begin.kotlin\",\n        regex: /`/,\n        push: [{\n          token: \"punctuation.definition.string.end.kotlin\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.quoted.single.kotlin\"\n        }]\n      }],\n      \"#typedefs\": [{\n        token: \"text\",\n        regex: /(?=\\s*type)/,\n        push: [{\n          token: \"text\",\n          regex: /(?=$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\btype\\b/\n        }, {\n          token: \"text\",\n          regex: /</,\n          push: [{\n            token: \"text\",\n            regex: />/,\n            next: \"pop\"\n          }, {\n            include: \"#generics\"\n          }]\n        }, {\n          include: \"#expressions\"\n        }]\n      }],\n      \"#types\": [{\n        token: \"storage.type.buildin.kotlin\",\n        regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\n      }, {\n        token: \"storage.type.buildin.array.kotlin\",\n        regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\n      }, {\n        token: [\"storage.type.buildin.collection.kotlin\", \"text\"],\n        regex: /\\b(Array|List|Map)(<\\b)/,\n        push: [{\n          token: \"text\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#keywords\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\w+</,\n        push: [{\n          token: \"text\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }, {\n          include: \"#keywords\"\n        }]\n      }, {\n        token: [\"keyword.operator.tuple.kotlin\", \"text\"],\n        regex: /(#)(\\()/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#expressions\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\{/,\n        push: [{\n          token: \"text\",\n          regex: /\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#statements\"\n        }]\n      }, {\n        token: \"text\",\n        regex: /\\(/,\n        push: [{\n          token: \"text\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#types\"\n        }]\n      }, {\n        token: \"keyword.operator.declaration.kotlin\",\n        regex: /->/\n      }],\n      \"#variables\": [{\n        token: \"text\",\n        regex: /(?=\\s*(?:var|val))/,\n        push: [{\n          token: \"text\",\n          regex: /(?=:|=|$)/,\n          next: \"pop\"\n        }, {\n          token: \"keyword.other.kotlin\",\n          regex: /\\b(?:var|val)\\b/,\n          push: [{\n            token: \"text\",\n            regex: /(?=:|=|$)/,\n            next: \"pop\"\n          }, {\n            token: \"text\",\n            regex: /</,\n            push: [{\n              token: \"text\",\n              regex: />/,\n              next: \"pop\"\n            }, {\n              include: \"#generics\"\n            }]\n          }, {\n            token: [\"text\", \"entity.name.variable.kotlin\"],\n            regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n          }]\n        }, {\n          token: \"keyword.operator.declaration.kotlin\",\n          regex: /:/,\n          push: [{\n            token: \"text\",\n            regex: /(?==|$)/,\n            next: \"pop\"\n          }, {\n            include: \"#types\"\n          }, {\n            include: \"#getters-and-setters\"\n          }]\n        }, {\n          token: \"keyword.operator.assignment.kotlin\",\n          regex: /=/,\n          push: [{\n            token: \"text\",\n            regex: /(?=$)/,\n            next: \"pop\"\n          }, {\n            include: \"#expressions\"\n          }, {\n            include: \"#getters-and-setters\"\n          }]\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  KotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n  };\n  oop.inherits(KotlinHighlightRules, TextHighlightRules);\n  exports.KotlinHighlightRules = KotlinHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/kotlin\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/kotlin_highlight_rules\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = new CstyleBehaviour();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.$id = \"ace/mode/kotlin\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/kotlin\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-kotlin.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","KotlinHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CstyleBehaviour","HighlightRules","foldingRules","$behaviour","$id"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/kotlin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar KotlinHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            include: \"#comments\"\n        }, {\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"entity.name.package.kotlin\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n        }, {\n            include: \"#imports\"\n        }, {\n            include: \"#statements\"\n        }],\n        \"#classes\": [{\n            token: \"text\",\n            regex: /(?=\\s*(?:companion|class|object|interface))/,\n            push: [{\n                token: \"text\",\n                regex: /}|(?=$)/,\n                next: \"pop\"\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\"],\n                regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=<|{|\\(|:)/,\n                    next: \"pop\"\n                }, {\n                    token: \"keyword.other.kotlin\",\n                    regex: /\\bobject\\b/\n                }, {\n                    token: \"entity.name.type.class.kotlin\",\n                    regex: /\\w+/\n                }]\n            }, {\n                token: \"text\",\n                regex: /</,\n                push: [{\n                    token: \"text\",\n                    regex: />/,\n                    next: \"pop\"\n                }, {\n                    include: \"#generics\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?={|$)/,\n                    next: \"pop\"\n                }, {\n                    token: \"entity.other.inherited-class.kotlin\",\n                    regex: /\\w+/\n                }, {\n                    token: \"text\",\n                    regex: /\\(/,\n                    push: [{\n                        token: \"text\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#expressions\"\n                    }]\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#statements\"\n                }]\n            }]\n        }],\n        \"#comments\": [{\n            token: \"punctuation.definition.comment.kotlin\",\n            regex: /\\/\\*/,\n            push: [{\n                token: \"punctuation.definition.comment.kotlin\",\n                regex: /\\*\\//,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.block.kotlin\"\n            }]\n        }, {\n            token: [\n                \"text\",\n                \"punctuation.definition.comment.kotlin\",\n                \"comment.line.double-slash.kotlin\"\n            ],\n            regex: /(\\s*)(\\/\\/)(.*$)/\n        }],\n        \"#constants\": [{\n            token: \"constant.language.kotlin\",\n            regex: /\\b(?:true|false|null|this|super)\\b/\n        }, {\n            token: \"constant.numeric.kotlin\",\n            regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n        }, {\n            token: \"constant.other.kotlin\",\n            regex: /\\b[A-Z][A-Z0-9_]+\\b/\n        }],\n        \"#expressions\": [{\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            include: \"#types\"\n        }, {\n            include: \"#strings\"\n        }, {\n            include: \"#constants\"\n        }, {\n            include: \"#comments\"\n        }, {\n            include: \"#keywords\"\n        }],\n        \"#functions\": [{\n            token: \"text\",\n            regex: /(?=\\s*fun)/,\n            push: [{\n                token: \"text\",\n                regex: /}|(?=$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\bfun\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=\\()/,\n                    next: \"pop\"\n                }, {\n                    token: \"text\",\n                    regex: /</,\n                    push: [{\n                        token: \"text\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#generics\"\n                    }]\n                }, {\n                    token: [\"text\", \"entity.name.function.kotlin\"],\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?={|=|$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#types\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=\\})/,\n                    next: \"pop\"\n                }, {\n                    include: \"#statements\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }],\n        \"#generics\": [{\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|>)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            include: \"#keywords\"\n        }, {\n            token: \"storage.type.generic.kotlin\",\n            regex: /\\w+/\n        }],\n        \"#getters-and-setters\": [{\n            token: [\"entity.name.function.kotlin\", \"text\"],\n            regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\n            push: [{\n                token: \"text\",\n                regex: /\\}|(?=\\bset\\b)|$/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$|\\bset\\b)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }, {\n            token: [\"entity.name.function.kotlin\", \"text\"],\n            regex: /\\b(set)\\b(\\s*)(?=\\()/,\n            push: [{\n                token: \"text\",\n                regex: /\\}|(?=\\bget\\b)|$/,\n                next: \"pop\"\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$|\\bset\\b)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }],\n        \"#imports\": [{\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"keyword.other.kotlin\"\n            ],\n            regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n        }],\n        \"#keywords\": [{\n            token: \"storage.modifier.kotlin\",\n            regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\n        }, {\n            token: \"keyword.control.catch-exception.kotlin\",\n            regex: /\\b(?:try|catch|finally|throw)\\b/\n        }, {\n            token: \"keyword.control.kotlin\",\n            regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\n        }, {\n            token: \"keyword.operator.kotlin\",\n            regex: /\\b(?:in|is|as|assert)\\b/\n        }, {\n            token: \"keyword.operator.comparison.kotlin\",\n            regex: /==|!=|===|!==|<=|>=|<|>/\n        }, {\n            token: \"keyword.operator.assignment.kotlin\",\n            regex: /=/\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/\n        }, {\n            token: \"keyword.operator.dot.kotlin\",\n            regex: /\\./\n        }, {\n            token: \"keyword.operator.increment-decrement.kotlin\",\n            regex: /\\-\\-|\\+\\+/\n        }, {\n            token: \"keyword.operator.arithmetic.kotlin\",\n            regex: /\\-|\\+|\\*|\\/|%/\n        }, {\n            token: \"keyword.operator.arithmetic.assign.kotlin\",\n            regex: /\\+=|\\-=|\\*=|\\/=/\n        }, {\n            token: \"keyword.operator.logical.kotlin\",\n            regex: /!|&&|\\|\\|/\n        }, {\n            token: \"keyword.operator.range.kotlin\",\n            regex: /\\.\\./\n        }, {\n            token: \"punctuation.terminator.kotlin\",\n            regex: /;/\n        }],\n        \"#namespaces\": [{\n            token: \"keyword.other.kotlin\",\n            regex: /\\bnamespace\\b/\n        }, {\n            token: \"text\",\n            regex: /\\{/,\n            push: [{\n                token: \"text\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#statements\"\n            }]\n        }],\n        \"#parameters\": [{\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|\\)|=)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /=/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|\\))/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            include: \"#keywords\"\n        }, {\n            token: \"variable.parameter.function.kotlin\",\n            regex: /\\w+/\n        }],\n        \"#statements\": [{\n            include: \"#namespaces\"\n        }, {\n            include: \"#typedefs\"\n        }, {\n            include: \"#classes\"\n        }, {\n            include: \"#functions\"\n        }, {\n            include: \"#variables\"\n        }, {\n            include: \"#getters-and-setters\"\n        }, {\n            include: \"#expressions\"\n        }],\n        \"#strings\": [{\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /\"\"\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /\"\"\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.third.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /'/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.single.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /`/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /`/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string.quoted.single.kotlin\"\n            }]\n        }],\n        \"#typedefs\": [{\n            token: \"text\",\n            regex: /(?=\\s*type)/,\n            push: [{\n                token: \"text\",\n                regex: /(?=$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\btype\\b/\n            }, {\n                token: \"text\",\n                regex: /</,\n                push: [{\n                    token: \"text\",\n                    regex: />/,\n                    next: \"pop\"\n                }, {\n                    include: \"#generics\"\n                }]\n            }, {\n                include: \"#expressions\"\n            }]\n        }],\n        \"#types\": [{\n            token: \"storage.type.buildin.kotlin\",\n            regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\n        }, {\n            token: \"storage.type.buildin.array.kotlin\",\n            regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\n        }, {\n            token: [\n                \"storage.type.buildin.collection.kotlin\",\n                \"text\"\n            ],\n            regex: /\\b(Array|List|Map)(<\\b)/,\n            push: [{\n                token: \"text\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#keywords\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\w+</,\n            push: [{\n                token: \"text\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#keywords\"\n            }]\n        }, {\n            token: [\"keyword.operator.tuple.kotlin\", \"text\"],\n            regex: /(#)(\\()/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\{/,\n            push: [{\n                token: \"text\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#statements\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /->/\n        }],\n        \"#variables\": [{\n            token: \"text\",\n            regex: /(?=\\s*(?:var|val))/,\n            push: [{\n                token: \"text\",\n                regex: /(?=:|=|$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\b(?:var|val)\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=:|=|$)/,\n                    next: \"pop\"\n                }, {\n                    token: \"text\",\n                    regex: /</,\n                    push: [{\n                        token: \"text\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#generics\"\n                    }]\n                }, {\n                    token: [\"text\", \"entity.name.variable.kotlin\"],\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?==|$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#types\"\n                }, {\n                    include: \"#getters-and-setters\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }, {\n                    include: \"#getters-and-setters\"\n                }]\n            }]\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nKotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n};\n\n\noop.inherits(KotlinHighlightRules, TextHighlightRules);\n\nexports.KotlinHighlightRules = KotlinHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/kotlin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/kotlin_highlight_rules\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar KotlinHighlightRules = require(\"./kotlin_highlight_rules\").KotlinHighlightRules;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = new CstyleBehaviour();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$id = \"ace/mode/kotlin\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/kotlin\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}