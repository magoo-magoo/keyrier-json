{"ast":null,"code":"ace.define(\"ace/mode/crystal_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var CrystalHighlightRules = function () {\n    var builtinFunctions = \"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\";\n    var keywords = \"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib\" + \"|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with\" + \"|alias|rescue|ensure|macro|uninitialized|union|type|require\";\n    var buildinConstants = \"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\";\n    var builtinVariables = \"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|\" + \"root_url|flash|session|cookies|params|request|response|logger|self\";\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n      \"keyword\": keywords,\n      \"constant.language\": buildinConstants,\n      \"variable.language\": builtinVariables,\n      \"support.function\": builtinFunctions\n    }, \"identifier\");\n    var hexNumber = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var decNumber = \"(?:[0-9][\\\\d_]*)\";\n    var octNumber = \"(?:0o[0-7][0-7]*)\";\n    var binNumber = \"(?:0[bB][01]+)\";\n    var intNumber = \"(?:[+-]?)(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:_?[iIuU](?:8|16|32|64))?\\\\b\";\n    var escapeExpression = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/;\n    var extEscapeExspresssion = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"#.*$\"\n      }, {\n        token: \"string.regexp\",\n        regex: \"[/]\",\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.regexp\",\n          regex: \"[/][imx]*(?=[).,;\\\\s]|$)\",\n          next: \"pop\"\n        }, {\n          defaultToken: \"string.regexp\"\n        }]\n      }, [{\n        regex: \"[{}]\",\n        onMatch: function (val, state, stack) {\n          this.next = val == \"{\" ? this.nextState : \"\";\n\n          if (val == \"{\" && stack.length) {\n            stack.unshift(\"start\", state);\n            return \"paren.lparen\";\n          }\n\n          if (val == \"}\" && stack.length) {\n            stack.shift();\n            this.next = stack.shift();\n            if (this.next.indexOf(\"string\") != -1) return \"paren.end\";\n          }\n\n          return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n        },\n        nextState: \"start\"\n      }, {\n        token: \"string.start\",\n        regex: /\"/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string\",\n          regex: /\\\\#{/\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          token: \"string.end\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: /`/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string\",\n          regex: /\\\\#{/\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          token: \"string.end\",\n          regex: /`/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"rpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\(/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /\\(/,\n          push: \"rpstring\"\n        }, {\n          token: \"string.end\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"spstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\[/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /\\[/,\n          push: \"spstring\"\n        }, {\n          token: \"string.end\",\n          regex: /]/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"fpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?{/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /{/,\n          push: \"fpstring\"\n        }, {\n          token: \"string.end\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"tpstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?</,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.start\",\n          regex: /</,\n          push: \"tpstring\"\n        }, {\n          token: \"string.end\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"ppstring\",\n        token: \"string.start\",\n        regex: /%[Qx]?\\|/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"string.end\",\n          regex: /\\|/,\n          next: \"pop\"\n        }, {\n          token: \"paren.start\",\n          regex: /#{/,\n          push: \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"rpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\(/,\n        push: [{\n          token: \"string.start\",\n          regex: /\\(/,\n          push: \"rpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"spqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\[/,\n        push: [{\n          token: \"string.start\",\n          regex: /\\[/,\n          push: \"spqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /]/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"fpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]{/,\n        push: [{\n          token: \"string.start\",\n          regex: /{/,\n          push: \"fpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: /}/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"tpqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]</,\n        push: [{\n          token: \"string.start\",\n          regex: /</,\n          push: \"tpqstring\"\n        }, {\n          token: \"string.end\",\n          regex: />/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        stateName: \"ppqstring\",\n        token: \"string.start\",\n        regex: /%[qwir]\\|/,\n        push: [{\n          token: \"string.end\",\n          regex: /\\|/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }, {\n        token: \"string.start\",\n        regex: /'/,\n        push: [{\n          token: \"constant.language.escape\",\n          regex: escapeExpression\n        }, {\n          token: \"string.end\",\n          regex: /'|$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      }], {\n        token: \"text\",\n        // namespaces aren't symbols\n        regex: \"::\"\n      }, {\n        token: \"variable.instance\",\n        // instance variable\n        regex: \"@{1,2}[a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"variable.fresh\",\n        // fresh variable\n        regex: \"%[a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"support.class\",\n        // class name\n        regex: \"[A-Z][a-zA-Z_\\\\d]+\"\n      }, {\n        token: \"constant.other.symbol\",\n        // symbol\n        regex: \"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        regex: intNumber\n      }, {\n        token: \"constant.other.symbol\",\n        regex: ':\"',\n        push: [{\n          token: \"constant.language.escape\",\n          regex: extEscapeExspresssion\n        }, {\n          token: \"constant.other.symbol\",\n          regex: '\"',\n          next: \"pop\"\n        }, {\n          defaultToken: \"constant.other.symbol\"\n        }]\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: \"support.function\",\n        regex: \"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"\n      }, {\n        token: keywordMapper,\n        regex: \"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"\n      }, {\n        token: \"variable.system\",\n        regex: \"\\\\$\\\\!|\\\\$\\\\?\"\n      }, {\n        token: \"punctuation.separator.key-value\",\n        regex: \"=>\"\n      }, {\n        stateName: \"heredoc\",\n        onMatch: function (value, currentState, stack) {\n          var next = \"heredoc\";\n          var tokens = value.split(this.splitRegex);\n          stack.push(next, tokens[3]);\n          return [{\n            type: \"constant\",\n            value: tokens[1]\n          }, {\n            type: \"string\",\n            value: tokens[2]\n          }, {\n            type: \"support.class\",\n            value: tokens[3]\n          }, {\n            type: \"string\",\n            value: tokens[4]\n          }];\n        },\n        regex: \"(<<-)([']?)([\\\\w]+)([']?)\",\n        rules: {\n          heredoc: [{\n            token: \"string\",\n            regex: \"^ +\"\n          }, {\n            onMatch: function (value, currentState, stack) {\n              if (value === stack[1]) {\n                stack.shift();\n                stack.shift();\n                this.next = stack[0] || \"start\";\n                return \"support.class\";\n              }\n\n              this.next = \"\";\n              return \"string\";\n            },\n            regex: \".*$\",\n            next: \"start\"\n          }]\n        }\n      }, {\n        regex: \"$\",\n        token: \"empty\",\n        next: function (currentState, stack) {\n          if (stack[0] === \"heredoc\") return stack[0];\n          return currentState;\n        }\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[.]\\s*(?![.])/,\n        push: [{\n          token: \"punctuation.operator\",\n          regex: /[.]\\s*(?![.])/\n        }, {\n          token: \"support.function\",\n          regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n          regex: \"\",\n          token: \"empty\",\n          next: \"pop\"\n        }]\n      }, {\n        token: \"keyword.operator\",\n        regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(CrystalHighlightRules, TextHighlightRules);\n  exports.CrystalHighlightRules = CrystalHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/coffee\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/folding/fold_mode\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var Range = require(\"../../range\").Range;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var range = this.indentationBlock(session, row);\n      if (range) return range;\n      var re = /\\S/;\n      var line = session.getLine(row);\n      var startLevel = line.search(re);\n      if (startLevel == -1 || line[startLevel] != \"#\") return;\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var level = line.search(re);\n        if (level == -1) continue;\n        if (line[level] != \"#\") break;\n        endRow = row;\n      }\n\n      if (endRow > startRow) {\n        var endColumn = session.getLine(endRow).length;\n        return new Range(startRow, startColumn, endRow, endColumn);\n      }\n    };\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n      var indent = line.search(/\\S/);\n      var next = session.getLine(row + 1);\n      var prev = session.getLine(row - 1);\n      var prevIndent = prev.search(/\\S/);\n      var nextIndent = next.search(/\\S/);\n\n      if (indent == -1) {\n        session.foldWidgets[row - 1] = prevIndent != -1 && prevIndent < nextIndent ? \"start\" : \"\";\n        return \"\";\n      }\n\n      if (prevIndent == -1) {\n        if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n          session.foldWidgets[row - 1] = \"\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"start\";\n        }\n      } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n        if (session.getLine(row - 2).search(/\\S/) == -1) {\n          session.foldWidgets[row - 1] = \"start\";\n          session.foldWidgets[row + 1] = \"\";\n          return \"\";\n        }\n      }\n\n      if (prevIndent != -1 && prevIndent < indent) session.foldWidgets[row - 1] = \"start\";else session.foldWidgets[row - 1] = \"\";\n      if (indent < nextIndent) return \"start\";else return \"\";\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/crystal\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/crystal_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/range\", \"ace/mode/behaviour/cstyle\", \"ace/mode/folding/coffee\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var CrystalHighlightRules = require(\"./crystal_highlight_rules\").CrystalHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var Range = require(\"../range\").Range;\n\n  var CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\n\n  var FoldMode = require(\"./folding/coffee\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = CrystalHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n      var tokens = tokenizedLine.tokens;\n\n      if (tokens.length && tokens[tokens.length - 1].type == \"comment\") {\n        return indent;\n      }\n\n      if (state == \"start\") {\n        var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n        var startingClassOrMethod = line.match(/^\\s*(class|def|module)\\s.*$/);\n        var startingDoBlock = line.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/);\n        var startingConditional = line.match(/^\\s*(if|else|when)\\s*/);\n\n        if (match || startingClassOrMethod || startingDoBlock || startingConditional) {\n          indent += tab;\n        }\n      }\n\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return /^\\s+(end|else)$/.test(line + input) || this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, session, row) {\n      var line = session.getLine(row);\n      if (/}/.test(line)) return this.$outdent.autoOutdent(session, row);\n      var indent = this.$getIndent(line);\n      var prevLine = session.getLine(row - 1);\n      var prevIndent = this.$getIndent(prevLine);\n      var tab = session.getTabString();\n\n      if (prevIndent.length <= indent.length) {\n        if (indent.slice(-tab.length) == tab) session.remove(new Range(row, indent.length - tab.length, row, indent.length));\n      }\n    };\n\n    this.$id = \"ace/mode/crystal\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/crystal\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-crystal.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","CrystalHighlightRules","builtinFunctions","keywords","buildinConstants","builtinVariables","keywordMapper","$keywords","createKeywordMapper","hexNumber","decNumber","octNumber","binNumber","intNumber","escapeExpression","extEscapeExspresssion","$rules","token","regex","push","next","defaultToken","onMatch","val","state","stack","nextState","length","unshift","shift","indexOf","stateName","value","currentState","tokens","split","splitRegex","type","rules","heredoc","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","getFoldWidgetRange","session","foldStyle","range","indentationBlock","re","startLevel","search","startColumn","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","prev","prevIndent","nextIndent","foldWidgets","TextMode","Mode","CstyleBehaviour","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","getNextLineIndent","tab","tokenizedLine","getTokenizer","getLineTokens","startingClassOrMethod","startingDoBlock","startingConditional","prevLine","getTabString","slice","remove","$id","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/crystal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n    \"use strict\";\n\n    var oop = require(\"../lib/oop\");\n    var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n    var CrystalHighlightRules = function () {\n\n        var builtinFunctions = (\n            \"puts|initialize|previous_def|typeof|as|pointerof|sizeof|instance_sizeof\"\n        );\n\n        var keywords = (\n            \"if|end|else|elsif|unless|case|when|break|while|next|until|def|return|class|new|getter|setter|property|lib\"\n            + \"|fun|do|struct|private|protected|public|module|super|abstract|include|extend|begin|enum|raise|yield|with\"\n            + \"|alias|rescue|ensure|macro|uninitialized|union|type|require\"\n        );\n\n        var buildinConstants = (\n            \"true|TRUE|false|FALSE|nil|NIL|__LINE__|__END_LINE__|__FILE__|__DIR__\"\n        );\n\n        var builtinVariables = (\n            \"$DEBUG|$defout|$FILENAME|$LOAD_PATH|$SAFE|$stdin|$stdout|$stderr|$VERBOSE|\" +\n            \"root_url|flash|session|cookies|params|request|response|logger|self\"\n        );\n\n        var keywordMapper = this.$keywords = this.createKeywordMapper({\n            \"keyword\": keywords,\n            \"constant.language\": buildinConstants,\n            \"variable.language\": builtinVariables,\n            \"support.function\": builtinFunctions\n        }, \"identifier\");\n\n        var hexNumber = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n        var decNumber = \"(?:[0-9][\\\\d_]*)\";\n        var octNumber = \"(?:0o[0-7][0-7]*)\";\n        var binNumber = \"(?:0[bB][01]+)\";\n        var intNumber = \"(?:[+-]?)(?:\" + hexNumber + \"|\" + decNumber + \"|\" + octNumber + \"|\" + binNumber + \")(?:_?[iIuU](?:8|16|32|64))?\\\\b\";\n        var escapeExpression = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}})/;\n        var extEscapeExspresssion = /\\\\(?:[nsrtvfbae'\"\\\\]|[0-7]{3}|x[\\da-fA-F]{2}|u[\\da-fA-F]{4}|u{[\\da-fA-F]{1,6}}|u{(:?[\\da-fA-F]{2}\\s)*[\\da-fA-F]{2}})/;\n\n        this.$rules = {\n            \"start\": [\n                {\n                    token: \"comment\",\n                    regex: \"#.*$\"\n                }, {\n                    token: \"string.regexp\",\n                    regex: \"[/]\",\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.regexp\",\n                        regex: \"[/][imx]*(?=[).,;\\\\s]|$)\",\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string.regexp\"\n                    }]\n                },\n                [{\n                    regex: \"[{}]\", onMatch: function (val, state, stack) {\n                        this.next = val == \"{\" ? this.nextState : \"\";\n                        if (val == \"{\" && stack.length) {\n                            stack.unshift(\"start\", state);\n                            return \"paren.lparen\";\n                        }\n                        if (val == \"}\" && stack.length) {\n                            stack.shift();\n                            this.next = stack.shift();\n                            if (this.next.indexOf(\"string\") != -1)\n                                return \"paren.end\";\n                        }\n                        return val == \"{\" ? \"paren.lparen\" : \"paren.rparen\";\n                    },\n                    nextState: \"start\"\n                }, {\n                    token: \"string.start\",\n                    regex: /\"/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string\",\n                        regex: /\\\\#{/\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /\"/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    token: \"string.start\",\n                    regex: /`/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string\",\n                        regex: /\\\\#{/\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /`/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"rpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\(/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.start\",\n                        regex: /\\(/,\n                        push: \"rpstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"spstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\[/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.start\",\n                        regex: /\\[/,\n                        push: \"spstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /]/,\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"fpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?{/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.start\",\n                        regex: /{/,\n                        push: \"fpstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /}/,\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"tpstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?</,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.start\",\n                        regex: /</,\n                        push: \"tpstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"ppstring\",\n                    token: \"string.start\",\n                    regex: /%[Qx]?\\|/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"string.end\",\n                        regex: /\\|/,\n                        next: \"pop\"\n                    }, {\n                        token: \"paren.start\",\n                        regex: /#{/,\n                        push: \"start\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"rpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\(/,\n                    push: [{\n                        token: \"string.start\",\n                        regex: /\\(/,\n                        push: \"rpqstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"spqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\[/,\n                    push: [{\n                        token: \"string.start\",\n                        regex: /\\[/,\n                        push: \"spqstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /]/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"fpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]{/,\n                    push: [{\n                        token: \"string.start\",\n                        regex: /{/,\n                        push: \"fpqstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: /}/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"tpqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]</,\n                    push: [{\n                        token: \"string.start\",\n                        regex: /</,\n                        push: \"tpqstring\"\n                    }, {\n                        token: \"string.end\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    stateName: \"ppqstring\",\n                    token: \"string.start\",\n                    regex: /%[qwir]\\|/,\n                    push: [{\n                        token: \"string.end\",\n                        regex: /\\|/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }, {\n                    token: \"string.start\",\n                    regex: /'/,\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: escapeExpression\n                    }, {\n                        token: \"string.end\",\n                        regex: /'|$/,\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"string\"\n                    }]\n                }], {\n                    token: \"text\", // namespaces aren't symbols\n                    regex: \"::\"\n                }, {\n                    token: \"variable.instance\", // instance variable\n                    regex: \"@{1,2}[a-zA-Z_\\\\d]+\"\n                }, {\n                    token: \"variable.fresh\", // fresh variable\n                    regex: \"%[a-zA-Z_\\\\d]+\"\n                }, {\n                    token: \"support.class\", // class name\n                    regex: \"[A-Z][a-zA-Z_\\\\d]+\"\n                }, {\n                    token: \"constant.other.symbol\", // symbol\n                    regex: \"[:](?:(?:===|<=>|\\\\[]\\\\?|\\\\[]=|\\\\[]|>>|\\\\*\\\\*|<<|==|!=|>=|<=|!~|=~|<|\\\\+|-|\\\\*|\\\\/|%|&|\\\\||\\\\^|>|!|~)|(?:(?:[A-Za-z_]|[@$](?=[a-zA-Z0-9_]))[a-zA-Z0-9_]*[!=?]?))\"\n                }, {\n                    token: \"constant.numeric\", // float\n                    regex: \"[+-]?\\\\d(?:\\\\d|_(?=\\\\d))*(?:(?:\\\\.\\\\d(?:\\\\d|_(?=\\\\d))*)?(?:[eE][+-]?\\\\d+)?)?(?:_?[fF](?:32|64))?\\\\b\"\n                }, {\n                    token: \"constant.numeric\",\n                    regex: intNumber\n                }, {\n                    token: \"constant.other.symbol\",\n                    regex: ':\"',\n                    push: [{\n                        token: \"constant.language.escape\",\n                        regex: extEscapeExspresssion\n                    }, {\n                        token: \"constant.other.symbol\",\n                        regex: '\"',\n                        next: \"pop\"\n                    }, {\n                        defaultToken: \"constant.other.symbol\"\n                    }]\n                }, {\n                    token: \"constant.language.boolean\",\n                    regex: \"(?:true|false)\\\\b\"\n                }, {\n                    token: \"support.function\",\n                    regex: \"(?:is_a\\\\?|nil\\\\?|responds_to\\\\?|as\\\\?)\"\n                }, {\n                    token: keywordMapper,\n                    regex: \"[a-zA-Z_$][a-zA-Z0-9_$!?]*\\\\b\"\n                }, {\n                    token: \"variable.system\",\n                    regex: \"\\\\$\\\\!|\\\\$\\\\?\"\n                }, {\n                    token: \"punctuation.separator.key-value\",\n                    regex: \"=>\"\n                }, {\n                    stateName: \"heredoc\",\n                    onMatch: function (value, currentState, stack) {\n                        var next = \"heredoc\";\n                        var tokens = value.split(this.splitRegex);\n                        stack.push(next, tokens[3]);\n                        return [\n                            {type: \"constant\", value: tokens[1]},\n                            {type: \"string\", value: tokens[2]},\n                            {type: \"support.class\", value: tokens[3]},\n                            {type: \"string\", value: tokens[4]}\n                        ];\n                    },\n                    regex: \"(<<-)([']?)([\\\\w]+)([']?)\",\n                    rules: {\n                        heredoc: [{\n                            token: \"string\",\n                            regex: \"^ +\"\n                        }, {\n                            onMatch: function (value, currentState, stack) {\n                                if (value === stack[1]) {\n                                    stack.shift();\n                                    stack.shift();\n                                    this.next = stack[0] || \"start\";\n                                    return \"support.class\";\n                                }\n                                this.next = \"\";\n                                return \"string\";\n                            },\n                            regex: \".*$\",\n                            next: \"start\"\n                        }]\n                    }\n                }, {\n                    regex: \"$\",\n                    token: \"empty\",\n                    next: function (currentState, stack) {\n                        if (stack[0] === \"heredoc\")\n                            return stack[0];\n                        return currentState;\n                    }\n                }, {\n                    token: \"punctuation.operator\",\n                    regex: /[.]\\s*(?![.])/,\n                    push: [{\n                        token : \"punctuation.operator\",\n                        regex : /[.]\\s*(?![.])/\n                    }, {\n                        token : \"support.function\",\n                        regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n                    }, {\n                        regex: \"\",\n                        token: \"empty\",\n                        next: \"pop\"\n                    }]\n                }, {\n                    token: \"keyword.operator\",\n                    regex: \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|\\\\?|\\\\:|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\^|\\\\|\"\n                }, {\n                    token: \"punctuation.operator\",\n                    regex: /[?:,;.]/\n                }, {\n                    token: \"paren.lparen\",\n                    regex: \"[[({]\"\n                }, {\n                    token: \"paren.rparen\",\n                    regex: \"[\\\\])}]\"\n                }, {\n                    token: \"text\",\n                    regex: \"\\\\s+\"\n                }\n            ]\n        };\n\n        this.normalizeRules();\n    };\n\n    oop.inherits(CrystalHighlightRules, TextHighlightRules);\n\n    exports.CrystalHighlightRules = CrystalHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\nvar Range = require(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/crystal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/crystal_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/coffee\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar CrystalHighlightRules = require(\"./crystal_highlight_rules\").CrystalHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = require(\"../range\").Range;\nvar CstyleBehaviour = require(\"./behaviour/cstyle\").CstyleBehaviour;\nvar FoldMode = require(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = CrystalHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            var startingClassOrMethod = line.match(/^\\s*(class|def|module)\\s.*$/);\n            var startingDoBlock = line.match(/.*do(\\s*|\\s+\\|.*\\|\\s*)$/);\n            var startingConditional = line.match(/^\\s*(if|else|when)\\s*/);\n            if (match || startingClassOrMethod || startingDoBlock || startingConditional) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return /^\\s+(end|else)$/.test(line + input) || this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, session, row) {\n        var line = session.getLine(row);\n        if (/}/.test(line))\n            return this.$outdent.autoOutdent(session, row);\n        var indent = this.$getIndent(line);\n        var prevLine = session.getLine(row - 1);\n        var prevIndent = this.$getIndent(prevLine);\n        var tab = session.getTabString();\n        if (prevIndent.length <= indent.length) {\n            if (indent.slice(-tab.length) == tab)\n                session.remove(new Range(row, indent.length-tab.length, row, indent.length));\n        }\n    };\n\n    this.$id = \"ace/mode/crystal\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/crystal\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}