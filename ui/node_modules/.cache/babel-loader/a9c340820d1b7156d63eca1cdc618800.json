{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/core/logging/performance.tsx\";\nimport Perfume from 'perfume.js';\nimport { isDebugMode } from 'core/misc/debug';\nimport * as React from 'react';\nimport { logPerf, logEvents, logError } from './logger';\n\nconst analyticsTracker = opt => {\n  logPerf(opt.metricName, opt.duration, opt.data);\n};\n\nconst options = {\n  // Metrics\n  firstContentfulPaint: true,\n  firstPaint: true,\n  firstInputDelay: true,\n  dataConsumption: true,\n  largestContentfulPaint: true,\n  navigationTiming: true,\n  // Analytics\n  analyticsTracker,\n  browserTracker: true,\n  // Logging\n  logPrefix: 'Perfume.js:',\n  logging: false,\n  // maxMeasureTime: 18000,\n  // maxDataConsumption: 18000,\n  warning: true,\n  debugging: false\n};\nconst perfume = isDebugMode() ? new Perfume(options) : null;\nexport const perfStart = name => {\n  if (!perfume) {\n    return;\n  }\n\n  perfume.start(name);\n};\nexport const perfEnd = name => {\n  if (!perfume) {\n    return;\n  }\n\n  perfume.end(name);\n};\nexport const perfEndPaint = name => {\n  if (!perfume) {\n    return;\n  }\n\n  perfume.endPaint(name);\n};\nexport const logPerfPeriodically = async () => {\n  const payload = [];\n\n  for (let i = 0; i < 50; i++) {\n    if (logEvents.isEmpty()) {\n      break;\n    }\n\n    const entry = logEvents.dequeue();\n    payload.push(entry);\n  }\n\n  if (payload.length === 0) {\n    return;\n  }\n\n  const logUrl = 'https://us-central1-keyrier-json.cloudfunctions.net/perflogs';\n\n  try {\n    await fetch(logUrl, {\n      method: 'POST',\n      body: JSON.stringify(payload)\n    });\n  } catch (error) {\n    logError('error sending perf logs', error);\n  }\n};\nexport const withPerformance = (Component, name) => ({ ...props\n}) => {\n  const onRender = (id, phase, actualDuration, baseDuration, startTime, commitTime, interactions) => {\n    logPerf(name, actualDuration, {\n      type: 'component-render',\n      id,\n      phase,\n      actualDuration,\n      baseDuration,\n      startTime,\n      commitTime,\n      interactions\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Profiler, {\n    id: `perf-${name}`,\n    onRender: onRender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })));\n};","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/core/logging/performance.tsx"],"names":["Perfume","isDebugMode","React","logPerf","logEvents","logError","analyticsTracker","opt","metricName","duration","data","options","firstContentfulPaint","firstPaint","firstInputDelay","dataConsumption","largestContentfulPaint","navigationTiming","browserTracker","logPrefix","logging","warning","debugging","perfume","perfStart","name","start","perfEnd","end","perfEndPaint","endPaint","logPerfPeriodically","payload","i","isEmpty","entry","dequeue","push","length","logUrl","fetch","method","body","JSON","stringify","error","withPerformance","Component","props","onRender","id","phase","actualDuration","baseDuration","startTime","commitTime","interactions","type"],"mappings":"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","sourcesContent":["import Perfume, { IAnalyticsTrackerOptions } from 'perfume.js'\nimport { isDebugMode } from 'core/misc/debug'\nimport * as React from 'react'\nimport { ProfilerOnRenderCallback } from 'react'\nimport { logPerf, logEvents, logError } from './logger'\n\nconst analyticsTracker = (opt: IAnalyticsTrackerOptions) => {\n    logPerf(opt.metricName, opt.duration, opt.data)\n}\n\nconst options = {\n    // Metrics\n    firstContentfulPaint: true,\n    firstPaint: true,\n    firstInputDelay: true,\n    dataConsumption: true,\n    largestContentfulPaint: true,\n    navigationTiming: true,\n    // Analytics\n    analyticsTracker,\n    browserTracker: true,\n    // Logging\n    logPrefix: 'Perfume.js:',\n    logging: false,\n    // maxMeasureTime: 18000,\n    // maxDataConsumption: 18000,\n    warning: true,\n    debugging: false,\n}\n\nconst perfume = isDebugMode() ? new Perfume(options) : null\nexport const perfStart = (name: string) => {\n    if (!perfume) {\n        return\n    }\n    perfume.start(name)\n}\n\nexport const perfEnd = (name: string) => {\n    if (!perfume) {\n        return\n    }\n    perfume.end(name)\n}\n\nexport const perfEndPaint = (name: string) => {\n    if (!perfume) {\n        return\n    }\n    perfume.endPaint(name)\n}\n\nexport const logPerfPeriodically = async () => {\n    const payload = []\n    for (let i = 0; i < 50; i++) {\n        if (logEvents.isEmpty()) {\n            break\n        }\n        const entry = logEvents.dequeue()\n\n        payload.push(entry)\n    }\n\n    if (payload.length === 0) {\n        return\n    }\n    const logUrl = 'https://us-central1-keyrier-json.cloudfunctions.net/perflogs'\n\n    try {\n        await fetch(logUrl, { method: 'POST', body: JSON.stringify(payload) })\n    } catch (error) {\n        logError('error sending perf logs', error)\n    }\n}\n\nexport const withPerformance = <P extends object>(Component: React.ComponentType<P>, name: string): React.FC<P> => ({\n    ...props\n}) => {\n    const onRender: ProfilerOnRenderCallback = (\n        id,\n        phase,\n        actualDuration,\n        baseDuration,\n        startTime,\n        commitTime,\n        interactions\n    ) => {\n        logPerf(name, actualDuration, {\n            type: 'component-render',\n            id,\n            phase,\n            actualDuration,\n            baseDuration,\n            startTime,\n            commitTime,\n            interactions,\n        })\n    }\n\n    return (\n        <React.Profiler id={`perf-${name}`} onRender={onRender}>\n            <Component {...(props as P)} />\n        </React.Profiler>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}