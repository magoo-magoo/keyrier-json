{"ast":null,"code":"export const customToString = obj => {\n  if (Array.isArray(obj)) {\n    const array = obj;\n    return array.map(e => customToString(e)).join(',');\n  }\n\n  if (typeof obj === 'object') {\n    return JSON.stringify(obj);\n  }\n\n  if (obj !== null && obj !== undefined) {\n    return obj.toString();\n  }\n\n  return '';\n};\nexport const takeFirst = (str, n) => {\n  if (typeof str !== 'string') {\n    return null;\n  }\n\n  if (str.length <= n) {\n    return str;\n  }\n\n  return `${str.substring(0, n)}...`;\n};\nexport const containsIgnoreCase = (str, part) => {\n  if (!str || !part) {\n    return false;\n  }\n\n  if (str.toLocaleLowerCase().includes(part.toLocaleLowerCase())) {\n    return true;\n  }\n\n  return false;\n};\nconst UNITS = ['B', 'kB', 'MB', 'GB'];\nexport const prettyPrintBytes = value => {\n  if (!Number.isFinite(value)) {\n    throw new TypeError(`Expected a finite number, got ${typeof value}: ${value}`);\n  }\n\n  const isNegative = value < 0;\n  const prefix = isNegative ? '-' : '';\n\n  if (isNegative) {\n    value = -value;\n  }\n\n  if (value < 1) {\n    const numberStr = value.toString();\n    return prefix + numberStr + ' B';\n  }\n\n  const exponent = Math.min(Math.floor(Math.log10(value) / 3), UNITS.length - 1);\n  value = Number((value / Math.pow(1024, exponent)).toPrecision(3));\n  const numberString = value.toString();\n  const unit = UNITS[exponent];\n  return prefix + numberString + ' ' + unit;\n};","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/core/converters/string.ts"],"names":["customToString","obj","Array","isArray","array","map","e","join","JSON","stringify","undefined","toString","takeFirst","str","n","length","substring","containsIgnoreCase","part","toLocaleLowerCase","includes","UNITS","prettyPrintBytes","value","Number","isFinite","TypeError","isNegative","prefix","numberStr","exponent","Math","min","floor","log10","pow","toPrecision","numberString","unit"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,GAAD,IAAyC;AACnE,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AACpB,UAAMG,KAAY,GAAGH,GAArB;AACA,WAAOG,KAAK,CAACC,GAAN,CAAUC,CAAC,IAAIN,cAAc,CAACM,CAAD,CAA7B,EAAkCC,IAAlC,CAAuC,GAAvC,CAAP;AACH;;AACD,MAAI,OAAON,GAAP,KAAe,QAAnB,EAA6B;AACzB,WAAOO,IAAI,CAACC,SAAL,CAAeR,GAAf,CAAP;AACH;;AACD,MAAIA,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKS,SAA5B,EAAuC;AACnC,WAAOT,GAAG,CAACU,QAAJ,EAAP;AACH;;AAED,SAAO,EAAP;AACH,CAbM;AAeP,OAAO,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAiCC,CAAjC,KAA+C;AACpE,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AACzB,WAAO,IAAP;AACH;;AACD,MAAIA,GAAG,CAACE,MAAJ,IAAcD,CAAlB,EAAqB;AACjB,WAAOD,GAAP;AACH;;AACD,SAAQ,GAAEA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBF,CAAjB,CAAoB,KAA9B;AACH,CARM;AAUP,OAAO,MAAMG,kBAAkB,GAAG,CAACJ,GAAD,EAAcK,IAAd,KAA+B;AAC7D,MAAI,CAACL,GAAD,IAAQ,CAACK,IAAb,EAAmB;AACf,WAAO,KAAP;AACH;;AACD,MAAIL,GAAG,CAACM,iBAAJ,GAAwBC,QAAxB,CAAiCF,IAAI,CAACC,iBAAL,EAAjC,CAAJ,EAAgE;AAC5D,WAAO,IAAP;AACH;;AAED,SAAO,KAAP;AACH,CATM;AAWP,MAAME,KAAK,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,IAAlB,CAAd;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,KAAD,IAAmB;AAC/C,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBF,KAAhB,CAAL,EAA6B;AACzB,UAAM,IAAIG,SAAJ,CAAe,iCAAgC,OAAOH,KAAM,KAAIA,KAAM,EAAtE,CAAN;AACH;;AAED,QAAMI,UAAU,GAAGJ,KAAK,GAAG,CAA3B;AACA,QAAMK,MAAM,GAAGD,UAAU,GAAG,GAAH,GAAS,EAAlC;;AACA,MAAIA,UAAJ,EAAgB;AACZJ,IAAAA,KAAK,GAAG,CAACA,KAAT;AACH;;AACD,MAAIA,KAAK,GAAG,CAAZ,EAAe;AACX,UAAMM,SAAS,GAAGN,KAAK,CAACZ,QAAN,EAAlB;AACA,WAAOiB,MAAM,GAAGC,SAAT,GAAqB,IAA5B;AACH;;AACD,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,KAAL,CAAWX,KAAX,IAAoB,CAA/B,CAAT,EAA4CF,KAAK,CAACN,MAAN,GAAe,CAA3D,CAAjB;AACAQ,EAAAA,KAAK,GAAGC,MAAM,CAAC,CAACD,KAAK,GAAGQ,IAAI,CAACI,GAAL,CAAS,IAAT,EAAeL,QAAf,CAAT,EAAmCM,WAAnC,CAA+C,CAA/C,CAAD,CAAd;AACA,QAAMC,YAAY,GAAGd,KAAK,CAACZ,QAAN,EAArB;AACA,QAAM2B,IAAI,GAAGjB,KAAK,CAACS,QAAD,CAAlB;AACA,SAAOF,MAAM,GAAGS,YAAT,GAAwB,GAAxB,GAA8BC,IAArC;AACH,CAnBM","sourcesContent":["export const customToString = (obj: any | null | undefined): string => {\n    if (Array.isArray(obj)) {\n        const array: any[] = obj\n        return array.map(e => customToString(e)).join(',')\n    }\n    if (typeof obj === 'object') {\n        return JSON.stringify(obj)\n    }\n    if (obj !== null && obj !== undefined) {\n        return obj.toString()\n    }\n\n    return ''\n}\n\nexport const takeFirst = (str: string | null | undefined, n: number) => {\n    if (typeof str !== 'string') {\n        return null\n    }\n    if (str.length <= n) {\n        return str\n    }\n    return `${str.substring(0, n)}...`\n}\n\nexport const containsIgnoreCase = (str: string, part: string) => {\n    if (!str || !part) {\n        return false\n    }\n    if (str.toLocaleLowerCase().includes(part.toLocaleLowerCase())) {\n        return true\n    }\n\n    return false\n}\n\nconst UNITS = ['B', 'kB', 'MB', 'GB']\n\nexport const prettyPrintBytes = (value: number) => {\n    if (!Number.isFinite(value)) {\n        throw new TypeError(`Expected a finite number, got ${typeof value}: ${value}`)\n    }\n\n    const isNegative = value < 0\n    const prefix = isNegative ? '-' : ''\n    if (isNegative) {\n        value = -value\n    }\n    if (value < 1) {\n        const numberStr = value.toString()\n        return prefix + numberStr + ' B'\n    }\n    const exponent = Math.min(Math.floor(Math.log10(value) / 3), UNITS.length - 1)\n    value = Number((value / Math.pow(1024, exponent)).toPrecision(3))\n    const numberString = value.toString()\n    const unit = UNITS[exponent]\n    return prefix + numberString + ' ' + unit\n}\n"]},"metadata":{},"sourceType":"module"}