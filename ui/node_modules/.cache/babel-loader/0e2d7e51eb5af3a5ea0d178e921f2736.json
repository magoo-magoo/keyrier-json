{"ast":null,"code":"ace.define(\"ace/mode/c9search_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  function safeCreateRegexp(source, flag) {\n    try {\n      return new RegExp(source, flag);\n    } catch (e) {}\n  }\n\n  var C9SearchHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        tokenNames: [\"c9searchresults.constant.numeric\", \"c9searchresults.text\", \"c9searchresults.text\", \"c9searchresults.keyword\"],\n        regex: /(^\\s+[0-9]+)(:)(\\d*\\s?)([^\\r\\n]+)/,\n        onMatch: function (val, state, stack) {\n          var values = this.splitRegex.exec(val);\n          var types = this.tokenNames;\n          var tokens = [{\n            type: types[0],\n            value: values[1]\n          }, {\n            type: types[1],\n            value: values[2]\n          }];\n\n          if (values[3]) {\n            if (values[3] == \" \") tokens[1] = {\n              type: types[1],\n              value: values[2] + \" \"\n            };else tokens.push({\n              type: types[1],\n              value: values[3]\n            });\n          }\n\n          var regex = stack[1];\n          var str = values[4];\n          var m;\n          var last = 0;\n\n          if (regex && regex.exec) {\n            regex.lastIndex = 0;\n\n            while (m = regex.exec(str)) {\n              var skipped = str.substring(last, m.index);\n              last = regex.lastIndex;\n              if (skipped) tokens.push({\n                type: types[2],\n                value: skipped\n              });\n              if (m[0]) tokens.push({\n                type: types[3],\n                value: m[0]\n              });else if (!skipped) break;\n            }\n          }\n\n          if (last < str.length) tokens.push({\n            type: types[2],\n            value: str.substr(last)\n          });\n          return tokens;\n        }\n      }, {\n        regex: \"^Searching for [^\\\\r\\\\n]*$\",\n        onMatch: function (val, state, stack) {\n          var parts = val.split(\"\\x01\");\n          if (parts.length < 3) return \"text\";\n          var options, search;\n          var i = 0;\n          var tokens = [{\n            value: parts[i++] + \"'\",\n            type: \"text\"\n          }, {\n            value: search = parts[i++],\n            type: \"text\" // \"c9searchresults.keyword\"\n\n          }, {\n            value: \"'\" + parts[i++],\n            type: \"text\"\n          }];\n\n          if (parts[2] !== \" in\") {\n            tokens.push({\n              value: \"'\" + parts[i++] + \"'\",\n              type: \"text\"\n            }, {\n              value: parts[i++],\n              type: \"text\"\n            });\n          }\n\n          tokens.push({\n            value: \" \" + parts[i++] + \" \",\n            type: \"text\"\n          });\n\n          if (parts[i + 1]) {\n            options = parts[i + 1];\n            tokens.push({\n              value: \"(\" + parts[i + 1] + \")\",\n              type: \"text\"\n            });\n            i += 1;\n          } else {\n            i -= 1;\n          }\n\n          while (i++ < parts.length) {\n            parts[i] && tokens.push({\n              value: parts[i],\n              type: \"text\"\n            });\n          }\n\n          if (search) {\n            if (!/regex/.test(options)) search = lang.escapeRegExp(search);\n            if (/whole/.test(options)) search = \"\\\\b\" + search + \"\\\\b\";\n          }\n\n          var regex = search && safeCreateRegexp(\"(\" + search + \")\", / sensitive/.test(options) ? \"g\" : \"ig\");\n\n          if (regex) {\n            stack[0] = state;\n            stack[1] = regex;\n          }\n\n          return tokens;\n        }\n      }, {\n        regex: \"^(?=Found \\\\d+ matches)\",\n        token: \"text\",\n        next: \"numbers\"\n      }, {\n        token: \"string\",\n        // single line\n        regex: \"^\\\\S:?[^:]+\",\n        next: \"numbers\"\n      }],\n      numbers: [{\n        regex: \"\\\\d+\",\n        token: \"constant.numeric\"\n      }, {\n        regex: \"$\",\n        token: \"text\",\n        next: \"start\"\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  oop.inherits(C9SearchHighlightRules, TextHighlightRules);\n  exports.C9SearchHighlightRules = C9SearchHighlightRules;\n});\nace.define(\"ace/mode/matching_brace_outdent\", [\"require\", \"exports\", \"module\", \"ace/range\"], function (require, exports, module) {\n  \"use strict\";\n\n  var Range = require(\"../range\").Range;\n\n  var MatchingBraceOutdent = function () {};\n\n  (function () {\n    this.checkOutdent = function (line, input) {\n      if (!/^\\s+$/.test(line)) return false;\n      return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function (doc, row) {\n      var line = doc.getLine(row);\n      var match = line.match(/^(\\s*\\})/);\n      if (!match) return 0;\n      var column = match[1].length;\n      var openBracePos = doc.findMatchingBracket({\n        row: row,\n        column: column\n      });\n      if (!openBracePos || openBracePos.row == row) return 0;\n      var indent = this.$getIndent(doc.getLine(openBracePos.row));\n      doc.replace(new Range(row, 0, row, column - 1), indent);\n    };\n\n    this.$getIndent = function (line) {\n      return line.match(/^\\s*/)[0];\n    };\n  }).call(MatchingBraceOutdent.prototype);\n  exports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\nace.define(\"ace/mode/folding/c9search\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function () {};\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /^(\\S.*:|Searching for.*)$/;\n    this.foldingStopMarker = /^(\\s+|Found.*)$/;\n\n    this.getFoldWidgetRange = function (session, foldStyle, row) {\n      var lines = session.doc.getAllLines(row);\n      var line = lines[row];\n      var level1 = /^(Found.*|Searching for.*)$/;\n      var level2 = /^(\\S.*:|\\s*)$/;\n      var re = level1.test(line) ? level1 : level2;\n      var startRow = row;\n      var endRow = row;\n\n      if (this.foldingStartMarker.test(line)) {\n        for (var i = row + 1, l = session.getLength(); i < l; i++) {\n          if (re.test(lines[i])) break;\n        }\n\n        endRow = i;\n      } else if (this.foldingStopMarker.test(line)) {\n        for (var i = row - 1; i >= 0; i--) {\n          line = lines[i];\n          if (re.test(line)) break;\n        }\n\n        startRow = i;\n      }\n\n      if (startRow != endRow) {\n        var col = line.length;\n        if (re === level1) col = line.search(/\\(Found[^)]+\\)$|$/);\n        return new Range(startRow, col, endRow, 0);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/c9search\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/c9search_highlight_rules\", \"ace/mode/matching_brace_outdent\", \"ace/mode/folding/c9search\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var C9SearchHighlightRules = require(\"./c9search_highlight_rules\").C9SearchHighlightRules;\n\n  var MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\n\n  var C9StyleFoldMode = require(\"./folding/c9search\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = C9SearchHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new C9StyleFoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.getNextLineIndent = function (state, line, tab) {\n      var indent = this.$getIndent(line);\n      return indent;\n    };\n\n    this.checkOutdent = function (state, line, input) {\n      return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function (state, doc, row) {\n      this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c9search\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/c9search\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-c9search.js"],"names":["ace","define","require","exports","module","oop","lang","TextHighlightRules","safeCreateRegexp","source","flag","RegExp","e","C9SearchHighlightRules","$rules","tokenNames","regex","onMatch","val","state","stack","values","splitRegex","exec","types","tokens","type","value","push","str","m","last","lastIndex","skipped","substring","index","length","substr","parts","split","options","search","i","test","escapeRegExp","token","next","numbers","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","foldingStartMarker","foldingStopMarker","getFoldWidgetRange","session","foldStyle","lines","getAllLines","level1","level2","re","startRow","endRow","l","getLength","col","TextMode","Mode","C9StyleFoldMode","HighlightRules","$outdent","foldingRules","getNextLineIndent","tab","$id"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,mCAAX,EAA+C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,cAA5C,EAA2D,+BAA3D,CAA/C,EAA4I,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/K;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,IAAI,GAAGJ,OAAO,CAAC,aAAD,CAAlB;;AACA,MAAIK,kBAAkB,GAAGL,OAAO,CAAC,wBAAD,CAAP,CAAkCK,kBAA3D;;AAEA,WAASC,gBAAT,CAA0BC,MAA1B,EAAkCC,IAAlC,EAAwC;AACpC,QAAI;AACA,aAAO,IAAIC,MAAJ,CAAWF,MAAX,EAAmBC,IAAnB,CAAP;AACH,KAFD,CAEE,OAAME,CAAN,EAAS,CAAE;AAChB;;AAED,MAAIC,sBAAsB,GAAG,YAAW;AACpC,SAAKC,MAAL,GAAc;AACV,eAAU,CACN;AACIC,QAAAA,UAAU,EAAG,CAAC,kCAAD,EAAqC,sBAArC,EAA6D,sBAA7D,EAAqF,yBAArF,CADjB;AAEIC,QAAAA,KAAK,EAAG,mCAFZ;AAGIC,QAAAA,OAAO,EAAG,UAASC,GAAT,EAAcC,KAAd,EAAqBC,KAArB,EAA4B;AAClC,cAAIC,MAAM,GAAG,KAAKC,UAAL,CAAgBC,IAAhB,CAAqBL,GAArB,CAAb;AACA,cAAIM,KAAK,GAAG,KAAKT,UAAjB;AACA,cAAIU,MAAM,GAAG,CAAC;AACVC,YAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CADD;AAEVG,YAAAA,KAAK,EAAEN,MAAM,CAAC,CAAD;AAFH,WAAD,EAGV;AACCK,YAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CADZ;AAECG,YAAAA,KAAK,EAAEN,MAAM,CAAC,CAAD;AAFd,WAHU,CAAb;;AAQA,cAAIA,MAAM,CAAC,CAAD,CAAV,EAAe;AACX,gBAAIA,MAAM,CAAC,CAAD,CAAN,IAAa,GAAjB,EACII,MAAM,CAAC,CAAD,CAAN,GAAY;AAAEC,cAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAAb;AAAkBG,cAAAA,KAAK,EAAEN,MAAM,CAAC,CAAD,CAAN,GAAY;AAArC,aAAZ,CADJ,KAGII,MAAM,CAACG,IAAP,CAAY;AAAEF,cAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAAb;AAAkBG,cAAAA,KAAK,EAAEN,MAAM,CAAC,CAAD;AAA/B,aAAZ;AACP;;AACD,cAAIL,KAAK,GAAGI,KAAK,CAAC,CAAD,CAAjB;AACA,cAAIS,GAAG,GAAGR,MAAM,CAAC,CAAD,CAAhB;AAEA,cAAIS,CAAJ;AACA,cAAIC,IAAI,GAAG,CAAX;;AACA,cAAIf,KAAK,IAAIA,KAAK,CAACO,IAAnB,EAAyB;AACrBP,YAAAA,KAAK,CAACgB,SAAN,GAAkB,CAAlB;;AACA,mBAAOF,CAAC,GAAGd,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAX,EAA4B;AACxB,kBAAII,OAAO,GAAGJ,GAAG,CAACK,SAAJ,CAAcH,IAAd,EAAoBD,CAAC,CAACK,KAAtB,CAAd;AACAJ,cAAAA,IAAI,GAAGf,KAAK,CAACgB,SAAb;AACA,kBAAIC,OAAJ,EACIR,MAAM,CAACG,IAAP,CAAY;AAACF,gBAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAAZ;AAAiBG,gBAAAA,KAAK,EAAEM;AAAxB,eAAZ;AACJ,kBAAIH,CAAC,CAAC,CAAD,CAAL,EACIL,MAAM,CAACG,IAAP,CAAY;AAACF,gBAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAAZ;AAAiBG,gBAAAA,KAAK,EAAEG,CAAC,CAAC,CAAD;AAAzB,eAAZ,EADJ,KAEK,IAAI,CAACG,OAAL,EACD;AACP;AACJ;;AACD,cAAIF,IAAI,GAAGF,GAAG,CAACO,MAAf,EACIX,MAAM,CAACG,IAAP,CAAY;AAACF,YAAAA,IAAI,EAAEF,KAAK,CAAC,CAAD,CAAZ;AAAiBG,YAAAA,KAAK,EAAEE,GAAG,CAACQ,MAAJ,CAAWN,IAAX;AAAxB,WAAZ;AACJ,iBAAON,MAAP;AACH;AAzCL,OADM,EA4CN;AACIT,QAAAA,KAAK,EAAG,4BADZ;AAEIC,QAAAA,OAAO,EAAE,UAASC,GAAT,EAAcC,KAAd,EAAqBC,KAArB,EAA4B;AACjC,cAAIkB,KAAK,GAAGpB,GAAG,CAACqB,KAAJ,CAAU,MAAV,CAAZ;AACA,cAAID,KAAK,CAACF,MAAN,GAAe,CAAnB,EACI,OAAO,MAAP;AAEJ,cAAII,OAAJ,EAAaC,MAAb;AAEA,cAAIC,CAAC,GAAG,CAAR;AACA,cAAIjB,MAAM,GAAG,CAAC;AACVE,YAAAA,KAAK,EAAEW,KAAK,CAACI,CAAC,EAAF,CAAL,GAAa,GADV;AAEVhB,YAAAA,IAAI,EAAE;AAFI,WAAD,EAGV;AACCC,YAAAA,KAAK,EAAEc,MAAM,GAAGH,KAAK,CAACI,CAAC,EAAF,CADtB;AAEChB,YAAAA,IAAI,EAAE,MAFP,CAEc;;AAFd,WAHU,EAMV;AACCC,YAAAA,KAAK,EAAE,MAAMW,KAAK,CAACI,CAAC,EAAF,CADnB;AAEChB,YAAAA,IAAI,EAAE;AAFP,WANU,CAAb;;AAUA,cAAIY,KAAK,CAAC,CAAD,CAAL,KAAa,KAAjB,EAAwB;AACpBb,YAAAA,MAAM,CAACG,IAAP,CAAY;AACRD,cAAAA,KAAK,EAAE,MAAMW,KAAK,CAACI,CAAC,EAAF,CAAX,GAAmB,GADlB;AAERhB,cAAAA,IAAI,EAAE;AAFE,aAAZ,EAGG;AACCC,cAAAA,KAAK,EAAEW,KAAK,CAACI,CAAC,EAAF,CADb;AAEChB,cAAAA,IAAI,EAAE;AAFP,aAHH;AAOH;;AACDD,UAAAA,MAAM,CAACG,IAAP,CAAY;AACRD,YAAAA,KAAK,EAAE,MAAMW,KAAK,CAACI,CAAC,EAAF,CAAX,GAAmB,GADlB;AAERhB,YAAAA,IAAI,EAAE;AAFE,WAAZ;;AAIA,cAAIY,KAAK,CAACI,CAAC,GAAC,CAAH,CAAT,EAAgB;AACZF,YAAAA,OAAO,GAAGF,KAAK,CAACI,CAAC,GAAC,CAAH,CAAf;AACAjB,YAAAA,MAAM,CAACG,IAAP,CAAY;AACRD,cAAAA,KAAK,EAAE,MAAMW,KAAK,CAACI,CAAC,GAAC,CAAH,CAAX,GAAmB,GADlB;AAERhB,cAAAA,IAAI,EAAE;AAFE,aAAZ;AAIAgB,YAAAA,CAAC,IAAI,CAAL;AACH,WAPD,MAOO;AACHA,YAAAA,CAAC,IAAI,CAAL;AACH;;AACD,iBAAOA,CAAC,KAAKJ,KAAK,CAACF,MAAnB,EAA2B;AACvBE,YAAAA,KAAK,CAACI,CAAD,CAAL,IAAYjB,MAAM,CAACG,IAAP,CAAY;AACpBD,cAAAA,KAAK,EAAEW,KAAK,CAACI,CAAD,CADQ;AAEpBhB,cAAAA,IAAI,EAAE;AAFc,aAAZ,CAAZ;AAIH;;AAED,cAAIe,MAAJ,EAAY;AACR,gBAAI,CAAC,QAAQE,IAAR,CAAaH,OAAb,CAAL,EACIC,MAAM,GAAGnC,IAAI,CAACsC,YAAL,CAAkBH,MAAlB,CAAT;AACJ,gBAAI,QAAQE,IAAR,CAAaH,OAAb,CAAJ,EACIC,MAAM,GAAG,QAAQA,MAAR,GAAiB,KAA1B;AACP;;AAED,cAAIzB,KAAK,GAAGyB,MAAM,IAAIjC,gBAAgB,CAClC,MAAMiC,MAAN,GAAe,GADmB,EAElC,aAAaE,IAAb,CAAkBH,OAAlB,IAA6B,GAA7B,GAAmC,IAFD,CAAtC;;AAIA,cAAIxB,KAAJ,EAAW;AACPI,YAAAA,KAAK,CAAC,CAAD,CAAL,GAAWD,KAAX;AACAC,YAAAA,KAAK,CAAC,CAAD,CAAL,GAAWJ,KAAX;AACH;;AAED,iBAAOS,MAAP;AACH;AAnEL,OA5CM,EAiHN;AACIT,QAAAA,KAAK,EAAG,yBADZ;AAEI6B,QAAAA,KAAK,EAAG,MAFZ;AAGIC,QAAAA,IAAI,EAAG;AAHX,OAjHM,EAsHN;AACID,QAAAA,KAAK,EAAG,QADZ;AACsB;AAClB7B,QAAAA,KAAK,EAAG,aAFZ;AAGI8B,QAAAA,IAAI,EAAG;AAHX,OAtHM,CADA;AA6HVC,MAAAA,OAAO,EAAC,CAAC;AACL/B,QAAAA,KAAK,EAAG,MADH;AAEL6B,QAAAA,KAAK,EAAG;AAFH,OAAD,EAGL;AACC7B,QAAAA,KAAK,EAAG,GADT;AAEC6B,QAAAA,KAAK,EAAG,MAFT;AAGCC,QAAAA,IAAI,EAAG;AAHR,OAHK;AA7HE,KAAd;AAsIA,SAAKE,cAAL;AACH,GAxID;;AA0IA3C,EAAAA,GAAG,CAAC4C,QAAJ,CAAapC,sBAAb,EAAqCN,kBAArC;AAEAJ,EAAAA,OAAO,CAACU,sBAAR,GAAiCA,sBAAjC;AAEC,CA3JD;AA6JAb,GAAG,CAACC,MAAJ,CAAW,iCAAX,EAA6C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,WAA9B,CAA7C,EAAyF,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC5H;;AAEA,MAAI8C,KAAK,GAAGhD,OAAO,CAAC,UAAD,CAAP,CAAoBgD,KAAhC;;AAEA,MAAIC,oBAAoB,GAAG,YAAW,CAAE,CAAxC;;AAEA,GAAC,YAAW;AAER,SAAKC,YAAL,GAAoB,UAASC,IAAT,EAAeC,KAAf,EAAsB;AACtC,UAAI,CAAE,QAAQX,IAAR,CAAaU,IAAb,CAAN,EACI,OAAO,KAAP;AAEJ,aAAO,SAASV,IAAT,CAAcW,KAAd,CAAP;AACH,KALD;;AAOA,SAAKC,WAAL,GAAmB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAClC,UAAIJ,IAAI,GAAGG,GAAG,CAACE,OAAJ,CAAYD,GAAZ,CAAX;AACA,UAAIE,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAW,UAAX,CAAZ;AAEA,UAAI,CAACA,KAAL,EAAY,OAAO,CAAP;AAEZ,UAAIC,MAAM,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASvB,MAAtB;AACA,UAAIyB,YAAY,GAAGL,GAAG,CAACM,mBAAJ,CAAwB;AAACL,QAAAA,GAAG,EAAEA,GAAN;AAAWG,QAAAA,MAAM,EAAEA;AAAnB,OAAxB,CAAnB;AAEA,UAAI,CAACC,YAAD,IAAiBA,YAAY,CAACJ,GAAb,IAAoBA,GAAzC,EAA8C,OAAO,CAAP;AAE9C,UAAIM,MAAM,GAAG,KAAKC,UAAL,CAAgBR,GAAG,CAACE,OAAJ,CAAYG,YAAY,CAACJ,GAAzB,CAAhB,CAAb;AACAD,MAAAA,GAAG,CAACS,OAAJ,CAAY,IAAIf,KAAJ,CAAUO,GAAV,EAAe,CAAf,EAAkBA,GAAlB,EAAuBG,MAAM,GAAC,CAA9B,CAAZ,EAA8CG,MAA9C;AACH,KAbD;;AAeA,SAAKC,UAAL,GAAkB,UAASX,IAAT,EAAe;AAC7B,aAAOA,IAAI,CAACM,KAAL,CAAW,MAAX,EAAmB,CAAnB,CAAP;AACH,KAFD;AAIH,GA5BD,EA4BGO,IA5BH,CA4BQf,oBAAoB,CAACgB,SA5B7B;AA8BAhE,EAAAA,OAAO,CAACgD,oBAAR,GAA+BA,oBAA/B;AACC,CAtCD;AAwCAnD,GAAG,CAACC,MAAJ,CAAW,2BAAX,EAAuC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,WAA5C,EAAwD,4BAAxD,CAAvC,EAA8H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACjK;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AACA,MAAIgD,KAAK,GAAGhD,OAAO,CAAC,aAAD,CAAP,CAAuBgD,KAAnC;;AACA,MAAIkB,YAAY,GAAGlE,OAAO,CAAC,aAAD,CAAP,CAAuBmE,QAA1C;;AAEA,MAAIA,QAAQ,GAAGlE,OAAO,CAACkE,QAAR,GAAmB,YAAW,CAAE,CAA/C;;AACAhE,EAAAA,GAAG,CAAC4C,QAAJ,CAAaoB,QAAb,EAAuBD,YAAvB;AAEA,GAAC,YAAW;AAER,SAAKE,kBAAL,GAA0B,2BAA1B;AACA,SAAKC,iBAAL,GAAyB,iBAAzB;;AAEA,SAAKC,kBAAL,GAA0B,UAASC,OAAT,EAAkBC,SAAlB,EAA6BjB,GAA7B,EAAkC;AACxD,UAAIkB,KAAK,GAAGF,OAAO,CAACjB,GAAR,CAAYoB,WAAZ,CAAwBnB,GAAxB,CAAZ;AACA,UAAIJ,IAAI,GAAGsB,KAAK,CAAClB,GAAD,CAAhB;AACA,UAAIoB,MAAM,GAAG,6BAAb;AACA,UAAIC,MAAM,GAAG,eAAb;AACA,UAAIC,EAAE,GAAGF,MAAM,CAAClC,IAAP,CAAYU,IAAZ,IAAoBwB,MAApB,GAA6BC,MAAtC;AAEA,UAAIE,QAAQ,GAAGvB,GAAf;AACA,UAAIwB,MAAM,GAAGxB,GAAb;;AAEA,UAAI,KAAKa,kBAAL,CAAwB3B,IAAxB,CAA6BU,IAA7B,CAAJ,EAAwC;AACpC,aAAK,IAAIX,CAAC,GAAGe,GAAG,GAAG,CAAd,EAAiByB,CAAC,GAAGT,OAAO,CAACU,SAAR,EAA1B,EAA+CzC,CAAC,GAAGwC,CAAnD,EAAsDxC,CAAC,EAAvD,EAA2D;AACvD,cAAIqC,EAAE,CAACpC,IAAH,CAAQgC,KAAK,CAACjC,CAAD,CAAb,CAAJ,EACI;AACP;;AACDuC,QAAAA,MAAM,GAAGvC,CAAT;AACH,OAND,MAOK,IAAI,KAAK6B,iBAAL,CAAuB5B,IAAvB,CAA4BU,IAA5B,CAAJ,EAAuC;AACxC,aAAK,IAAIX,CAAC,GAAGe,GAAG,GAAG,CAAnB,EAAsBf,CAAC,IAAI,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AAC/BW,UAAAA,IAAI,GAAGsB,KAAK,CAACjC,CAAD,CAAZ;AACA,cAAIqC,EAAE,CAACpC,IAAH,CAAQU,IAAR,CAAJ,EACI;AACP;;AACD2B,QAAAA,QAAQ,GAAGtC,CAAX;AACH;;AACD,UAAIsC,QAAQ,IAAIC,MAAhB,EAAwB;AACpB,YAAIG,GAAG,GAAG/B,IAAI,CAACjB,MAAf;AACA,YAAI2C,EAAE,KAAKF,MAAX,EACIO,GAAG,GAAG/B,IAAI,CAACZ,MAAL,CAAY,mBAAZ,CAAN;AACJ,eAAO,IAAIS,KAAJ,CAAU8B,QAAV,EAAoBI,GAApB,EAAyBH,MAAzB,EAAiC,CAAjC,CAAP;AACH;AACJ,KA/BD;AAiCH,GAtCD,EAsCGf,IAtCH,CAsCQG,QAAQ,CAACF,SAtCjB;AAwCC,CAlDD;AAoDAnE,GAAG,CAACC,MAAJ,CAAW,mBAAX,EAA+B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,eAA5C,EAA4D,mCAA5D,EAAgG,iCAAhG,EAAkI,2BAAlI,CAA/B,EAA+L,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAClO;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAImF,QAAQ,GAAGnF,OAAO,CAAC,QAAD,CAAP,CAAkBoF,IAAjC;;AACA,MAAIzE,sBAAsB,GAAGX,OAAO,CAAC,4BAAD,CAAP,CAAsCW,sBAAnE;;AACA,MAAIsC,oBAAoB,GAAGjD,OAAO,CAAC,0BAAD,CAAP,CAAoCiD,oBAA/D;;AACA,MAAIoC,eAAe,GAAGrF,OAAO,CAAC,oBAAD,CAAP,CAA8BmE,QAApD;;AAEA,MAAIiB,IAAI,GAAG,YAAW;AAClB,SAAKE,cAAL,GAAsB3E,sBAAtB;AACA,SAAK4E,QAAL,GAAgB,IAAItC,oBAAJ,EAAhB;AACA,SAAKuC,YAAL,GAAoB,IAAIH,eAAJ,EAApB;AACH,GAJD;;AAKAlF,EAAAA,GAAG,CAAC4C,QAAJ,CAAaqC,IAAb,EAAmBD,QAAnB;AAEA,GAAC,YAAW;AAER,SAAKM,iBAAL,GAAyB,UAASxE,KAAT,EAAgBkC,IAAhB,EAAsBuC,GAAtB,EAA2B;AAChD,UAAI7B,MAAM,GAAG,KAAKC,UAAL,CAAgBX,IAAhB,CAAb;AACA,aAAOU,MAAP;AACH,KAHD;;AAKA,SAAKX,YAAL,GAAoB,UAASjC,KAAT,EAAgBkC,IAAhB,EAAsBC,KAAtB,EAA6B;AAC7C,aAAO,KAAKmC,QAAL,CAAcrC,YAAd,CAA2BC,IAA3B,EAAiCC,KAAjC,CAAP;AACH,KAFD;;AAIA,SAAKC,WAAL,GAAmB,UAASpC,KAAT,EAAgBqC,GAAhB,EAAqBC,GAArB,EAA0B;AACzC,WAAKgC,QAAL,CAAclC,WAAd,CAA0BC,GAA1B,EAA+BC,GAA/B;AACH,KAFD;;AAIA,SAAKoC,GAAL,GAAW,mBAAX;AACH,GAhBD,EAgBG3B,IAhBH,CAgBQoB,IAAI,CAACnB,SAhBb;AAkBAhE,EAAAA,OAAO,CAACmF,IAAR,GAAeA,IAAf;AAEC,CApCD;;AAoCmB,CAAC,YAAW;AACXtF,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,mBAAD,CAAZ,EAAmC,UAAS4B,CAAT,EAAY;AAC3C,QAAI,OAAO1B,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiB2B,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/mode/c9search_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar lang = require(\"../lib/lang\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nfunction safeCreateRegexp(source, flag) {\n    try {\n        return new RegExp(source, flag);\n    } catch(e) {}\n}\n\nvar C9SearchHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                tokenNames : [\"c9searchresults.constant.numeric\", \"c9searchresults.text\", \"c9searchresults.text\", \"c9searchresults.keyword\"],\n                regex : /(^\\s+[0-9]+)(:)(\\d*\\s?)([^\\r\\n]+)/,\n                onMatch : function(val, state, stack) {\n                    var values = this.splitRegex.exec(val);\n                    var types = this.tokenNames;\n                    var tokens = [{\n                        type: types[0],\n                        value: values[1]\n                    }, {\n                        type: types[1],\n                        value: values[2]\n                    }];\n                    \n                    if (values[3]) {\n                        if (values[3] == \" \")\n                            tokens[1] = { type: types[1], value: values[2] + \" \" };\n                        else\n                            tokens.push({ type: types[1], value: values[3] });\n                    }\n                    var regex = stack[1];\n                    var str = values[4];\n                    \n                    var m;\n                    var last = 0;\n                    if (regex && regex.exec) {\n                        regex.lastIndex = 0;\n                        while (m = regex.exec(str)) {\n                            var skipped = str.substring(last, m.index);\n                            last = regex.lastIndex;\n                            if (skipped)\n                                tokens.push({type: types[2], value: skipped});\n                            if (m[0])\n                                tokens.push({type: types[3], value: m[0]});\n                            else if (!skipped)\n                                break;\n                        }\n                    }\n                    if (last < str.length)\n                        tokens.push({type: types[2], value: str.substr(last)});\n                    return tokens;\n                }\n            },\n            {\n                regex : \"^Searching for [^\\\\r\\\\n]*$\",\n                onMatch: function(val, state, stack) {\n                    var parts = val.split(\"\\x01\");\n                    if (parts.length < 3)\n                        return \"text\";\n\n                    var options, search;\n                    \n                    var i = 0;\n                    var tokens = [{\n                        value: parts[i++] + \"'\",\n                        type: \"text\"\n                    }, {\n                        value: search = parts[i++],\n                        type: \"text\" // \"c9searchresults.keyword\"\n                    }, {\n                        value: \"'\" + parts[i++],\n                        type: \"text\"\n                    }];\n                    if (parts[2] !== \" in\") {\n                        tokens.push({\n                            value: \"'\" + parts[i++] + \"'\",\n                            type: \"text\"\n                        }, {\n                            value: parts[i++],\n                            type: \"text\"\n                        });\n                    }\n                    tokens.push({\n                        value: \" \" + parts[i++] + \" \",\n                        type: \"text\"\n                    });\n                    if (parts[i+1]) {\n                        options = parts[i+1];\n                        tokens.push({\n                            value: \"(\" + parts[i+1] + \")\",\n                            type: \"text\"\n                        });\n                        i += 1;\n                    } else {\n                        i -= 1;\n                    }\n                    while (i++ < parts.length) {\n                        parts[i] && tokens.push({\n                            value: parts[i],\n                            type: \"text\"\n                        });\n                    }\n                    \n                    if (search) {\n                        if (!/regex/.test(options))\n                            search = lang.escapeRegExp(search);\n                        if (/whole/.test(options))\n                            search = \"\\\\b\" + search + \"\\\\b\";\n                    }\n                    \n                    var regex = search && safeCreateRegexp(\n                        \"(\" + search + \")\",\n                        / sensitive/.test(options) ? \"g\" : \"ig\"\n                    );\n                    if (regex) {\n                        stack[0] = state;\n                        stack[1] = regex;\n                    }\n                    \n                    return tokens;\n                }\n            },\n            {\n                regex : \"^(?=Found \\\\d+ matches)\",\n                token : \"text\",\n                next : \"numbers\"\n            },\n            {\n                token : \"string\", // single line\n                regex : \"^\\\\S:?[^:]+\",\n                next : \"numbers\"\n            }\n        ],\n        numbers:[{\n            regex : \"\\\\d+\",\n            token : \"constant.numeric\"\n        }, {\n            regex : \"$\",\n            token : \"text\",\n            next : \"start\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(C9SearchHighlightRules, TextHighlightRules);\n\nexports.C9SearchHighlightRules = C9SearchHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(require, exports, module) {\n\"use strict\";\n\nvar Range = require(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^(\\S.*:|Searching for.*)$/;\n    this.foldingStopMarker = /^(\\s+|Found.*)$/;\n    \n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var lines = session.doc.getAllLines(row);\n        var line = lines[row];\n        var level1 = /^(Found.*|Searching for.*)$/;\n        var level2 = /^(\\S.*:|\\s*)$/;\n        var re = level1.test(line) ? level1 : level2;\n        \n        var startRow = row;\n        var endRow = row;\n\n        if (this.foldingStartMarker.test(line)) {\n            for (var i = row + 1, l = session.getLength(); i < l; i++) {\n                if (re.test(lines[i]))\n                    break;\n            }\n            endRow = i;\n        }\n        else if (this.foldingStopMarker.test(line)) {\n            for (var i = row - 1; i >= 0; i--) {\n                line = lines[i];\n                if (re.test(line))\n                    break;\n            }\n            startRow = i;\n        }\n        if (startRow != endRow) {\n            var col = line.length;\n            if (re === level1)\n                col = line.search(/\\(Found[^)]+\\)$|$/);\n            return new Range(startRow, col, endRow, 0);\n        }\n    };\n    \n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c9search_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/c9search\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar C9SearchHighlightRules = require(\"./c9search_highlight_rules\").C9SearchHighlightRules;\nvar MatchingBraceOutdent = require(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar C9StyleFoldMode = require(\"./folding/c9search\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = C9SearchHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new C9StyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c9search\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});                (function() {\n                    ace.require([\"ace/mode/c9search\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}