{"ast":null,"code":"ace.define(\"ace/ext/beautify\", [\"require\", \"exports\", \"module\", \"ace/token_iterator\"], function (require, exports, module) {\n  \"use strict\";\n\n  var TokenIterator = require(\"../token_iterator\").TokenIterator;\n\n  function is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n  }\n\n  exports.singletonTags = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"html\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\n  exports.blockTags = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"dl\", \"fieldset\", \"footer\", \"form\", \"head\", \"header\", \"html\", \"nav\", \"ol\", \"p\", \"script\", \"section\", \"style\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"ul\"];\n\n  exports.beautify = function (session) {\n    var iterator = new TokenIterator(session, 0, 0);\n    var token = iterator.getCurrentToken();\n    var tabString = session.getTabString();\n    var singletonTags = exports.singletonTags;\n    var blockTags = exports.blockTags;\n    var nextToken;\n    var breakBefore = false;\n    var spaceBefore = false;\n    var spaceAfter = false;\n    var code = \"\";\n    var value = \"\";\n    var tagName = \"\";\n    var depth = 0;\n    var lastDepth = 0;\n    var lastIndent = 0;\n    var indent = 0;\n    var unindent = 0;\n    var roundDepth = 0;\n    var curlyDepth = 0;\n    var row;\n    var curRow = 0;\n    var rowsToAdd = 0;\n    var rowTokens = [];\n    var abort = false;\n    var i;\n    var indentNextLine = false;\n    var inTag = false;\n    var inCSS = false;\n    var inBlock = false;\n    var levels = {\n      0: 0\n    };\n    var parents = [];\n\n    var trimNext = function () {\n      if (nextToken && nextToken.value && nextToken.type !== 'string.regexp') nextToken.value = nextToken.value.replace(/^\\s*/, \"\");\n    };\n\n    var trimLine = function () {\n      code = code.replace(/ +$/, \"\");\n    };\n\n    var trimCode = function () {\n      code = code.trimRight();\n      breakBefore = false;\n    };\n\n    while (token !== null) {\n      curRow = iterator.getCurrentTokenRow();\n      rowTokens = iterator.$rowTokens;\n      nextToken = iterator.stepForward();\n\n      if (typeof token !== \"undefined\") {\n        value = token.value;\n        unindent = 0;\n        inCSS = tagName === \"style\" || session.$modeId === \"ace/mode/css\";\n\n        if (is(token, \"tag-open\")) {\n          inTag = true;\n          if (nextToken) inBlock = blockTags.indexOf(nextToken.value) !== -1;\n\n          if (value === \"</\") {\n            if (inBlock && !breakBefore && rowsToAdd < 1) rowsToAdd++;\n            if (inCSS) rowsToAdd = 1;\n            unindent = 1;\n            inBlock = false;\n          }\n        } else if (is(token, \"tag-close\")) {\n          inTag = false;\n        } else if (is(token, \"comment.start\")) {\n          inBlock = true;\n        } else if (is(token, \"comment.end\")) {\n          inBlock = false;\n        }\n\n        if (!inTag && !rowsToAdd && token.type === \"paren.rparen\" && token.value.substr(0, 1) === \"}\") {\n          rowsToAdd++;\n        }\n\n        if (curRow !== row) {\n          rowsToAdd = curRow;\n          if (row) rowsToAdd -= row;\n        }\n\n        if (rowsToAdd) {\n          trimCode();\n\n          for (; rowsToAdd > 0; rowsToAdd--) code += \"\\n\";\n\n          breakBefore = true;\n          if (!is(token, \"comment\") && !token.type.match(/^(comment|string)$/)) value = value.trimLeft();\n        }\n\n        if (value) {\n          if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|foreach|while|switch)$/)) {\n            parents[depth] = value;\n            trimNext();\n            spaceAfter = true;\n\n            if (value.match(/^(else|elseif)$/)) {\n              if (code.match(/\\}[\\s]*$/)) {\n                trimCode();\n                spaceBefore = true;\n              }\n            }\n          } else if (token.type === \"paren.lparen\") {\n            trimNext();\n\n            if (value.substr(-1) === \"{\") {\n              spaceAfter = true;\n              indentNextLine = false;\n              if (!inTag) rowsToAdd = 1;\n            }\n\n            if (value.substr(0, 1) === \"{\") {\n              spaceBefore = true;\n\n              if (code.substr(-1) !== '[' && code.trimRight().substr(-1) === '[') {\n                trimCode();\n                spaceBefore = false;\n              } else if (code.trimRight().substr(-1) === ')') {\n                trimCode();\n              } else {\n                trimLine();\n              }\n            }\n          } else if (token.type === \"paren.rparen\") {\n            unindent = 1;\n\n            if (value.substr(0, 1) === \"}\") {\n              if (parents[depth - 1] === 'case') unindent++;\n\n              if (code.trimRight().substr(-1) === '{') {\n                trimCode();\n              } else {\n                spaceBefore = true;\n                if (inCSS) rowsToAdd += 2;\n              }\n            }\n\n            if (value.substr(0, 1) === \"]\") {\n              if (code.substr(-1) !== '}' && code.trimRight().substr(-1) === '}') {\n                spaceBefore = false;\n                indent++;\n                trimCode();\n              }\n            }\n\n            if (value.substr(0, 1) === \")\") {\n              if (code.substr(-1) !== '(' && code.trimRight().substr(-1) === '(') {\n                spaceBefore = false;\n                indent++;\n                trimCode();\n              }\n            }\n\n            trimLine();\n          } else if ((token.type === \"keyword.operator\" || token.type === \"keyword\") && value.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)) {\n            trimCode();\n            trimNext();\n            spaceBefore = true;\n            spaceAfter = true;\n          } else if (token.type === \"punctuation.operator\" && value === ';') {\n            trimCode();\n            trimNext();\n            spaceAfter = true;\n            if (inCSS) rowsToAdd++;\n          } else if (token.type === \"punctuation.operator\" && value.match(/^(:|,)$/)) {\n            trimCode();\n            trimNext();\n\n            if (value.match(/^(,)$/) && curlyDepth > 0 && roundDepth === 0) {\n              rowsToAdd++;\n            } else {\n              spaceAfter = true;\n              breakBefore = false;\n            }\n          } else if (token.type === \"support.php_tag\" && value === \"?>\" && !breakBefore) {\n            trimCode();\n            spaceBefore = true;\n          } else if (is(token, \"attribute-name\") && code.substr(-1).match(/^\\s$/)) {\n            spaceBefore = true;\n          } else if (is(token, \"attribute-equals\")) {\n            trimLine();\n            trimNext();\n          } else if (is(token, \"tag-close\")) {\n            trimLine();\n            if (value === \"/>\") spaceBefore = true;\n          }\n\n          if (breakBefore && !(token.type.match(/^(comment)$/) && !value.substr(0, 1).match(/^[/#]$/)) && !(token.type.match(/^(string)$/) && !value.substr(0, 1).match(/^['\"]$/))) {\n            indent = lastIndent;\n\n            if (depth > lastDepth) {\n              indent++;\n\n              for (i = depth; i > lastDepth; i--) levels[i] = indent;\n            } else if (depth < lastDepth) indent = levels[depth];\n\n            lastDepth = depth;\n            lastIndent = indent;\n            if (unindent) indent -= unindent;\n\n            if (indentNextLine && !roundDepth) {\n              indent++;\n              indentNextLine = false;\n            }\n\n            for (i = 0; i < indent; i++) code += tabString;\n          }\n\n          if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n            parents[depth] = value;\n            depth++;\n          }\n\n          if (token.type === \"keyword\" && value.match(/^(break)$/)) {\n            if (parents[depth - 1] && parents[depth - 1].match(/^(case|default)$/)) {\n              depth--;\n            }\n          }\n\n          if (token.type === \"paren.lparen\") {\n            roundDepth += (value.match(/\\(/g) || []).length;\n            curlyDepth += (value.match(/\\{/g) || []).length;\n            depth += value.length;\n          }\n\n          if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|while)$/)) {\n            indentNextLine = true;\n            roundDepth = 0;\n          } else if (!roundDepth && value.trim() && token.type !== \"comment\") indentNextLine = false;\n\n          if (token.type === \"paren.rparen\") {\n            roundDepth -= (value.match(/\\)/g) || []).length;\n            curlyDepth -= (value.match(/\\}/g) || []).length;\n\n            for (i = 0; i < value.length; i++) {\n              depth--;\n\n              if (value.substr(i, 1) === '}' && parents[depth] === 'case') {\n                depth--;\n              }\n            }\n          }\n\n          if (token.type == \"text\") value = value.replace(/\\s+$/, \" \");\n\n          if (spaceBefore && !breakBefore) {\n            trimLine();\n            if (code.substr(-1) !== \"\\n\") code += \" \";\n          }\n\n          code += value;\n          if (spaceAfter) code += \" \";\n          breakBefore = false;\n          spaceBefore = false;\n          spaceAfter = false;\n\n          if (is(token, \"tag-close\") && (inBlock || blockTags.indexOf(tagName) !== -1) || is(token, \"doctype\") && value === \">\") {\n            if (inBlock && nextToken && nextToken.value === \"</\") rowsToAdd = -1;else rowsToAdd = 1;\n          }\n\n          if (is(token, \"tag-open\") && value === \"</\") {\n            depth--;\n          } else if (is(token, \"tag-open\") && value === \"<\" && singletonTags.indexOf(nextToken.value) === -1) {\n            depth++;\n          } else if (is(token, \"tag-name\")) {\n            tagName = value;\n          } else if (is(token, \"tag-close\") && value === \"/>\" && singletonTags.indexOf(tagName) === -1) {\n            depth--;\n          }\n\n          row = curRow;\n        }\n      }\n\n      token = nextToken;\n    }\n\n    code = code.trim();\n    session.doc.setValue(code);\n  };\n\n  exports.commands = [{\n    name: \"beautify\",\n    description: \"Format selection (Beautify)\",\n    exec: function (editor) {\n      exports.beautify(editor.session);\n    },\n    bindKey: \"Ctrl-Shift-B\"\n  }];\n});\n\n(function () {\n  ace.require([\"ace/ext/beautify\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/ext-beautify.js"],"names":["ace","define","require","exports","module","TokenIterator","is","token","type","lastIndexOf","singletonTags","blockTags","beautify","session","iterator","getCurrentToken","tabString","getTabString","nextToken","breakBefore","spaceBefore","spaceAfter","code","value","tagName","depth","lastDepth","lastIndent","indent","unindent","roundDepth","curlyDepth","row","curRow","rowsToAdd","rowTokens","abort","i","indentNextLine","inTag","inCSS","inBlock","levels","parents","trimNext","replace","trimLine","trimCode","trimRight","getCurrentTokenRow","$rowTokens","stepForward","$modeId","indexOf","substr","match","trimLeft","length","trim","doc","setValue","commands","name","description","exec","editor","bindKey","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/ext/beautify\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\"], function(require, exports, module) {\n\"use strict\";\nvar TokenIterator = require(\"../token_iterator\").TokenIterator;\n\nfunction is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n}\nexports.singletonTags = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"html\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\", \"source\", \"track\", \"wbr\"];\nexports.blockTags = [\"article\", \"aside\", \"blockquote\", \"body\", \"div\", \"dl\", \"fieldset\", \"footer\", \"form\", \"head\", \"header\", \"html\", \"nav\", \"ol\", \"p\", \"script\", \"section\", \"style\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"ul\"];\n\nexports.beautify = function(session) {\n    var iterator = new TokenIterator(session, 0, 0);\n    var token = iterator.getCurrentToken();\n    var tabString = session.getTabString();\n    var singletonTags = exports.singletonTags;\n    var blockTags = exports.blockTags;\n    var nextToken;\n    var breakBefore = false;\n    var spaceBefore = false;\n    var spaceAfter = false;\n    var code = \"\";\n    var value = \"\";\n    var tagName = \"\";\n    var depth = 0;\n    var lastDepth = 0;\n    var lastIndent = 0;\n    var indent = 0;\n    var unindent = 0;\n    var roundDepth = 0;\n    var curlyDepth = 0;\n    var row;\n    var curRow = 0;\n    var rowsToAdd = 0;\n    var rowTokens = [];\n    var abort = false;\n    var i;\n    var indentNextLine = false;\n    var inTag = false;\n    var inCSS = false;\n    var inBlock = false;\n    var levels = {0: 0};\n    var parents = [];\n\n    var trimNext = function() {\n        if (nextToken && nextToken.value && nextToken.type !== 'string.regexp')\n            nextToken.value = nextToken.value.replace(/^\\s*/, \"\");\n    };\n    \n    var trimLine = function() {\n        code = code.replace(/ +$/, \"\");\n    };\n\n    var trimCode = function() {\n        code = code.trimRight();\n        breakBefore = false;\n    };\n\n    while (token !== null) {\n        curRow = iterator.getCurrentTokenRow();\n        rowTokens = iterator.$rowTokens;\n        nextToken = iterator.stepForward();\n\n        if (typeof token !== \"undefined\") {\n            value = token.value;\n            unindent = 0;\n            inCSS = (tagName === \"style\" || session.$modeId === \"ace/mode/css\");\n            if (is(token, \"tag-open\")) {\n                inTag = true;\n                if (nextToken)\n                    inBlock = (blockTags.indexOf(nextToken.value) !== -1);\n                if (value === \"</\") {\n                    if (inBlock && !breakBefore && rowsToAdd < 1)\n                        rowsToAdd++;\n\n                    if (inCSS)\n                        rowsToAdd = 1;\n\n                    unindent = 1;\n                    inBlock = false;\n                }\n            } else if (is(token, \"tag-close\")) {\n                inTag = false;\n            } else if (is(token, \"comment.start\")) {\n                inBlock = true;\n            } else if (is(token, \"comment.end\")) {\n                inBlock = false;\n            }\n            if (!inTag && !rowsToAdd && token.type === \"paren.rparen\" && token.value.substr(0, 1) === \"}\") {\n                rowsToAdd++;\n            }\n            if (curRow !== row) {\n                rowsToAdd = curRow;\n\n                if (row)\n                    rowsToAdd -= row;\n            }\n\n            if (rowsToAdd) {\n                trimCode();\n                for (; rowsToAdd > 0; rowsToAdd--)\n                    code += \"\\n\";\n\n                breakBefore = true;\n                if (!is(token, \"comment\") && !token.type.match(/^(comment|string)$/))\n                   value = value.trimLeft();\n            }\n\n            if (value) {\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|foreach|while|switch)$/)) {\n                    parents[depth] = value;\n\n                    trimNext();\n                    spaceAfter = true;\n                    if (value.match(/^(else|elseif)$/)) {\n                        if (code.match(/\\}[\\s]*$/)) {\n                            trimCode();\n                            spaceBefore = true;\n                        }\n                    }\n                } else if (token.type === \"paren.lparen\") {\n                    trimNext();\n                    if (value.substr(-1) === \"{\") {\n                        spaceAfter = true;\n                        indentNextLine = false;\n\n                        if(!inTag)\n                            rowsToAdd = 1;\n                    }\n                    if (value.substr(0, 1) === \"{\") {\n                        spaceBefore = true;\n                        if (code.substr(-1) !== '[' && code.trimRight().substr(-1) === '[') {\n                            trimCode();\n                            spaceBefore = false;\n                        } else if (code.trimRight().substr(-1) === ')') {\n                            trimCode();\n                        } else {\n                            trimLine();\n                        }\n                    }\n                } else if (token.type === \"paren.rparen\") {\n                    unindent = 1;\n                    if (value.substr(0, 1) === \"}\") {\n                        if (parents[depth-1] === 'case')\n                            unindent++;\n\n                        if (code.trimRight().substr(-1) === '{') {\n                            trimCode();\n                        } else {\n                            spaceBefore = true;\n\n                            if (inCSS)\n                                rowsToAdd+=2;\n                        }\n                    }\n                    if (value.substr(0, 1) === \"]\") {\n                        if (code.substr(-1) !== '}' && code.trimRight().substr(-1) === '}') {\n                            spaceBefore = false;\n                            indent++;\n                            trimCode();\n                        }\n                    }\n                    if (value.substr(0, 1) === \")\") {\n                        if (code.substr(-1) !== '(' && code.trimRight().substr(-1) === '(') {\n                            spaceBefore = false;\n                            indent++;\n                            trimCode();\n                        }\n                    }\n\n                    trimLine();\n                } else if ((token.type === \"keyword.operator\" || token.type === \"keyword\") && value.match(/^(=|==|===|!=|!==|&&|\\|\\||and|or|xor|\\+=|.=|>|>=|<|<=|=>)$/)) {\n                    trimCode();\n                    trimNext();\n                    spaceBefore = true;\n                    spaceAfter = true;\n                } else if (token.type === \"punctuation.operator\" && value === ';') {\n                    trimCode();\n                    trimNext();\n                    spaceAfter = true;\n\n                    if (inCSS)\n                        rowsToAdd++;\n                } else if (token.type === \"punctuation.operator\" && value.match(/^(:|,)$/)) {\n                    trimCode();\n                    trimNext();\n                    if (value.match(/^(,)$/) && curlyDepth>0 && roundDepth===0) {\n                        rowsToAdd++;\n                    } else {\n                        spaceAfter = true;\n                        breakBefore = false;\n                    }\n                } else if (token.type === \"support.php_tag\" && value === \"?>\" && !breakBefore) {\n                    trimCode();\n                    spaceBefore = true;\n                } else if (is(token, \"attribute-name\") && code.substr(-1).match(/^\\s$/)) {\n                    spaceBefore = true;\n                } else if (is(token, \"attribute-equals\")) {\n                    trimLine();\n                    trimNext();\n                } else if (is(token, \"tag-close\")) {\n                    trimLine();\n                    if(value === \"/>\")\n                        spaceBefore = true;\n                }\n                if (breakBefore && !(token.type.match(/^(comment)$/) && !value.substr(0, 1).match(/^[/#]$/)) && !(token.type.match(/^(string)$/) && !value.substr(0, 1).match(/^['\"]$/))) {\n\n                    indent = lastIndent;\n\n                    if(depth > lastDepth) {\n                        indent++;\n\n                        for (i=depth; i > lastDepth; i--)\n                            levels[i] = indent;\n                    } else if(depth < lastDepth)\n                        indent = levels[depth];\n\n                    lastDepth = depth;\n                    lastIndent = indent;\n\n                    if(unindent)\n                        indent -= unindent;\n\n                    if (indentNextLine && !roundDepth) {\n                        indent++;\n                        indentNextLine = false;\n                    }\n\n                    for (i = 0; i < indent; i++)\n                        code += tabString;\n                }\n\n\n                if (token.type === \"keyword\" && value.match(/^(case|default)$/)) {\n                    parents[depth] = value;\n                    depth++;\n                }\n\n\n                if (token.type === \"keyword\" && value.match(/^(break)$/)) {\n                    if(parents[depth-1] && parents[depth-1].match(/^(case|default)$/)) {\n                        depth--;\n                    }\n                }\n                if (token.type === \"paren.lparen\") {\n                    roundDepth += (value.match(/\\(/g) || []).length;\n                    curlyDepth += (value.match(/\\{/g) || []).length;\n                    depth += value.length;\n                }\n\n                if (token.type === \"keyword\" && value.match(/^(if|else|elseif|for|while)$/)) {\n                    indentNextLine = true;\n                    roundDepth = 0;\n                } else if (!roundDepth && value.trim() && token.type !== \"comment\")\n                    indentNextLine = false;\n\n                if (token.type === \"paren.rparen\") {\n                    roundDepth -= (value.match(/\\)/g) || []).length;\n                    curlyDepth -= (value.match(/\\}/g) || []).length;\n\n                    for (i = 0; i < value.length; i++) {\n                        depth--;\n                        if(value.substr(i, 1)==='}' && parents[depth]==='case') {\n                            depth--;\n                        }\n                    }\n                }\n                \n                if (token.type == \"text\")\n                    value = value.replace(/\\s+$/, \" \");\n                if (spaceBefore && !breakBefore) {\n                    trimLine();\n                    if (code.substr(-1) !== \"\\n\")\n                        code += \" \";\n                }\n\n                code += value;\n\n                if (spaceAfter)\n                    code += \" \";\n\n                breakBefore = false;\n                spaceBefore = false;\n                spaceAfter = false;\n                if ((is(token, \"tag-close\") && (inBlock || blockTags.indexOf(tagName) !== -1)) || (is(token, \"doctype\") && value === \">\")) {\n                    if (inBlock && nextToken && nextToken.value === \"</\")\n                        rowsToAdd = -1;\n                    else\n                        rowsToAdd = 1;\n                }\n                if (is(token, \"tag-open\") && value === \"</\") {\n                    depth--;\n                } else if (is(token, \"tag-open\") && value === \"<\" && singletonTags.indexOf(nextToken.value) === -1) {\n                    depth++;\n                } else if (is(token, \"tag-name\")) {\n                    tagName = value;\n                } else if (is(token, \"tag-close\") && value === \"/>\" && singletonTags.indexOf(tagName) === -1){\n                    depth--;\n                }\n\n                row = curRow;\n            }\n        }\n\n        token = nextToken;\n    }\n\n    code = code.trim();\n    session.doc.setValue(code);\n};\n\nexports.commands = [{\n    name: \"beautify\",\n    description: \"Format selection (Beautify)\",\n    exec: function(editor) {\n        exports.beautify(editor.session);\n    },\n    bindKey: \"Ctrl-Shift-B\"\n}];\n\n});                (function() {\n                    ace.require([\"ace/ext/beautify\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}