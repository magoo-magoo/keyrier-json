{"ast":null,"code":"ace.define(\"ace/snippets/erlang\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"# module and export all\\n\\\nsnippet mod\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\t\\n\\\n\t-compile([export_all]).\\n\\\n\t\\n\\\n\tstart() ->\\n\\\n\t    ${2}\\n\\\n\t\\n\\\n\tstop() ->\\n\\\n\t    ok.\\n\\\n# define directive\\n\\\nsnippet def\\n\\\n\t-define(${1:macro}, ${2:body}).${3}\\n\\\n# export directive\\n\\\nsnippet exp\\n\\\n\t-export([${1:function}/${2:arity}]).\\n\\\n# include directive\\n\\\nsnippet inc\\n\\\n\t-include(\\\"${1:file}\\\").${2}\\n\\\n# behavior directive\\n\\\nsnippet beh\\n\\\n\t-behaviour(${1:behaviour}).${2}\\n\\\n# if expression\\n\\\nsnippet if\\n\\\n\tif\\n\\\n\t    ${1:guard} ->\\n\\\n\t        ${2:body}\\n\\\n\tend\\n\\\n# case expression\\n\\\nsnippet case\\n\\\n\tcase ${1:expression} of\\n\\\n\t    ${2:pattern} ->\\n\\\n\t        ${3:body};\\n\\\n\tend\\n\\\n# anonymous function\\n\\\nsnippet fun\\n\\\n\tfun (${1:Parameters}) -> ${2:body} end${3}\\n\\\n# try...catch\\n\\\nsnippet try\\n\\\n\ttry\\n\\\n\t    ${1}\\n\\\n\tcatch\\n\\\n\t    ${2:_:_} -> ${3:got_some_exception}\\n\\\n\tend\\n\\\n# record directive\\n\\\nsnippet rec\\n\\\n\t-record(${1:record}, {\\n\\\n\t    ${2:field}=${3:value}}).${4}\\n\\\n# todo comment\\n\\\nsnippet todo\\n\\\n\t%% TODO: ${1}\\n\\\n## Snippets below (starting with '%') are in EDoc format.\\n\\\n## See http://www.erlang.org/doc/apps/edoc/chapter.html#id56887 for more details\\n\\\n# doc comment\\n\\\nsnippet %d\\n\\\n\t%% @doc ${1}\\n\\\n# end of doc comment\\n\\\nsnippet %e\\n\\\n\t%% @end\\n\\\n# specification comment\\n\\\nsnippet %s\\n\\\n\t%% @spec ${1}\\n\\\n# private function marker\\n\\\nsnippet %p\\n\\\n\t%% @private\\n\\\n# OTP application\\n\\\nsnippet application\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\\n\\\n\t-behaviour(application).\\n\\\n\\n\\\n\t-export([start/2, stop/1]).\\n\\\n\\n\\\n\tstart(_Type, _StartArgs) ->\\n\\\n\t    case ${2:root_supervisor}:start_link() of\\n\\\n\t        {ok, Pid} ->\\n\\\n\t            {ok, Pid};\\n\\\n\t        Other ->\\n\\\n\t\t          {error, Other}\\n\\\n\t    end.\\n\\\n\\n\\\n\tstop(_State) ->\\n\\\n\t    ok.\t\\n\\\n# OTP supervisor\\n\\\nsnippet supervisor\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\\n\\\n\t-behaviour(supervisor).\\n\\\n\\n\\\n\t%% API\\n\\\n\t-export([start_link/0]).\\n\\\n\\n\\\n\t%% Supervisor callbacks\\n\\\n\t-export([init/1]).\\n\\\n\\n\\\n\t-define(SERVER, ?MODULE).\\n\\\n\\n\\\n\tstart_link() ->\\n\\\n\t    supervisor:start_link({local, ?SERVER}, ?MODULE, []).\\n\\\n\\n\\\n\tinit([]) ->\\n\\\n\t    Server = {${2:my_server}, {$2, start_link, []},\\n\\\n\t      permanent, 2000, worker, [$2]},\\n\\\n\t    Children = [Server],\\n\\\n\t    RestartStrategy = {one_for_one, 0, 1},\\n\\\n\t    {ok, {RestartStrategy, Children}}.\\n\\\n# OTP gen_server\\n\\\nsnippet gen_server\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\\n\\\n\t-behaviour(gen_server).\\n\\\n\\n\\\n\t%% API\\n\\\n\t-export([\\n\\\n\t         start_link/0\\n\\\n\t        ]).\\n\\\n\\n\\\n\t%% gen_server callbacks\\n\\\n\t-export([init/1, handle_call/3, handle_cast/2, handle_info/2,\\n\\\n\t         terminate/2, code_change/3]).\\n\\\n\\n\\\n\t-define(SERVER, ?MODULE).\\n\\\n\\n\\\n\t-record(state, {}).\\n\\\n\\n\\\n\t%%%===================================================================\\n\\\n\t%%% API\\n\\\n\t%%%===================================================================\\n\\\n\\n\\\n\tstart_link() ->\\n\\\n\t    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).\\n\\\n\\n\\\n\t%%%===================================================================\\n\\\n\t%%% gen_server callbacks\\n\\\n\t%%%===================================================================\\n\\\n\\n\\\n\tinit([]) ->\\n\\\n\t    {ok, #state{}}.\\n\\\n\\n\\\n\thandle_call(_Request, _From, State) ->\\n\\\n\t    Reply = ok,\\n\\\n\t    {reply, Reply, State}.\\n\\\n\\n\\\n\thandle_cast(_Msg, State) ->\\n\\\n\t    {noreply, State}.\\n\\\n\\n\\\n\thandle_info(_Info, State) ->\\n\\\n\t    {noreply, State}.\\n\\\n\\n\\\n\tterminate(_Reason, _State) ->\\n\\\n\t    ok.\\n\\\n\\n\\\n\tcode_change(_OldVsn, State, _Extra) ->\\n\\\n\t    {ok, State}.\\n\\\n\\n\\\n\t%%%===================================================================\\n\\\n\t%%% Internal functions\\n\\\n\t%%%===================================================================\\n\\\n\\n\\\n\";\n  exports.scope = \"erlang\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/erlang\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/snippets/erlang.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,qBAAX,EAAiC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAjC,EAAiE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACpG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AAiKAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,QAAhB;AAEC,CAtKD;;AAsKmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,qBAAD,CAAZ,EAAqC,UAASK,CAAT,EAAY;AAC7C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/erlang\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n\"use strict\";\n\nexports.snippetText = \"# module and export all\\n\\\nsnippet mod\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\t\\n\\\n\t-compile([export_all]).\\n\\\n\t\\n\\\n\tstart() ->\\n\\\n\t    ${2}\\n\\\n\t\\n\\\n\tstop() ->\\n\\\n\t    ok.\\n\\\n# define directive\\n\\\nsnippet def\\n\\\n\t-define(${1:macro}, ${2:body}).${3}\\n\\\n# export directive\\n\\\nsnippet exp\\n\\\n\t-export([${1:function}/${2:arity}]).\\n\\\n# include directive\\n\\\nsnippet inc\\n\\\n\t-include(\\\"${1:file}\\\").${2}\\n\\\n# behavior directive\\n\\\nsnippet beh\\n\\\n\t-behaviour(${1:behaviour}).${2}\\n\\\n# if expression\\n\\\nsnippet if\\n\\\n\tif\\n\\\n\t    ${1:guard} ->\\n\\\n\t        ${2:body}\\n\\\n\tend\\n\\\n# case expression\\n\\\nsnippet case\\n\\\n\tcase ${1:expression} of\\n\\\n\t    ${2:pattern} ->\\n\\\n\t        ${3:body};\\n\\\n\tend\\n\\\n# anonymous function\\n\\\nsnippet fun\\n\\\n\tfun (${1:Parameters}) -> ${2:body} end${3}\\n\\\n# try...catch\\n\\\nsnippet try\\n\\\n\ttry\\n\\\n\t    ${1}\\n\\\n\tcatch\\n\\\n\t    ${2:_:_} -> ${3:got_some_exception}\\n\\\n\tend\\n\\\n# record directive\\n\\\nsnippet rec\\n\\\n\t-record(${1:record}, {\\n\\\n\t    ${2:field}=${3:value}}).${4}\\n\\\n# todo comment\\n\\\nsnippet todo\\n\\\n\t%% TODO: ${1}\\n\\\n## Snippets below (starting with '%') are in EDoc format.\\n\\\n## See http://www.erlang.org/doc/apps/edoc/chapter.html#id56887 for more details\\n\\\n# doc comment\\n\\\nsnippet %d\\n\\\n\t%% @doc ${1}\\n\\\n# end of doc comment\\n\\\nsnippet %e\\n\\\n\t%% @end\\n\\\n# specification comment\\n\\\nsnippet %s\\n\\\n\t%% @spec ${1}\\n\\\n# private function marker\\n\\\nsnippet %p\\n\\\n\t%% @private\\n\\\n# OTP application\\n\\\nsnippet application\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\\n\\\n\t-behaviour(application).\\n\\\n\\n\\\n\t-export([start/2, stop/1]).\\n\\\n\\n\\\n\tstart(_Type, _StartArgs) ->\\n\\\n\t    case ${2:root_supervisor}:start_link() of\\n\\\n\t        {ok, Pid} ->\\n\\\n\t            {ok, Pid};\\n\\\n\t        Other ->\\n\\\n\t\t          {error, Other}\\n\\\n\t    end.\\n\\\n\\n\\\n\tstop(_State) ->\\n\\\n\t    ok.\t\\n\\\n# OTP supervisor\\n\\\nsnippet supervisor\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\\n\\\n\t-behaviour(supervisor).\\n\\\n\\n\\\n\t%% API\\n\\\n\t-export([start_link/0]).\\n\\\n\\n\\\n\t%% Supervisor callbacks\\n\\\n\t-export([init/1]).\\n\\\n\\n\\\n\t-define(SERVER, ?MODULE).\\n\\\n\\n\\\n\tstart_link() ->\\n\\\n\t    supervisor:start_link({local, ?SERVER}, ?MODULE, []).\\n\\\n\\n\\\n\tinit([]) ->\\n\\\n\t    Server = {${2:my_server}, {$2, start_link, []},\\n\\\n\t      permanent, 2000, worker, [$2]},\\n\\\n\t    Children = [Server],\\n\\\n\t    RestartStrategy = {one_for_one, 0, 1},\\n\\\n\t    {ok, {RestartStrategy, Children}}.\\n\\\n# OTP gen_server\\n\\\nsnippet gen_server\\n\\\n\t-module(${1:`Filename('', 'my')`}).\\n\\\n\\n\\\n\t-behaviour(gen_server).\\n\\\n\\n\\\n\t%% API\\n\\\n\t-export([\\n\\\n\t         start_link/0\\n\\\n\t        ]).\\n\\\n\\n\\\n\t%% gen_server callbacks\\n\\\n\t-export([init/1, handle_call/3, handle_cast/2, handle_info/2,\\n\\\n\t         terminate/2, code_change/3]).\\n\\\n\\n\\\n\t-define(SERVER, ?MODULE).\\n\\\n\\n\\\n\t-record(state, {}).\\n\\\n\\n\\\n\t%%%===================================================================\\n\\\n\t%%% API\\n\\\n\t%%%===================================================================\\n\\\n\\n\\\n\tstart_link() ->\\n\\\n\t    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).\\n\\\n\\n\\\n\t%%%===================================================================\\n\\\n\t%%% gen_server callbacks\\n\\\n\t%%%===================================================================\\n\\\n\\n\\\n\tinit([]) ->\\n\\\n\t    {ok, #state{}}.\\n\\\n\\n\\\n\thandle_call(_Request, _From, State) ->\\n\\\n\t    Reply = ok,\\n\\\n\t    {reply, Reply, State}.\\n\\\n\\n\\\n\thandle_cast(_Msg, State) ->\\n\\\n\t    {noreply, State}.\\n\\\n\\n\\\n\thandle_info(_Info, State) ->\\n\\\n\t    {noreply, State}.\\n\\\n\\n\\\n\tterminate(_Reason, _State) ->\\n\\\n\t    ok.\\n\\\n\\n\\\n\tcode_change(_OldVsn, State, _Extra) ->\\n\\\n\t    {ok, State}.\\n\\\n\\n\\\n\t%%%===================================================================\\n\\\n\t%%% Internal functions\\n\\\n\t%%%===================================================================\\n\\\n\\n\\\n\";\nexports.scope = \"erlang\";\n\n});                (function() {\n                    ace.require([\"ace/snippets/erlang\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}