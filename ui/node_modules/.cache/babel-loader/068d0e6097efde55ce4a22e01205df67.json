{"ast":null,"code":"import { cloneArr, cloneObj, every, flatten, has, isArray, isEmpty, isObject, reduce, uniq, values } from \"../../../utils/utils\";\nimport { AT_LEAST_ONE_IDX, AT_LEAST_ONE_SEP_IDX, BITS_FOR_METHOD_TYPE, BITS_FOR_OCCURRENCE_IDX, MANY_IDX, MANY_SEP_IDX, OPTION_IDX, OR_IDX } from \"../../grammar/keys\";\nimport { isRecognitionException, MismatchedTokenException, NotAllInputParsedException } from \"../../exceptions_public\";\nimport { PROD_TYPE } from \"../../grammar/lookahead\";\nimport { NextTerminalAfterAtLeastOneSepWalker, NextTerminalAfterAtLeastOneWalker, NextTerminalAfterManySepWalker, NextTerminalAfterManyWalker } from \"../../grammar/interpreter\";\nimport { DEFAULT_RULE_CONFIG } from \"../parser\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable\";\nimport { EOF } from \"../../../scan/tokens_public\";\nimport { augmentTokenTypes, isTokenType, tokenStructuredMatcher, tokenStructuredMatcherNoCategories } from \"../../../scan/tokens\";\nimport { classNameFromInstance } from \"../../../lang/lang_extensions\";\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\n\nvar RecognizerEngine =\n/** @class */\nfunction () {\n  function RecognizerEngine() {}\n\n  RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n    this.className = classNameFromInstance(this); // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" + \"\\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" + \"\\tFor Further details.\");\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary)) {\n        throw Error(\"A Token Vocabulary cannot be empty.\\n\" + \"\\tNote that the first argument for the parser constructor\\n\" + \"\\tis no longer a Token vector (since v4.0).\");\n      }\n\n      if (typeof tokenVocabulary[0].startOffset === \"number\") {\n        throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" + \"\\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" + \"\\tFor Further details.\");\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(tokenVocabulary, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if (has(tokenVocabulary, \"modes\") && every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n      var allTokenTypes = flatten(values(tokenVocabulary.modes));\n      var uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = reduce(uniqueTokens, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = cloneObj(tokenVocabulary);\n    } else {\n      throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" + \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n    } // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n\n    /* tslint:disable */\n\n\n    this.tokensMap[\"EOF\"] = EOF; // TODO: This check may not be accurate for multi mode lexers\n\n    var noTokenCategoriesUsed = every(values(tokenVocabulary), function (tokenConstructor) {\n      return isEmpty(tokenConstructor.categoryMatches);\n    });\n    this.tokenMatcher = noTokenCategoriesUsed ? tokenStructuredMatcherNoCategories : tokenStructuredMatcher; // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n\n    augmentTokenTypes(values(this.tokensMap));\n  };\n\n  RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n    if (this.selfAnalysisDone) {\n      throw Error(\"Grammar rule <\" + ruleName + \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\" + \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n    }\n\n    var resyncEnabled = has(config, \"resyncEnabled\") ? config.resyncEnabled : DEFAULT_RULE_CONFIG.resyncEnabled;\n    var recoveryValueFunc = has(config, \"recoveryValueFunc\") ? config.recoveryValueFunc : DEFAULT_RULE_CONFIG.recoveryValueFunc; // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n\n    /* tslint:disable */\n\n    var shortName = this.ruleShortNameIdx << BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX;\n    /* tslint:enable */\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    function invokeRuleWithTry(args) {\n      try {\n        if (this.outputCst === true) {\n          impl.apply(this, args);\n          var cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst;\n        } else {\n          return impl.apply(this, args);\n        }\n      } catch (e) {\n        return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n      } finally {\n        this.ruleFinallyStateUpdate();\n      }\n    }\n\n    var wrappedGrammarRule;\n\n    wrappedGrammarRule = function (idxInCallingRule, args) {\n      if (idxInCallingRule === void 0) {\n        idxInCallingRule = 0;\n      }\n\n      this.ruleInvocationStateUpdate(shortName, ruleName, idxInCallingRule);\n      return invokeRuleWithTry.call(this, args);\n    };\n\n    var ruleNamePropName = \"ruleName\";\n    wrappedGrammarRule[ruleNamePropName] = ruleName;\n    wrappedGrammarRule[\"originalGrammarAction\"] = impl;\n    return wrappedGrammarRule;\n  };\n\n  RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n    var isFirstInvokedRule = this.RULE_STACK.length === 1; // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n\n    var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      var recogError = e;\n\n      if (reSyncEnabled) {\n        var reSyncTokType = this.findReSyncTokenType();\n\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc();\n          }\n        } else {\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          } // to be handled Further up the call stack\n\n\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState(); // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n\n        return recoveryValueFunc();\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }; // Implementation of parsing DSL\n\n\n  RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n    var key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  };\n\n  RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n    var _this = this;\n\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n    var predicate;\n\n    if (actionORMethodDef.DEF !== undefined) {\n      action = actionORMethodDef.DEF;\n      predicate = actionORMethodDef.GATE; // predicate present\n\n      if (predicate !== undefined) {\n        var orgLookaheadFunction_1 = lookAheadFunc;\n\n        lookAheadFunc = function () {\n          return predicate.call(_this) && orgLookaheadFunction_1.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n\n    return undefined;\n  };\n\n  RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence);\n    return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n\n  RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n    var predicate;\n\n    if (actionORMethodDef.DEF !== undefined) {\n      action = actionORMethodDef.DEF;\n      predicate = actionORMethodDef.GATE; // predicate present\n\n      if (predicate !== undefined) {\n        var orgLookaheadFunction_2 = lookAheadFunc;\n\n        lookAheadFunc = function () {\n          return predicate.call(_this) && orgLookaheadFunction_2.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      var notStuck = this.doSingleRepetition(action);\n\n      while (lookAheadFunc.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n    } // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, AT_LEAST_ONE_IDX, prodOccurrence, NextTerminalAfterAtLeastOneWalker);\n  };\n\n  RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n\n  RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLookaheadFunc = this.getLaFuncFromCache(key); // 1st iteration\n\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      ;\n      action.call(this); //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n\n      var separatorLookAheadFunc = function () {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      }; // 2nd..nth iterations\n\n\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        action.call(this);\n      } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterAtLeastOneSepWalker], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, NextTerminalAfterAtLeastOneSepWalker);\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n    }\n  };\n\n  RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n\n  RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n\n    var lookaheadFunction = this.getLaFuncFromCache(key);\n    var action;\n    var predicate;\n\n    if (actionORMethodDef.DEF !== undefined) {\n      action = actionORMethodDef.DEF;\n      predicate = actionORMethodDef.GATE; // predicate present\n\n      if (predicate !== undefined) {\n        var orgLookaheadFunction_3 = lookaheadFunction;\n\n        lookaheadFunction = function () {\n          return predicate.call(_this) && orgLookaheadFunction_3.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    var notStuck = true;\n\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n    this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, MANY_IDX, prodOccurrence, NextTerminalAfterManyWalker, // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n    // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n    // An infinite loop cannot occur as:\n    // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n    // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n    notStuck);\n  };\n\n  RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence);\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n\n  RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLaFunc = this.getLaFuncFromCache(key); // 1st iteration\n\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      var separatorLookAheadFunc = function () {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      }; // 2nd..nth iterations\n\n\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator); // No need for checking infinite loop here due to consuming the separator.\n\n        action.call(this);\n      } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, NextTerminalAfterManySepWalker], separatorLookAheadFunc, MANY_SEP_IDX, prodOccurrence, NextTerminalAfterManySepWalker);\n    }\n  };\n\n  RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    } // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n    /* istanbul ignore else */\n\n\n    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n  };\n\n  RecognizerEngine.prototype.doSingleRepetition = function (action) {\n    var beforeIteration = this.getLexerPosition();\n    action.call(this);\n    var afterIteration = this.getLexerPosition(); // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n\n    return afterIteration > beforeIteration;\n  };\n\n  RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n    var laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    var alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n    var laFunc = this.getLaFuncFromCache(laKey);\n    var altIdxToTake = laFunc.call(this, alts);\n\n    if (altIdxToTake !== undefined) {\n      var chosenAlternative = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n\n    this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n  };\n\n  RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop(); // NOOP when cst is disabled\n\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      var firstRedundantTok = this.LA(1);\n      var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName()\n      });\n      this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok));\n    }\n  };\n\n  RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n    var ruleResult;\n\n    try {\n      var args = options !== undefined ? options.ARGS : undefined;\n      ruleResult = ruleToCall.call(this, idx, args);\n      this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName);\n      return ruleResult;\n    } catch (e) {\n      this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  };\n\n  RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName);\n      delete e.partialCstResult;\n    }\n\n    throw e;\n  };\n\n  RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n    var consumedToken;\n\n    try {\n      var nextToken = this.LA(1);\n\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n    }\n\n    this.cstPostTerminal(options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name, consumedToken);\n    return consumedToken;\n  };\n\n  RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n    var msg;\n    var previousToken = this.LA(0);\n\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName()\n      });\n    }\n\n    throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken));\n  };\n\n  RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n    eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n      var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n\n      try {\n        return this.tryInRuleRecovery(tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  };\n\n  RecognizerEngine.prototype.saveRecogState = function () {\n    // errors is a getter which will clone the errors array\n    var savedErrors = this.errors;\n    var savedRuleStack = cloneArr(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK\n    };\n  };\n\n  RecognizerEngine.prototype.reloadRecogState = function (newState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  };\n\n  RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName); // NOOP when cst is disabled\n\n    this.cstInvocationStateUpdate(fullName, shortName);\n  };\n\n  RecognizerEngine.prototype.isBackTracking = function () {\n    return this.isBackTrackingStack.length !== 0;\n  };\n\n  RecognizerEngine.prototype.getCurrRuleFullName = function () {\n    var shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  };\n\n  RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n    return this.shortRuleNameToFull[shortName];\n  };\n\n  RecognizerEngine.prototype.isAtEndOfInput = function () {\n    return this.tokenMatcher(this.LA(1), EOF);\n  };\n\n  RecognizerEngine.prototype.reset = function () {\n    this.resetLexerState();\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = []; // TODO: extract a specific reset for TreeBuilder trait\n\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  };\n\n  return RecognizerEngine;\n}();\n\nexport { RecognizerEngine };","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/recognizer_engine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { cloneArr, cloneObj, every, flatten, has, isArray, isEmpty, isObject, reduce, uniq, values } from \"../../../utils/utils\";\nimport { AT_LEAST_ONE_IDX, AT_LEAST_ONE_SEP_IDX, BITS_FOR_METHOD_TYPE, BITS_FOR_OCCURRENCE_IDX, MANY_IDX, MANY_SEP_IDX, OPTION_IDX, OR_IDX } from \"../../grammar/keys\";\nimport { isRecognitionException, MismatchedTokenException, NotAllInputParsedException } from \"../../exceptions_public\";\nimport { PROD_TYPE } from \"../../grammar/lookahead\";\nimport { NextTerminalAfterAtLeastOneSepWalker, NextTerminalAfterAtLeastOneWalker, NextTerminalAfterManySepWalker, NextTerminalAfterManyWalker } from \"../../grammar/interpreter\";\nimport { DEFAULT_RULE_CONFIG } from \"../parser\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable\";\nimport { EOF } from \"../../../scan/tokens_public\";\nimport { augmentTokenTypes, isTokenType, tokenStructuredMatcher, tokenStructuredMatcherNoCategories } from \"../../../scan/tokens\";\nimport { classNameFromInstance } from \"../../../lang/lang_extensions\";\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nvar RecognizerEngine = /** @class */ (function () {\n    function RecognizerEngine() {\n    }\n    RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n        this.className = classNameFromInstance(this);\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = tokenStructuredMatcherNoCategories;\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if (has(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n                \"\\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n                \"\\tFor Further details.\");\n        }\n        if (isArray(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if (isEmpty(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" +\n                    \"\\tNote that the first argument for the parser constructor\\n\" +\n                    \"\\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n                    \"\\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n                    \"\\tFor Further details.\");\n            }\n        }\n        if (isArray(tokenVocabulary)) {\n            this.tokensMap = reduce(tokenVocabulary, function (acc, tokType) {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (has(tokenVocabulary, \"modes\") &&\n            every(flatten(values(tokenVocabulary.modes)), isTokenType)) {\n            var allTokenTypes = flatten(values(tokenVocabulary.modes));\n            var uniqueTokens = uniq(allTokenTypes);\n            this.tokensMap = reduce(uniqueTokens, function (acc, tokType) {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if (isObject(tokenVocabulary)) {\n            this.tokensMap = cloneObj(tokenVocabulary);\n        }\n        else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" +\n                \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        /* tslint:disable */\n        this.tokensMap[\"EOF\"] = EOF;\n        // TODO: This check may not be accurate for multi mode lexers\n        var noTokenCategoriesUsed = every(values(tokenVocabulary), function (tokenConstructor) { return isEmpty(tokenConstructor.categoryMatches); });\n        this.tokenMatcher = noTokenCategoriesUsed\n            ? tokenStructuredMatcherNoCategories\n            : tokenStructuredMatcher;\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        augmentTokenTypes(values(this.tokensMap));\n    };\n    RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(\"Grammar rule <\" + ruleName + \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\" +\n                \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n        }\n        var resyncEnabled = has(config, \"resyncEnabled\")\n            ? config.resyncEnabled\n            : DEFAULT_RULE_CONFIG.resyncEnabled;\n        var recoveryValueFunc = has(config, \"recoveryValueFunc\")\n            ? config.recoveryValueFunc\n            : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        /* tslint:disable */\n        var shortName = this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n        /* tslint:enable */\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        function invokeRuleWithTry(args) {\n            try {\n                if (this.outputCst === true) {\n                    impl.apply(this, args);\n                    var cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                }\n                else {\n                    return impl.apply(this, args);\n                }\n            }\n            catch (e) {\n                return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n            }\n            finally {\n                this.ruleFinallyStateUpdate();\n            }\n        }\n        var wrappedGrammarRule;\n        wrappedGrammarRule = function (idxInCallingRule, args) {\n            if (idxInCallingRule === void 0) { idxInCallingRule = 0; }\n            this.ruleInvocationStateUpdate(shortName, ruleName, idxInCallingRule);\n            return invokeRuleWithTry.call(this, args);\n        };\n        var ruleNamePropName = \"ruleName\";\n        wrappedGrammarRule[ruleNamePropName] = ruleName;\n        wrappedGrammarRule[\"originalGrammarAction\"] = impl;\n        return wrappedGrammarRule;\n    };\n    RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n        var isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n        if (isRecognitionException(e)) {\n            var recogError = e;\n            if (reSyncEnabled) {\n                var reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    }\n                    else {\n                        return recoveryValueFunc();\n                    }\n                }\n                else {\n                    if (this.outputCst) {\n                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            }\n            else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc();\n            }\n            else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        }\n        else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    };\n    // Implementation of parsing DSL\n    RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n        var key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    };\n    RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n        var _this = this;\n        var lookAheadFunc = this.getLaFuncFromCache(key);\n        var action;\n        var predicate;\n        if (actionORMethodDef.DEF !== undefined) {\n            action = actionORMethodDef.DEF;\n            predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                var orgLookaheadFunction_1 = lookAheadFunc;\n                lookAheadFunc = function () {\n                    return predicate.call(_this) && orgLookaheadFunction_1.call(_this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    };\n    RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_IDX, prodOccurrence);\n        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    };\n    RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n        var _this = this;\n        var lookAheadFunc = this.getLaFuncFromCache(key);\n        var action;\n        var predicate;\n        if (actionORMethodDef.DEF !== undefined) {\n            action = actionORMethodDef.DEF;\n            predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                var orgLookaheadFunction_2 = lookAheadFunc;\n                lookAheadFunc = function () {\n                    return predicate.call(_this) && orgLookaheadFunction_2.call(_this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            var notStuck = this.doSingleRepetition(action);\n            while (lookAheadFunc.call(this) === true &&\n                notStuck === true) {\n                notStuck = this.doSingleRepetition(action);\n            }\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, AT_LEAST_ONE_IDX, prodOccurrence, NextTerminalAfterAtLeastOneWalker);\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n        var _this = this;\n        var action = options.DEF;\n        var separator = options.SEP;\n        var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            ;\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            var separatorLookAheadFunc = function () {\n                return _this.tokenMatcher(_this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                NextTerminalAfterAtLeastOneSepWalker\n            ], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, NextTerminalAfterAtLeastOneSepWalker);\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    };\n    RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    };\n    RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n        var _this = this;\n        var lookaheadFunction = this.getLaFuncFromCache(key);\n        var action;\n        var predicate;\n        if (actionORMethodDef.DEF !== undefined) {\n            action = actionORMethodDef.DEF;\n            predicate = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate !== undefined) {\n                var orgLookaheadFunction_3 = lookaheadFunction;\n                lookaheadFunction = function () {\n                    return predicate.call(_this) && orgLookaheadFunction_3.call(_this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        var notStuck = true;\n        while (lookaheadFunction.call(this) === true && notStuck === true) {\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, MANY_IDX, prodOccurrence, NextTerminalAfterManyWalker, \n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    };\n    RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    };\n    RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n        var _this = this;\n        var action = options.DEF;\n        var separator = options.SEP;\n        var firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            var separatorLookAheadFunc = function () {\n                return _this.tokenMatcher(_this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                NextTerminalAfterManySepWalker\n            ], separatorLookAheadFunc, MANY_SEP_IDX, prodOccurrence, NextTerminalAfterManySepWalker);\n        }\n    };\n    RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while (separatorLookAheadFunc()) {\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker\n        ], separatorLookAheadFunc, AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    };\n    RecognizerEngine.prototype.doSingleRepetition = function (action) {\n        var beforeIteration = this.getLexerPosition();\n        action.call(this);\n        var afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    };\n    RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n        var laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n        var alts = isArray(altsOrOpts)\n            ? altsOrOpts\n            : altsOrOpts.DEF;\n        var laFunc = this.getLaFuncFromCache(laKey);\n        var altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            var chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    };\n    RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            var firstRedundantTok = this.LA(1);\n            var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName()\n            });\n            this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok));\n        }\n    };\n    RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n        var ruleResult;\n        try {\n            var args = options !== undefined ? options.ARGS : undefined;\n            ruleResult = ruleToCall.call(this, idx, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleToCall.ruleName);\n            return ruleResult;\n        }\n        catch (e) {\n            this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    };\n    RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n        if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    };\n    RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n        var consumedToken;\n        try {\n            var nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            }\n            else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        }\n        catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined\n            ? options.LABEL\n            : tokType.name, consumedToken);\n        return consumedToken;\n    };\n    RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n        var msg;\n        var previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        }\n        else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName()\n            });\n        }\n        throw this.SAVE_ERROR(new MismatchedTokenException(msg, nextToken, previousToken));\n    };\n    RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled &&\n            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n            eFromConsumption.name === \"MismatchedTokenException\" &&\n            !this.isBackTracking()) {\n            var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            }\n            catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                }\n                else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        }\n        else {\n            throw eFromConsumption;\n        }\n    };\n    RecognizerEngine.prototype.saveRecogState = function () {\n        // errors is a getter which will clone the errors array\n        var savedErrors = this.errors;\n        var savedRuleStack = cloneArr(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK\n        };\n    };\n    RecognizerEngine.prototype.reloadRecogState = function (newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    };\n    RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName, shortName);\n    };\n    RecognizerEngine.prototype.isBackTracking = function () {\n        return this.isBackTrackingStack.length !== 0;\n    };\n    RecognizerEngine.prototype.getCurrRuleFullName = function () {\n        var shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    };\n    RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n        return this.shortRuleNameToFull[shortName];\n    };\n    RecognizerEngine.prototype.isAtEndOfInput = function () {\n        return this.tokenMatcher(this.LA(1), EOF);\n    };\n    RecognizerEngine.prototype.reset = function () {\n        this.resetLexerState();\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        // TODO: extract a specific reset for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    };\n    return RecognizerEngine;\n}());\nexport { RecognizerEngine };\n//# sourceMappingURL=recognizer_engine.js.map"]},"metadata":{},"sourceType":"module"}