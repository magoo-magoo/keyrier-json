{"ast":null,"code":"export const jsonBeautify = str => {\n  if (typeof str !== 'string') {\n    return '';\n  }\n\n  const parsed = jsonParseSafe(str);\n\n  if (typeof parsed === 'string') {\n    return parsed;\n  }\n\n  if (parsed === null) {\n    return '';\n  }\n\n  return JSON.stringify(parsed, null, 2);\n};\nexport const jsonParseSafe = str => {\n  if (typeof str !== 'string' || str.trim() === '') {\n    return null;\n  }\n\n  const safeStr = str.replace(/\\\\n/g, '\\\\n').replace(/\\\\'/g, \"\\\\'\").replace(/\\\\\"/g, '\\\\\"').replace(/\\\\&/g, '\\\\&').replace(/\\\\r/g, '\\\\r').replace(/\\\\t/g, '\\\\t').replace(/\\\\b/g, '\\\\b').replace(/\\\\f/g, '\\\\f');\n\n  try {\n    return JSON.parse(safeStr);\n  } catch (error) {\n    return str;\n  }\n};","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/core/converters/json.ts"],"names":["jsonBeautify","str","parsed","jsonParseSafe","JSON","stringify","trim","safeStr","replace","parse","error"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,GAAD,IAA6B;AACrD,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzB,WAAO,EAAP;AACH;;AAED,QAAMC,MAAM,GAAGC,aAAa,CAACF,GAAD,CAA5B;;AACA,MAAI,OAAOC,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,WAAOA,MAAP;AACH;;AAED,MAAIA,MAAM,KAAK,IAAf,EAAqB;AACjB,WAAO,EAAP;AACH;;AAED,SAAOE,IAAI,CAACC,SAAL,CAAeH,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAP;AACH,CAfM;AAiBP,OAAO,MAAMC,aAAa,GAAIF,GAAD,IAAwB;AACjD,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACK,IAAJ,OAAe,EAA9C,EAAkD;AAC9C,WAAO,IAAP;AACH;;AAED,QAAMC,OAAO,GAAGN,GAAG,CACdO,OADW,CACH,MADG,EACK,KADL,EAEXA,OAFW,CAEH,MAFG,EAEK,KAFL,EAGXA,OAHW,CAGH,MAHG,EAGK,KAHL,EAIXA,OAJW,CAIH,MAJG,EAIK,KAJL,EAKXA,OALW,CAKH,MALG,EAKK,KALL,EAMXA,OANW,CAMH,MANG,EAMK,KANL,EAOXA,OAPW,CAOH,MAPG,EAOK,KAPL,EAQXA,OARW,CAQH,MARG,EAQK,KARL,CAAhB;;AAUA,MAAI;AACA,WAAOJ,IAAI,CAACK,KAAL,CAAWF,OAAX,CAAP;AACH,GAFD,CAEE,OAAOG,KAAP,EAAc;AACZ,WAAOT,GAAP;AACH;AACJ,CApBM","sourcesContent":["export const jsonBeautify = (str: string | undefined) => {\n    if (typeof str !== 'string') {\n        return ''\n    }\n\n    const parsed = jsonParseSafe(str)\n    if (typeof parsed === 'string') {\n        return parsed\n    }\n\n    if (parsed === null) {\n        return ''\n    }\n\n    return JSON.stringify(parsed, null, 2)\n}\n\nexport const jsonParseSafe = (str: string | null) => {\n    if (typeof str !== 'string' || str.trim() === '') {\n        return null\n    }\n\n    const safeStr = str\n        .replace(/\\\\n/g, '\\\\n')\n        .replace(/\\\\'/g, \"\\\\'\")\n        .replace(/\\\\\"/g, '\\\\\"')\n        .replace(/\\\\&/g, '\\\\&')\n        .replace(/\\\\r/g, '\\\\r')\n        .replace(/\\\\t/g, '\\\\t')\n        .replace(/\\\\b/g, '\\\\b')\n        .replace(/\\\\f/g, '\\\\f')\n\n    try {\n        return JSON.parse(safeStr)\n    } catch (error) {\n        return str\n    }\n}\n"]},"metadata":{},"sourceType":"module"}