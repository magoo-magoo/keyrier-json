{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/json_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var JsonHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"variable\",\n        // single line\n        regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]\\\\s*(?=:)'\n      }, {\n        token: \"string\",\n        // single line\n        regex: '\"',\n        next: \"string\"\n      }, {\n        token: \"constant.numeric\",\n        // hex\n        regex: \"0[xX][0-9a-fA-F]+\\\\b\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n      }, {\n        token: \"constant.language.boolean\",\n        regex: \"(?:true|false)\\\\b\"\n      }, {\n        token: \"text\",\n        // single quoted strings are not allowed\n        regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n      }, {\n        token: \"comment\",\n        // comments are not allowed, but who cares?\n        regex: \"\\\\/\\\\/.*$\"\n      }, {\n        token: \"comment.start\",\n        // comments are not allowed, but who cares?\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"paren.lparen\",\n        regex: \"[[({]\"\n      }, {\n        token: \"paren.rparen\",\n        regex: \"[\\\\])}]\"\n      }, {\n        token: \"text\",\n        regex: \"\\\\s+\"\n      }],\n      \"string\": [{\n        token: \"constant.language.escape\",\n        regex: /\\\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|[\"\\\\\\/bfnrt])/\n      }, {\n        token: \"string\",\n        regex: '\"|$',\n        next: \"start\"\n      }, {\n        defaultToken: \"string\"\n      }],\n      \"comment\": [{\n        token: \"comment.end\",\n        // comments are not allowed, but who cares?\n        regex: \"\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        defaultToken: \"comment\"\n      }]\n    };\n  };\n\n  oop.inherits(JsonHighlightRules, TextHighlightRules);\n  exports.JsonHighlightRules = JsonHighlightRules;\n});\nace.define(\"ace/mode/redshift_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/lib/lang\", \"ace/mode/doc_comment_highlight_rules\", \"ace/mode/text_highlight_rules\", \"ace/mode/json_highlight_rules\"], function (require, exports, module) {\n  var oop = require(\"../lib/oop\");\n\n  var lang = require(\"../lib/lang\");\n\n  var DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var JsonHighlightRules = require(\"./json_highlight_rules\").JsonHighlightRules;\n\n  var RedshiftHighlightRules = function () {\n    var keywords = \"aes128|aes256|all|allowoverwrite|analyse|analyze|and|any|array|as|asc|authorization|backup|\" + \"between|binary|blanksasnull|both|bytedict|bzip2|case|cast|check|collate|column|constraint|create|credentials|\" + \"cross|current_date|current_time|current_timestamp|current_user|current_user_id|default|deferrable|deflate|defrag|delta|\" + \"delta32k|desc|disable|distinct|do|else|emptyasnull|enable|encode|encrypt|encryption|end|except|explicit|false|for|foreign|\" + \"freeze|from|full|globaldict256|globaldict64k|grant|group|gzip|having|identity|ignore|ilike|in|initially|inner|intersect|into|is|\" + \"isnull|join|leading|left|like|limit|localtime|localtimestamp|lun|luns|lzo|lzop|minus|mostly13|mostly32|mostly8|natural|new|not|notnull|\" + \"null|nulls|off|offline|offset|old|on|only|open|or|order|outer|overlaps|parallel|partition|percent|permissions|placing|primary|raw|readratio|\" + \"recover|references|rejectlog|resort|restore|right|select|session_user|similar|some|sysdate|system|table|tag|tdes|text255|text32k|then|timestamp|\" + \"to|top|trailing|true|truncatecolumns|union|unique|user|using|verbose|wallet|when|where|with|without\";\n    var builtinFunctions = \"current_schema|current_schemas|has_database_privilege|has_schema_privilege|has_table_privilege|age|current_time|current_timestamp|localtime|\" + \"isfinite|now|ascii|get_bit|get_byte|octet_length|set_bit|set_byte|to_ascii|avg|count|listagg|max|min|stddev_samp|stddev_pop|sum|var_samp|var_pop|\" + \"bit_and|bit_or|bool_and|bool_or|avg|count|cume_dist|dense_rank|first_value|last_value|lag|lead|listagg|max|median|min|nth_value|ntile|percent_rank|\" + \"percentile_cont|percentile_disc|rank|ratio_to_report|row_number|case|coalesce|decode|greatest|least|nvl|nvl2|nullif|add_months|age|convert_timezone|\" + \"current_date|timeofday|current_time|current_timestamp|date_cmp|date_cmp_timestamp|date_part_year|dateadd|datediff|date_part|date_trunc|extract|getdate|\" + \"interval_cmp|isfinite|last_day|localtime|localtimestamp|months_between|next_day|now|sysdate|timestamp_cmp|timestamp_cmp_date|trunc|abs|acos|asin|atan|\" + \"atan2|cbrt|ceiling|ceil|checksum|cos|cot|degrees|dexp|dlog1|dlog10|exp|floor|ln|log|mod|pi|power|radians|random|round|sin|sign|sqrt|tan|trunc|ascii|\" + \"bpcharcmp|btrim|bttext_pattern_cmp|char_length|character_length|charindex|chr|concat|crc32|func_sha1|get_bit|get_byte|initcap|left|right|len|length|\" + \"lower|lpad|rpad|ltrim|md5|octet_length|position|quote_ident|quote_literal|regexp_count|regexp_instr|regexp_replace|regexp_substr|repeat|replace|replicate|\" + \"reverse|rtrim|set_bit|set_byte|split_part|strpos|strtol|substring|textlen|to_ascii|to_hex|translate|trim|upper|json_array_length|json_extract_array_element_text|\" + \"json_extract_path_text|cast|convert|to_char|to_date|to_number|current_database|current_schema|current_schemas|current_user|current_user_id|has_database_privilege|\" + \"has_schema_privilege|has_table_privilege|pg_backend_pid|pg_last_copy_count|pg_last_copy_id|pg_last_query_id|pg_last_unload_count|session_user|slice_num|user|version\";\n    var keywordMapper = this.createKeywordMapper({\n      \"support.function\": builtinFunctions,\n      \"keyword\": keywords\n    }, \"identifier\", true);\n    var sqlRules = [{\n      token: \"string\",\n      // single line string -- assume dollar strings if multi-line for now\n      regex: \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n    }, {\n      token: \"variable.language\",\n      // pg identifier\n      regex: '\".*?\"'\n    }, {\n      token: \"constant.numeric\",\n      // float\n      regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n    }, {\n      token: keywordMapper,\n      regex: \"[a-zA-Z_][a-zA-Z0-9_$]*\\\\b\" // TODO - Unicode in identifiers\n\n    }, {\n      token: \"keyword.operator\",\n      regex: \"!|!!|!~|!~\\\\*|!~~|!~~\\\\*|#|##|#<|#<=|#<>|#=|#>|#>=|%|\\\\&|\\\\&\\\\&|\\\\&<|\\\\&<\\\\||\\\\&>|\\\\*|\\\\+|\" + \"\\\\-|/|<|<#>|<\\\\->|<<|<<=|<<\\\\||<=|<>|<\\\\?>|<@|<\\\\^|=|>|>=|>>|>>=|>\\\\^|\\\\?#|\\\\?\\\\-|\\\\?\\\\-\\\\||\" + \"\\\\?\\\\||\\\\?\\\\|\\\\||@|@\\\\-@|@>|@@|@@@|\\\\^|\\\\||\\\\|\\\\&>|\\\\|/|\\\\|>>|\\\\|\\\\||\\\\|\\\\|/|~|~\\\\*|~<=~|~<~|\" + \"~=|~>=~|~>~|~~|~~\\\\*\"\n    }, {\n      token: \"paren.lparen\",\n      regex: \"[\\\\(]\"\n    }, {\n      token: \"paren.rparen\",\n      regex: \"[\\\\)]\"\n    }, {\n      token: \"text\",\n      regex: \"\\\\s+\"\n    }];\n    this.$rules = {\n      \"start\": [{\n        token: \"comment\",\n        regex: \"--.*$\"\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi-line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"comment\"\n      }, {\n        token: \"keyword.statementBegin\",\n        regex: \"^[a-zA-Z]+\",\n        // Could enumerate starting keywords but this allows things to work when new statements are added.\n        next: \"statement\"\n      }, {\n        token: \"support.buildin\",\n        // psql directive\n        regex: \"^\\\\\\\\[\\\\S]+.*$\"\n      }],\n      \"statement\": [{\n        token: \"comment\",\n        regex: \"--.*$\"\n      }, {\n        token: \"comment\",\n        // multi-line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"commentStatement\"\n      }, {\n        token: \"statementEnd\",\n        regex: \";\",\n        next: \"start\"\n      }, {\n        token: \"string\",\n        regex: \"\\\\$json\\\\$\",\n        next: \"json-start\"\n      }, {\n        token: \"string\",\n        regex: \"\\\\$[\\\\w_0-9]*\\\\$$\",\n        // dollar quote at the end of a line\n        next: \"dollarSql\"\n      }, {\n        token: \"string\",\n        regex: \"\\\\$[\\\\w_0-9]*\\\\$\",\n        next: \"dollarStatementString\"\n      }].concat(sqlRules),\n      \"dollarSql\": [{\n        token: \"comment\",\n        regex: \"--.*$\"\n      }, {\n        token: \"comment\",\n        // multi-line comment\n        regex: \"\\\\/\\\\*\",\n        next: \"commentDollarSql\"\n      }, {\n        token: \"string\",\n        // end quoting with dollar at the start of a line\n        regex: \"^\\\\$[\\\\w_0-9]*\\\\$\",\n        next: \"statement\"\n      }, {\n        token: \"string\",\n        regex: \"\\\\$[\\\\w_0-9]*\\\\$\",\n        next: \"dollarSqlString\"\n      }].concat(sqlRules),\n      \"comment\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \".*?\\\\*\\\\/\",\n        next: \"start\"\n      }, {\n        token: \"comment\",\n        // comment spanning whole line\n        regex: \".+\"\n      }],\n      \"commentStatement\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \".*?\\\\*\\\\/\",\n        next: \"statement\"\n      }, {\n        token: \"comment\",\n        // comment spanning whole line\n        regex: \".+\"\n      }],\n      \"commentDollarSql\": [{\n        token: \"comment\",\n        // closing comment\n        regex: \".*?\\\\*\\\\/\",\n        next: \"dollarSql\"\n      }, {\n        token: \"comment\",\n        // comment spanning whole line\n        regex: \".+\"\n      }],\n      \"dollarStatementString\": [{\n        token: \"string\",\n        // closing dollarstring\n        regex: \".*?\\\\$[\\\\w_0-9]*\\\\$\",\n        next: \"statement\"\n      }, {\n        token: \"string\",\n        // dollarstring spanning whole line\n        regex: \".+\"\n      }],\n      \"dollarSqlString\": [{\n        token: \"string\",\n        // closing dollarstring\n        regex: \".*?\\\\$[\\\\w_0-9]*\\\\$\",\n        next: \"dollarSql\"\n      }, {\n        token: \"string\",\n        // dollarstring spanning whole line\n        regex: \".+\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.embedRules(JsonHighlightRules, \"json-\", [{\n      token: \"string\",\n      regex: \"\\\\$json\\\\$\",\n      next: \"statement\"\n    }]);\n  };\n\n  oop.inherits(RedshiftHighlightRules, TextHighlightRules);\n  exports.RedshiftHighlightRules = RedshiftHighlightRules;\n});\nace.define(\"ace/mode/redshift\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/redshift_highlight_rules\", \"ace/range\"], function (require, exports, module) {\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"../mode/text\").Mode;\n\n  var RedshiftHighlightRules = require(\"./redshift_highlight_rules\").RedshiftHighlightRules;\n\n  var Range = require(\"../range\").Range;\n\n  var Mode = function () {\n    this.HighlightRules = RedshiftHighlightRules;\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {\n      start: \"/*\",\n      end: \"*/\"\n    };\n\n    this.getNextLineIndent = function (state, line, tab) {\n      if (state == \"start\" || state == \"keyword.statementEnd\") {\n        return \"\";\n      } else {\n        return this.$getIndent(line); // Keep whatever indent the previous line has\n      }\n    };\n\n    this.$id = \"ace/mode/redshift\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/redshift\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-redshift.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","JsonHighlightRules","lang","RedshiftHighlightRules","keywords","builtinFunctions","keywordMapper","createKeywordMapper","sqlRules","concat","embedRules","TextMode","Mode","Range","HighlightRules","lineCommentStart","blockComment","end","getNextLineIndent","state","line","tab","$getIndent","$id","call","prototype","m"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/json_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar JsonHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"variable\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]\\\\s*(?=:)'\n            }, {\n                token : \"string\", // single line\n                regex : '\"',\n                next  : \"string\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false)\\\\b\"\n            }, {\n                token : \"text\", // single quoted strings are not allowed\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"comment\", // comments are not allowed, but who cares?\n                regex : \"\\\\/\\\\/.*$\"\n            }, {\n                token : \"comment.start\", // comments are not allowed, but who cares?\n                regex : \"\\\\/\\\\*\",\n                next  : \"comment\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"string\" : [\n            {\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|[\"\\\\\\/bfnrt])/\n            }, {\n                token : \"string\",\n                regex : '\"|$',\n                next  : \"start\"\n            }, {\n                defaultToken : \"string\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment.end\", // comments are not allowed, but who cares?\n                regex : \"\\\\*\\\\/\",\n                next  : \"start\"\n            }, {\n                defaultToken: \"comment\"\n            }\n        ]\n    };\n    \n};\n\noop.inherits(JsonHighlightRules, TextHighlightRules);\n\nexports.JsonHighlightRules = JsonHighlightRules;\n});\n\nace.define(\"ace/mode/redshift_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\",\"ace/mode/json_highlight_rules\"], function(require, exports, module) {\n\nvar oop = require(\"../lib/oop\");\nvar lang = require(\"../lib/lang\");\nvar DocCommentHighlightRules = require(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\nvar JsonHighlightRules = require(\"./json_highlight_rules\").JsonHighlightRules;\n\nvar RedshiftHighlightRules = function() {\n    var keywords = (\n        \"aes128|aes256|all|allowoverwrite|analyse|analyze|and|any|array|as|asc|authorization|backup|\" + \n        \"between|binary|blanksasnull|both|bytedict|bzip2|case|cast|check|collate|column|constraint|create|credentials|\" + \n        \"cross|current_date|current_time|current_timestamp|current_user|current_user_id|default|deferrable|deflate|defrag|delta|\" + \n        \"delta32k|desc|disable|distinct|do|else|emptyasnull|enable|encode|encrypt|encryption|end|except|explicit|false|for|foreign|\" + \n        \"freeze|from|full|globaldict256|globaldict64k|grant|group|gzip|having|identity|ignore|ilike|in|initially|inner|intersect|into|is|\" + \n        \"isnull|join|leading|left|like|limit|localtime|localtimestamp|lun|luns|lzo|lzop|minus|mostly13|mostly32|mostly8|natural|new|not|notnull|\" + \n        \"null|nulls|off|offline|offset|old|on|only|open|or|order|outer|overlaps|parallel|partition|percent|permissions|placing|primary|raw|readratio|\" +\n        \"recover|references|rejectlog|resort|restore|right|select|session_user|similar|some|sysdate|system|table|tag|tdes|text255|text32k|then|timestamp|\" + \n        \"to|top|trailing|true|truncatecolumns|union|unique|user|using|verbose|wallet|when|where|with|without\"\n    );\n\n\n    var builtinFunctions = (\n        \"current_schema|current_schemas|has_database_privilege|has_schema_privilege|has_table_privilege|age|current_time|current_timestamp|localtime|\" + \n        \"isfinite|now|ascii|get_bit|get_byte|octet_length|set_bit|set_byte|to_ascii|avg|count|listagg|max|min|stddev_samp|stddev_pop|sum|var_samp|var_pop|\" + \n        \"bit_and|bit_or|bool_and|bool_or|avg|count|cume_dist|dense_rank|first_value|last_value|lag|lead|listagg|max|median|min|nth_value|ntile|percent_rank|\" + \n        \"percentile_cont|percentile_disc|rank|ratio_to_report|row_number|case|coalesce|decode|greatest|least|nvl|nvl2|nullif|add_months|age|convert_timezone|\" +\n        \"current_date|timeofday|current_time|current_timestamp|date_cmp|date_cmp_timestamp|date_part_year|dateadd|datediff|date_part|date_trunc|extract|getdate|\" +\n        \"interval_cmp|isfinite|last_day|localtime|localtimestamp|months_between|next_day|now|sysdate|timestamp_cmp|timestamp_cmp_date|trunc|abs|acos|asin|atan|\" +\n        \"atan2|cbrt|ceiling|ceil|checksum|cos|cot|degrees|dexp|dlog1|dlog10|exp|floor|ln|log|mod|pi|power|radians|random|round|sin|sign|sqrt|tan|trunc|ascii|\" +\n        \"bpcharcmp|btrim|bttext_pattern_cmp|char_length|character_length|charindex|chr|concat|crc32|func_sha1|get_bit|get_byte|initcap|left|right|len|length|\" +\n        \"lower|lpad|rpad|ltrim|md5|octet_length|position|quote_ident|quote_literal|regexp_count|regexp_instr|regexp_replace|regexp_substr|repeat|replace|replicate|\" +\n        \"reverse|rtrim|set_bit|set_byte|split_part|strpos|strtol|substring|textlen|to_ascii|to_hex|translate|trim|upper|json_array_length|json_extract_array_element_text|\" +\n        \"json_extract_path_text|cast|convert|to_char|to_date|to_number|current_database|current_schema|current_schemas|current_user|current_user_id|has_database_privilege|\" +\n        \"has_schema_privilege|has_table_privilege|pg_backend_pid|pg_last_copy_count|pg_last_copy_id|pg_last_query_id|pg_last_unload_count|session_user|slice_num|user|version\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"support.function\": builtinFunctions,\n        \"keyword\": keywords\n    }, \"identifier\", true);\n\n\n    var sqlRules = [{\n            token : \"string\", // single line string -- assume dollar strings if multi-line for now\n            regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n        }, {\n            token : \"variable.language\", // pg identifier\n            regex : '\".*?\"'\n        }, {\n            token : \"constant.numeric\", // float\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_][a-zA-Z0-9_$]*\\\\b\" // TODO - Unicode in identifiers\n        }, {\n            token : \"keyword.operator\",\n            regex : \"!|!!|!~|!~\\\\*|!~~|!~~\\\\*|#|##|#<|#<=|#<>|#=|#>|#>=|%|\\\\&|\\\\&\\\\&|\\\\&<|\\\\&<\\\\||\\\\&>|\\\\*|\\\\+|\" +\n                    \"\\\\-|/|<|<#>|<\\\\->|<<|<<=|<<\\\\||<=|<>|<\\\\?>|<@|<\\\\^|=|>|>=|>>|>>=|>\\\\^|\\\\?#|\\\\?\\\\-|\\\\?\\\\-\\\\||\" +\n                    \"\\\\?\\\\||\\\\?\\\\|\\\\||@|@\\\\-@|@>|@@|@@@|\\\\^|\\\\||\\\\|\\\\&>|\\\\|/|\\\\|>>|\\\\|\\\\||\\\\|\\\\|/|~|~\\\\*|~<=~|~<~|\" +\n                    \"~=|~>=~|~>~|~~|~~\\\\*\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\(]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        }\n    ];\n\n\n    this.$rules = {\n        \"start\" : [{\n                token : \"comment\",\n                regex : \"--.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi-line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            },{\n                token : \"keyword.statementBegin\",\n                regex : \"^[a-zA-Z]+\", // Could enumerate starting keywords but this allows things to work when new statements are added.\n                next : \"statement\"\n            },{\n                token : \"support.buildin\", // psql directive\n                regex : \"^\\\\\\\\[\\\\S]+.*$\"\n            }\n        ],\n\n        \"statement\" : [{\n                token : \"comment\",\n                regex : \"--.*$\"\n            }, {\n                token : \"comment\", // multi-line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"commentStatement\"\n            }, {\n                token : \"statementEnd\",\n                regex : \";\",\n                next : \"start\"\n            }, {\n                token : \"string\",\n                regex : \"\\\\$json\\\\$\",\n                next : \"json-start\"\n            }, {\n                token : \"string\",\n                regex : \"\\\\$[\\\\w_0-9]*\\\\$$\", // dollar quote at the end of a line\n                next : \"dollarSql\"\n            }, {\n                token : \"string\",\n                regex : \"\\\\$[\\\\w_0-9]*\\\\$\",\n                next : \"dollarStatementString\"\n            }\n        ].concat(sqlRules),\n\n        \"dollarSql\" : [{\n                token : \"comment\",\n                regex : \"--.*$\"\n            }, {\n                token : \"comment\", // multi-line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"commentDollarSql\"\n            }, {\n                token : \"string\", // end quoting with dollar at the start of a line\n                regex : \"^\\\\$[\\\\w_0-9]*\\\\$\",\n                next : \"statement\"\n            }, {\n                token : \"string\",\n                regex : \"\\\\$[\\\\w_0-9]*\\\\$\",\n                next : \"dollarSqlString\"\n            }\n        ].concat(sqlRules),\n\n        \"comment\" : [{\n                token : \"comment\", // closing comment\n                regex : \".*?\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                token : \"comment\", // comment spanning whole line\n                regex : \".+\"\n            }\n        ],\n\n        \"commentStatement\" : [{\n                token : \"comment\", // closing comment\n                regex : \".*?\\\\*\\\\/\",\n                next : \"statement\"\n            }, {\n                token : \"comment\", // comment spanning whole line\n                regex : \".+\"\n            }\n        ],\n\n        \"commentDollarSql\" : [{\n                token : \"comment\", // closing comment\n                regex : \".*?\\\\*\\\\/\",\n                next : \"dollarSql\"\n            }, {\n                token : \"comment\", // comment spanning whole line\n                regex : \".+\"\n            }\n        ],\n\n        \"dollarStatementString\" : [{\n                token : \"string\", // closing dollarstring\n                regex : \".*?\\\\$[\\\\w_0-9]*\\\\$\",\n                next : \"statement\"\n            }, {\n                token : \"string\", // dollarstring spanning whole line\n                regex : \".+\"\n            }\n        ],\n\n        \"dollarSqlString\" : [{\n                token : \"string\", // closing dollarstring\n                regex : \".*?\\\\$[\\\\w_0-9]*\\\\$\",\n                next : \"dollarSql\"\n            }, {\n                token : \"string\", // dollarstring spanning whole line\n                regex : \".+\"\n            }\n        ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    this.embedRules(JsonHighlightRules, \"json-\", [{token : \"string\", regex : \"\\\\$json\\\\$\", next : \"statement\"}]);\n};\n\noop.inherits(RedshiftHighlightRules, TextHighlightRules);\n\nexports.RedshiftHighlightRules = RedshiftHighlightRules;\n});\n\nace.define(\"ace/mode/redshift\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/redshift_highlight_rules\",\"ace/range\"], function(require, exports, module) {\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"../mode/text\").Mode;\nvar RedshiftHighlightRules = require(\"./redshift_highlight_rules\").RedshiftHighlightRules;\nvar Range = require(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = RedshiftHighlightRules;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) { \n        if (state == \"start\" || state == \"keyword.statementEnd\") {\n            return \"\";\n        } else {\n            return this.$getIndent(line); // Keep whatever indent the previous line has\n        }\n    };\n\n    this.$id = \"ace/mode/redshift\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/redshift\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}