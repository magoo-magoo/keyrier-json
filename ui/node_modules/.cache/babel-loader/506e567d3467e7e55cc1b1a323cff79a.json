{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/components/source/SourceEditor.tsx\";\nimport { updateSource } from 'actions/actions';\nimport { AceEditor } from 'components/common/DeferredAceEditor';\nimport { withErrorBoundary } from 'components/common/ErrorBoundary';\nimport { withPerformance } from 'core/logging/performance';\nimport * as React from 'react';\nimport { memo, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { unstable_IdlePriority, unstable_runWithPriority } from 'scheduler';\nimport { getEditorTheme, getSourceText } from 'store/selectors';\n\nconst SourceEditor = ({\n  onChange,\n  sourceText,\n  currentEditorTheme\n}) => {\n  const onChangeCallback = useCallback(s => {\n    if (sourceText !== s) {\n      unstable_runWithPriority(unstable_IdlePriority, () => onChange(s));\n    }\n  }, [onChange, sourceText]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AceEditor, {\n    mode: \"json\",\n    theme: currentEditorTheme,\n    name: \"sourceAceEditor\",\n    onChange: onChangeCallback,\n    value: sourceText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  sourceText: getSourceText(state),\n  currentEditorTheme: getEditorTheme(state)\n});\n\nconst ConnectedSourceEditor = connect(mapStateToProps, {\n  onChange: updateSource\n})(withErrorBoundary(memo(withPerformance(SourceEditor, 'SourceEditor'))));\nexport default ConnectedSourceEditor;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/components/source/SourceEditor.tsx"],"names":["updateSource","AceEditor","withErrorBoundary","withPerformance","React","memo","useCallback","connect","unstable_IdlePriority","unstable_runWithPriority","getEditorTheme","getSourceText","SourceEditor","onChange","sourceText","currentEditorTheme","onChangeCallback","s","mapStateToProps","state","ConnectedSourceEditor"],"mappings":";AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,eAAT,QAAgC,0BAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAAaC,IAAb,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,qBAAT,EAAgCC,wBAAhC,QAAgE,WAAhE;AAEA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,iBAA9C;;AASA,MAAMC,YAAuB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,UAAZ;AAAwBC,EAAAA;AAAxB,CAAD,KAAkD;AAC9E,QAAMC,gBAAgB,GAAGV,WAAW,CAC/BW,CAAD,IAAe;AACX,QAAIH,UAAU,KAAKG,CAAnB,EAAsB;AAClBR,MAAAA,wBAAwB,CAACD,qBAAD,EAAwB,MAAMK,QAAQ,CAACI,CAAD,CAAtC,CAAxB;AACH;AACJ,GAL+B,EAMhC,CAACJ,QAAD,EAAWC,UAAX,CANgC,CAApC;AAQA,sBACI,uDACI,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,MADT;AAEI,IAAA,KAAK,EAAEC,kBAFX;AAGI,IAAA,IAAI,EAAC,iBAHT;AAII,IAAA,QAAQ,EAAEC,gBAJd;AAKI,IAAA,KAAK,EAAEF,UALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAWH,CApBD;;AAsBA,MAAMI,eAAe,GAAIC,KAAD,KAAuB;AAC3CL,EAAAA,UAAU,EAAEH,aAAa,CAACQ,KAAD,CADkB;AAE3CJ,EAAAA,kBAAkB,EAAEL,cAAc,CAACS,KAAD;AAFS,CAAvB,CAAxB;;AAKA,MAAMC,qBAAqB,GAAGb,OAAO,CAACW,eAAD,EAAkB;AAAEL,EAAAA,QAAQ,EAAEb;AAAZ,CAAlB,CAAP,CAC1BE,iBAAiB,CAACG,IAAI,CAACF,eAAe,CAACS,YAAD,EAAe,cAAf,CAAhB,CAAL,CADS,CAA9B;AAIA,eAAeQ,qBAAf","sourcesContent":["import { updateSource } from 'actions/actions'\nimport { AceEditor } from 'components/common/DeferredAceEditor'\nimport { withErrorBoundary } from 'components/common/ErrorBoundary'\nimport { withPerformance } from 'core/logging/performance'\nimport * as React from 'react'\nimport { FC, memo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport { unstable_IdlePriority, unstable_runWithPriority } from 'scheduler'\nimport { RootState } from 'state/State'\nimport { getEditorTheme, getSourceText } from 'store/selectors'\nimport { EditorTheme } from 'themes/themes'\n\ninterface Props {\n    onChange: typeof updateSource\n    sourceText: string\n    currentEditorTheme: EditorTheme\n}\n\nconst SourceEditor: FC<Props> = ({ onChange, sourceText, currentEditorTheme }) => {\n    const onChangeCallback = useCallback(\n        (s: string) => {\n            if (sourceText !== s) {\n                unstable_runWithPriority(unstable_IdlePriority, () => onChange(s))\n            }\n        },\n        [onChange, sourceText]\n    )\n    return (\n        <>\n            <AceEditor\n                mode=\"json\"\n                theme={currentEditorTheme}\n                name=\"sourceAceEditor\"\n                onChange={onChangeCallback}\n                value={sourceText}\n            />\n        </>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    sourceText: getSourceText(state),\n    currentEditorTheme: getEditorTheme(state),\n})\n\nconst ConnectedSourceEditor = connect(mapStateToProps, { onChange: updateSource })(\n    withErrorBoundary(memo(withPerformance(SourceEditor, 'SourceEditor')))\n)\n\nexport default ConnectedSourceEditor\n"]},"metadata":{},"sourceType":"module"}