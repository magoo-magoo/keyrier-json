{"ast":null,"code":"import { useMemo, useRef, useEffect } from 'react';\n\nvar useUnmountPromise = function () {\n  var refUnmounted = useRef(false);\n  useEffect(function () {\n    return function () {\n      refUnmounted.current = true;\n    };\n  });\n  var wrapper = useMemo(function () {\n    var race = function (promise, onError) {\n      var newPromise = new Promise(function (resolve, reject) {\n        promise.then(function (result) {\n          if (!refUnmounted.current) resolve(result);\n        }, function (error) {\n          if (!refUnmounted.current) reject(error);else if (onError) onError(error);else console.error('useUnmountPromise', error);\n        });\n      });\n      return newPromise;\n    };\n\n    return race;\n  }, []);\n  return wrapper;\n};\n\nexport default useUnmountPromise;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/react-use/esm/useUnmountPromise.js"],"names":["useMemo","useRef","useEffect","useUnmountPromise","refUnmounted","current","wrapper","race","promise","onError","newPromise","Promise","resolve","reject","then","result","error","console"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,SAA1B,QAA2C,OAA3C;;AACA,IAAIC,iBAAiB,GAAG,YAAY;AAChC,MAAIC,YAAY,GAAGH,MAAM,CAAC,KAAD,CAAzB;AACAC,EAAAA,SAAS,CAAC,YAAY;AAAE,WAAO,YAAY;AACvCE,MAAAA,YAAY,CAACC,OAAb,GAAuB,IAAvB;AACH,KAFuB;AAEpB,GAFK,CAAT;AAGA,MAAIC,OAAO,GAAGN,OAAO,CAAC,YAAY;AAC9B,QAAIO,IAAI,GAAG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACnC,UAAIC,UAAU,GAAG,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AACpDL,QAAAA,OAAO,CAACM,IAAR,CAAa,UAAUC,MAAV,EAAkB;AAC3B,cAAI,CAACX,YAAY,CAACC,OAAlB,EACIO,OAAO,CAACG,MAAD,CAAP;AACP,SAHD,EAGG,UAAUC,KAAV,EAAiB;AAChB,cAAI,CAACZ,YAAY,CAACC,OAAlB,EACIQ,MAAM,CAACG,KAAD,CAAN,CADJ,KAEK,IAAIP,OAAJ,EACDA,OAAO,CAACO,KAAD,CAAP,CADC,KAGDC,OAAO,CAACD,KAAR,CAAc,mBAAd,EAAmCA,KAAnC;AACP,SAVD;AAWH,OAZgB,CAAjB;AAaA,aAAON,UAAP;AACH,KAfD;;AAgBA,WAAOH,IAAP;AACH,GAlBoB,EAkBlB,EAlBkB,CAArB;AAmBA,SAAOD,OAAP;AACH,CAzBD;;AA0BA,eAAeH,iBAAf","sourcesContent":["import { useMemo, useRef, useEffect } from 'react';\nvar useUnmountPromise = function () {\n    var refUnmounted = useRef(false);\n    useEffect(function () { return function () {\n        refUnmounted.current = true;\n    }; });\n    var wrapper = useMemo(function () {\n        var race = function (promise, onError) {\n            var newPromise = new Promise(function (resolve, reject) {\n                promise.then(function (result) {\n                    if (!refUnmounted.current)\n                        resolve(result);\n                }, function (error) {\n                    if (!refUnmounted.current)\n                        reject(error);\n                    else if (onError)\n                        onError(error);\n                    else\n                        console.error('useUnmountPromise', error);\n                });\n            });\n            return newPromise;\n        };\n        return race;\n    }, []);\n    return wrapper;\n};\nexport default useUnmountPromise;\n"]},"metadata":{},"sourceType":"module"}