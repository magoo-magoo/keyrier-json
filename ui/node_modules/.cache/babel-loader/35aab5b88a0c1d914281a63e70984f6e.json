{"ast":null,"code":"/* eslint-disable */\nimport { useLayoutEffect } from 'react';\n\nvar isFocusedElementEditable = function () {\n  var activeElement = document.activeElement,\n      body = document.body;\n\n  if (!activeElement) {\n    return false;\n  } // If not element has focus, we assume it is not editable, too.\n\n\n  if (activeElement === body) {\n    return false;\n  } // Assume <input> and <textarea> elements are editable.\n\n\n  switch (activeElement.tagName) {\n    case 'INPUT':\n    case 'TEXTAREA':\n      return true;\n  } // Check if any other focused element id editable.\n\n\n  return activeElement.hasAttribute('contenteditable');\n};\n\nvar isTypedCharGood = function (_a) {\n  var keyCode = _a.keyCode,\n      metaKey = _a.metaKey,\n      ctrlKey = _a.ctrlKey,\n      altKey = _a.altKey;\n\n  if (metaKey || ctrlKey || altKey) {\n    return false;\n  } // 0...9\n\n\n  if (keyCode >= 48 && keyCode <= 57) {\n    return true;\n  } // a...z\n\n\n  if (keyCode >= 65 && keyCode <= 90) {\n    return true;\n  } // All other keys.\n\n\n  return false;\n};\n\nvar useStartTyping = function (onStartTyping) {\n  useLayoutEffect(function () {\n    var keydown = function (event) {\n      !isFocusedElementEditable() && isTypedCharGood(event) && onStartTyping(event);\n    };\n\n    document.addEventListener('keydown', keydown);\n    return function () {\n      document.removeEventListener('keydown', keydown);\n    };\n  }, []);\n};\n\nexport default useStartTyping;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/react-use/esm/useStartTyping.js"],"names":["useLayoutEffect","isFocusedElementEditable","activeElement","document","body","tagName","hasAttribute","isTypedCharGood","_a","keyCode","metaKey","ctrlKey","altKey","useStartTyping","onStartTyping","keydown","event","addEventListener","removeEventListener"],"mappings":"AAAA;AACA,SAASA,eAAT,QAAgC,OAAhC;;AACA,IAAIC,wBAAwB,GAAG,YAAY;AACvC,MAAIC,aAAa,GAAGC,QAAQ,CAACD,aAA7B;AAAA,MAA4CE,IAAI,GAAGD,QAAQ,CAACC,IAA5D;;AACA,MAAI,CAACF,aAAL,EAAoB;AAChB,WAAO,KAAP;AACH,GAJsC,CAKvC;;;AACA,MAAIA,aAAa,KAAKE,IAAtB,EAA4B;AACxB,WAAO,KAAP;AACH,GARsC,CASvC;;;AACA,UAAQF,aAAa,CAACG,OAAtB;AACI,SAAK,OAAL;AACA,SAAK,UAAL;AACI,aAAO,IAAP;AAHR,GAVuC,CAevC;;;AACA,SAAOH,aAAa,CAACI,YAAd,CAA2B,iBAA3B,CAAP;AACH,CAjBD;;AAkBA,IAAIC,eAAe,GAAG,UAAUC,EAAV,EAAc;AAChC,MAAIC,OAAO,GAAGD,EAAE,CAACC,OAAjB;AAAA,MAA0BC,OAAO,GAAGF,EAAE,CAACE,OAAvC;AAAA,MAAgDC,OAAO,GAAGH,EAAE,CAACG,OAA7D;AAAA,MAAsEC,MAAM,GAAGJ,EAAE,CAACI,MAAlF;;AACA,MAAIF,OAAO,IAAIC,OAAX,IAAsBC,MAA1B,EAAkC;AAC9B,WAAO,KAAP;AACH,GAJ+B,CAKhC;;;AACA,MAAIH,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAAhC,EAAoC;AAChC,WAAO,IAAP;AACH,GAR+B,CAShC;;;AACA,MAAIA,OAAO,IAAI,EAAX,IAAiBA,OAAO,IAAI,EAAhC,EAAoC;AAChC,WAAO,IAAP;AACH,GAZ+B,CAahC;;;AACA,SAAO,KAAP;AACH,CAfD;;AAgBA,IAAII,cAAc,GAAG,UAAUC,aAAV,EAAyB;AAC1Cd,EAAAA,eAAe,CAAC,YAAY;AACxB,QAAIe,OAAO,GAAG,UAAUC,KAAV,EAAiB;AAC3B,OAACf,wBAAwB,EAAzB,IAA+BM,eAAe,CAACS,KAAD,CAA9C,IAAyDF,aAAa,CAACE,KAAD,CAAtE;AACH,KAFD;;AAGAb,IAAAA,QAAQ,CAACc,gBAAT,CAA0B,SAA1B,EAAqCF,OAArC;AACA,WAAO,YAAY;AACfZ,MAAAA,QAAQ,CAACe,mBAAT,CAA6B,SAA7B,EAAwCH,OAAxC;AACH,KAFD;AAGH,GARc,EAQZ,EARY,CAAf;AASH,CAVD;;AAWA,eAAeF,cAAf","sourcesContent":["/* eslint-disable */\nimport { useLayoutEffect } from 'react';\nvar isFocusedElementEditable = function () {\n    var activeElement = document.activeElement, body = document.body;\n    if (!activeElement) {\n        return false;\n    }\n    // If not element has focus, we assume it is not editable, too.\n    if (activeElement === body) {\n        return false;\n    }\n    // Assume <input> and <textarea> elements are editable.\n    switch (activeElement.tagName) {\n        case 'INPUT':\n        case 'TEXTAREA':\n            return true;\n    }\n    // Check if any other focused element id editable.\n    return activeElement.hasAttribute('contenteditable');\n};\nvar isTypedCharGood = function (_a) {\n    var keyCode = _a.keyCode, metaKey = _a.metaKey, ctrlKey = _a.ctrlKey, altKey = _a.altKey;\n    if (metaKey || ctrlKey || altKey) {\n        return false;\n    }\n    // 0...9\n    if (keyCode >= 48 && keyCode <= 57) {\n        return true;\n    }\n    // a...z\n    if (keyCode >= 65 && keyCode <= 90) {\n        return true;\n    }\n    // All other keys.\n    return false;\n};\nvar useStartTyping = function (onStartTyping) {\n    useLayoutEffect(function () {\n        var keydown = function (event) {\n            !isFocusedElementEditable() && isTypedCharGood(event) && onStartTyping(event);\n        };\n        document.addEventListener('keydown', keydown);\n        return function () {\n            document.removeEventListener('keydown', keydown);\n        };\n    }, []);\n};\nexport default useStartTyping;\n"]},"metadata":{},"sourceType":"module"}