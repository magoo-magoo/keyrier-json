{"ast":null,"code":"ace.define(\"ace/ext/elastic_tabstops_lite\", [\"require\", \"exports\", \"module\", \"ace/editor\", \"ace/config\"], function (require, exports, module) {\n  \"use strict\";\n\n  var ElasticTabstopsLite = function (editor) {\n    this.$editor = editor;\n    var self = this;\n    var changedRows = [];\n    var recordChanges = false;\n\n    this.onAfterExec = function () {\n      recordChanges = false;\n      self.processRows(changedRows);\n      changedRows = [];\n    };\n\n    this.onExec = function () {\n      recordChanges = true;\n    };\n\n    this.onChange = function (delta) {\n      if (recordChanges) {\n        if (changedRows.indexOf(delta.start.row) == -1) changedRows.push(delta.start.row);\n        if (delta.end.row != delta.start.row) changedRows.push(delta.end.row);\n      }\n    };\n  };\n\n  (function () {\n    this.processRows = function (rows) {\n      this.$inChange = true;\n      var checkedRows = [];\n\n      for (var r = 0, rowCount = rows.length; r < rowCount; r++) {\n        var row = rows[r];\n        if (checkedRows.indexOf(row) > -1) continue;\n        var cellWidthObj = this.$findCellWidthsForBlock(row);\n        var cellWidths = this.$setBlockCellWidthsToMax(cellWidthObj.cellWidths);\n        var rowIndex = cellWidthObj.firstRow;\n\n        for (var w = 0, l = cellWidths.length; w < l; w++) {\n          var widths = cellWidths[w];\n          checkedRows.push(rowIndex);\n          this.$adjustRow(rowIndex, widths);\n          rowIndex++;\n        }\n      }\n\n      this.$inChange = false;\n    };\n\n    this.$findCellWidthsForBlock = function (row) {\n      var cellWidths = [],\n          widths;\n      var rowIter = row;\n\n      while (rowIter >= 0) {\n        widths = this.$cellWidthsForRow(rowIter);\n        if (widths.length == 0) break;\n        cellWidths.unshift(widths);\n        rowIter--;\n      }\n\n      var firstRow = rowIter + 1;\n      rowIter = row;\n      var numRows = this.$editor.session.getLength();\n\n      while (rowIter < numRows - 1) {\n        rowIter++;\n        widths = this.$cellWidthsForRow(rowIter);\n        if (widths.length == 0) break;\n        cellWidths.push(widths);\n      }\n\n      return {\n        cellWidths: cellWidths,\n        firstRow: firstRow\n      };\n    };\n\n    this.$cellWidthsForRow = function (row) {\n      var selectionColumns = this.$selectionColumnsForRow(row);\n      var tabs = [-1].concat(this.$tabsForRow(row));\n      var widths = tabs.map(function (el) {\n        return 0;\n      }).slice(1);\n      var line = this.$editor.session.getLine(row);\n\n      for (var i = 0, len = tabs.length - 1; i < len; i++) {\n        var leftEdge = tabs[i] + 1;\n        var rightEdge = tabs[i + 1];\n        var rightmostSelection = this.$rightmostSelectionInCell(selectionColumns, rightEdge);\n        var cell = line.substring(leftEdge, rightEdge);\n        widths[i] = Math.max(cell.replace(/\\s+$/g, '').length, rightmostSelection - leftEdge);\n      }\n\n      return widths;\n    };\n\n    this.$selectionColumnsForRow = function (row) {\n      var selections = [],\n          cursor = this.$editor.getCursorPosition();\n\n      if (this.$editor.session.getSelection().isEmpty()) {\n        if (row == cursor.row) selections.push(cursor.column);\n      }\n\n      return selections;\n    };\n\n    this.$setBlockCellWidthsToMax = function (cellWidths) {\n      var startingNewBlock = true,\n          blockStartRow,\n          blockEndRow,\n          maxWidth;\n      var columnInfo = this.$izip_longest(cellWidths);\n\n      for (var c = 0, l = columnInfo.length; c < l; c++) {\n        var column = columnInfo[c];\n\n        if (!column.push) {\n          console.error(column);\n          continue;\n        }\n\n        column.push(NaN);\n\n        for (var r = 0, s = column.length; r < s; r++) {\n          var width = column[r];\n\n          if (startingNewBlock) {\n            blockStartRow = r;\n            maxWidth = 0;\n            startingNewBlock = false;\n          }\n\n          if (isNaN(width)) {\n            blockEndRow = r;\n\n            for (var j = blockStartRow; j < blockEndRow; j++) {\n              cellWidths[j][c] = maxWidth;\n            }\n\n            startingNewBlock = true;\n          }\n\n          maxWidth = Math.max(maxWidth, width);\n        }\n      }\n\n      return cellWidths;\n    };\n\n    this.$rightmostSelectionInCell = function (selectionColumns, cellRightEdge) {\n      var rightmost = 0;\n\n      if (selectionColumns.length) {\n        var lengths = [];\n\n        for (var s = 0, length = selectionColumns.length; s < length; s++) {\n          if (selectionColumns[s] <= cellRightEdge) lengths.push(s);else lengths.push(0);\n        }\n\n        rightmost = Math.max.apply(Math, lengths);\n      }\n\n      return rightmost;\n    };\n\n    this.$tabsForRow = function (row) {\n      var rowTabs = [],\n          line = this.$editor.session.getLine(row),\n          re = /\\t/g,\n          match;\n\n      while ((match = re.exec(line)) != null) {\n        rowTabs.push(match.index);\n      }\n\n      return rowTabs;\n    };\n\n    this.$adjustRow = function (row, widths) {\n      var rowTabs = this.$tabsForRow(row);\n      if (rowTabs.length == 0) return;\n      var bias = 0,\n          location = -1;\n      var expandedSet = this.$izip(widths, rowTabs);\n\n      for (var i = 0, l = expandedSet.length; i < l; i++) {\n        var w = expandedSet[i][0],\n            it = expandedSet[i][1];\n        location += 1 + w;\n        it += bias;\n        var difference = location - it;\n        if (difference == 0) continue;\n        var partialLine = this.$editor.session.getLine(row).substr(0, it);\n        var strippedPartialLine = partialLine.replace(/\\s*$/g, \"\");\n        var ispaces = partialLine.length - strippedPartialLine.length;\n\n        if (difference > 0) {\n          this.$editor.session.getDocument().insertInLine({\n            row: row,\n            column: it + 1\n          }, Array(difference + 1).join(\" \") + \"\\t\");\n          this.$editor.session.getDocument().removeInLine(row, it, it + 1);\n          bias += difference;\n        }\n\n        if (difference < 0 && ispaces >= -difference) {\n          this.$editor.session.getDocument().removeInLine(row, it + difference, it);\n          bias += difference;\n        }\n      }\n    };\n\n    this.$izip_longest = function (iterables) {\n      if (!iterables[0]) return [];\n      var longest = iterables[0].length;\n      var iterablesLength = iterables.length;\n\n      for (var i = 1; i < iterablesLength; i++) {\n        var iLength = iterables[i].length;\n        if (iLength > longest) longest = iLength;\n      }\n\n      var expandedSet = [];\n\n      for (var l = 0; l < longest; l++) {\n        var set = [];\n\n        for (var i = 0; i < iterablesLength; i++) {\n          if (iterables[i][l] === \"\") set.push(NaN);else set.push(iterables[i][l]);\n        }\n\n        expandedSet.push(set);\n      }\n\n      return expandedSet;\n    };\n\n    this.$izip = function (widths, tabs) {\n      var size = widths.length >= tabs.length ? tabs.length : widths.length;\n      var expandedSet = [];\n\n      for (var i = 0; i < size; i++) {\n        var set = [widths[i], tabs[i]];\n        expandedSet.push(set);\n      }\n\n      return expandedSet;\n    };\n  }).call(ElasticTabstopsLite.prototype);\n  exports.ElasticTabstopsLite = ElasticTabstopsLite;\n\n  var Editor = require(\"../editor\").Editor;\n\n  require(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    useElasticTabstops: {\n      set: function (val) {\n        if (val) {\n          if (!this.elasticTabstops) this.elasticTabstops = new ElasticTabstopsLite(this);\n          this.commands.on(\"afterExec\", this.elasticTabstops.onAfterExec);\n          this.commands.on(\"exec\", this.elasticTabstops.onExec);\n          this.on(\"change\", this.elasticTabstops.onChange);\n        } else if (this.elasticTabstops) {\n          this.commands.removeListener(\"afterExec\", this.elasticTabstops.onAfterExec);\n          this.commands.removeListener(\"exec\", this.elasticTabstops.onExec);\n          this.removeListener(\"change\", this.elasticTabstops.onChange);\n        }\n      }\n    }\n  });\n});\n\n(function () {\n  ace.require([\"ace/ext/elastic_tabstops_lite\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/ext-elastic_tabstops_lite.js"],"names":["ace","define","require","exports","module","ElasticTabstopsLite","editor","$editor","self","changedRows","recordChanges","onAfterExec","processRows","onExec","onChange","delta","indexOf","start","row","push","end","rows","$inChange","checkedRows","r","rowCount","length","cellWidthObj","$findCellWidthsForBlock","cellWidths","$setBlockCellWidthsToMax","rowIndex","firstRow","w","l","widths","$adjustRow","rowIter","$cellWidthsForRow","unshift","numRows","session","getLength","selectionColumns","$selectionColumnsForRow","tabs","concat","$tabsForRow","map","el","slice","line","getLine","i","len","leftEdge","rightEdge","rightmostSelection","$rightmostSelectionInCell","cell","substring","Math","max","replace","selections","cursor","getCursorPosition","getSelection","isEmpty","column","startingNewBlock","blockStartRow","blockEndRow","maxWidth","columnInfo","$izip_longest","c","console","error","NaN","s","width","isNaN","j","cellRightEdge","rightmost","lengths","apply","rowTabs","re","match","exec","index","bias","location","expandedSet","$izip","it","difference","partialLine","substr","strippedPartialLine","ispaces","getDocument","insertInLine","Array","join","removeInLine","iterables","longest","iterablesLength","iLength","set","size","call","prototype","Editor","defineOptions","useElasticTabstops","val","elasticTabstops","commands","on","removeListener","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,+BAAX,EAA2C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,YAA9B,EAA2C,YAA3C,CAA3C,EAAqG,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACxI;;AAEA,MAAIC,mBAAmB,GAAG,UAASC,MAAT,EAAiB;AACvC,SAAKC,OAAL,GAAeD,MAAf;AACA,QAAIE,IAAI,GAAG,IAAX;AACA,QAAIC,WAAW,GAAG,EAAlB;AACA,QAAIC,aAAa,GAAG,KAApB;;AACA,SAAKC,WAAL,GAAmB,YAAW;AAC1BD,MAAAA,aAAa,GAAG,KAAhB;AACAF,MAAAA,IAAI,CAACI,WAAL,CAAiBH,WAAjB;AACAA,MAAAA,WAAW,GAAG,EAAd;AACH,KAJD;;AAKA,SAAKI,MAAL,GAAc,YAAW;AACrBH,MAAAA,aAAa,GAAG,IAAhB;AACH,KAFD;;AAGA,SAAKI,QAAL,GAAgB,UAASC,KAAT,EAAgB;AAC5B,UAAIL,aAAJ,EAAmB;AACf,YAAID,WAAW,CAACO,OAAZ,CAAoBD,KAAK,CAACE,KAAN,CAAYC,GAAhC,KAAwC,CAAC,CAA7C,EACIT,WAAW,CAACU,IAAZ,CAAiBJ,KAAK,CAACE,KAAN,CAAYC,GAA7B;AACJ,YAAIH,KAAK,CAACK,GAAN,CAAUF,GAAV,IAAiBH,KAAK,CAACE,KAAN,CAAYC,GAAjC,EACIT,WAAW,CAACU,IAAZ,CAAiBJ,KAAK,CAACK,GAAN,CAAUF,GAA3B;AACP;AACJ,KAPD;AAQH,GArBD;;AAuBA,GAAC,YAAW;AACR,SAAKN,WAAL,GAAmB,UAASS,IAAT,EAAe;AAC9B,WAAKC,SAAL,GAAiB,IAAjB;AACA,UAAIC,WAAW,GAAG,EAAlB;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,QAAQ,GAAGJ,IAAI,CAACK,MAAhC,EAAwCF,CAAC,GAAGC,QAA5C,EAAsDD,CAAC,EAAvD,EAA2D;AACvD,YAAIN,GAAG,GAAGG,IAAI,CAACG,CAAD,CAAd;AAEA,YAAID,WAAW,CAACP,OAAZ,CAAoBE,GAApB,IAA2B,CAAC,CAAhC,EACI;AAEJ,YAAIS,YAAY,GAAG,KAAKC,uBAAL,CAA6BV,GAA7B,CAAnB;AACA,YAAIW,UAAU,GAAG,KAAKC,wBAAL,CAA8BH,YAAY,CAACE,UAA3C,CAAjB;AACA,YAAIE,QAAQ,GAAGJ,YAAY,CAACK,QAA5B;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGL,UAAU,CAACH,MAA/B,EAAuCO,CAAC,GAAGC,CAA3C,EAA8CD,CAAC,EAA/C,EAAmD;AAC/C,cAAIE,MAAM,GAAGN,UAAU,CAACI,CAAD,CAAvB;AACAV,UAAAA,WAAW,CAACJ,IAAZ,CAAiBY,QAAjB;AACA,eAAKK,UAAL,CAAgBL,QAAhB,EAA0BI,MAA1B;AACAJ,UAAAA,QAAQ;AACX;AACJ;;AACD,WAAKT,SAAL,GAAiB,KAAjB;AACH,KAtBD;;AAwBA,SAAKM,uBAAL,GAA+B,UAASV,GAAT,EAAc;AACzC,UAAIW,UAAU,GAAG,EAAjB;AAAA,UAAqBM,MAArB;AACA,UAAIE,OAAO,GAAGnB,GAAd;;AACA,aAAOmB,OAAO,IAAI,CAAlB,EAAqB;AACjBF,QAAAA,MAAM,GAAG,KAAKG,iBAAL,CAAuBD,OAAvB,CAAT;AACA,YAAIF,MAAM,CAACT,MAAP,IAAiB,CAArB,EACI;AAEJG,QAAAA,UAAU,CAACU,OAAX,CAAmBJ,MAAnB;AACAE,QAAAA,OAAO;AACV;;AACD,UAAIL,QAAQ,GAAGK,OAAO,GAAG,CAAzB;AACAA,MAAAA,OAAO,GAAGnB,GAAV;AACA,UAAIsB,OAAO,GAAG,KAAKjC,OAAL,CAAakC,OAAb,CAAqBC,SAArB,EAAd;;AAEA,aAAOL,OAAO,GAAGG,OAAO,GAAG,CAA3B,EAA8B;AAC1BH,QAAAA,OAAO;AAEPF,QAAAA,MAAM,GAAG,KAAKG,iBAAL,CAAuBD,OAAvB,CAAT;AACA,YAAIF,MAAM,CAACT,MAAP,IAAiB,CAArB,EACI;AAEJG,QAAAA,UAAU,CAACV,IAAX,CAAgBgB,MAAhB;AACH;;AAED,aAAO;AAAEN,QAAAA,UAAU,EAAEA,UAAd;AAA0BG,QAAAA,QAAQ,EAAEA;AAApC,OAAP;AACH,KA1BD;;AA4BA,SAAKM,iBAAL,GAAyB,UAASpB,GAAT,EAAc;AACnC,UAAIyB,gBAAgB,GAAG,KAAKC,uBAAL,CAA6B1B,GAA7B,CAAvB;AAEA,UAAI2B,IAAI,GAAG,CAAC,CAAC,CAAF,EAAKC,MAAL,CAAY,KAAKC,WAAL,CAAiB7B,GAAjB,CAAZ,CAAX;AACA,UAAIiB,MAAM,GAAGU,IAAI,CAACG,GAAL,CAAS,UAASC,EAAT,EAAa;AAAE,eAAO,CAAP;AAAW,OAAnC,EAAsCC,KAAtC,CAA4C,CAA5C,CAAb;AACA,UAAIC,IAAI,GAAG,KAAK5C,OAAL,CAAakC,OAAb,CAAqBW,OAArB,CAA6BlC,GAA7B,CAAX;;AAEA,WAAK,IAAImC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGT,IAAI,CAACnB,MAAL,GAAc,CAApC,EAAuC2B,CAAC,GAAGC,GAA3C,EAAgDD,CAAC,EAAjD,EAAqD;AACjD,YAAIE,QAAQ,GAAGV,IAAI,CAACQ,CAAD,CAAJ,GAAQ,CAAvB;AACA,YAAIG,SAAS,GAAGX,IAAI,CAACQ,CAAC,GAAC,CAAH,CAApB;AAEA,YAAII,kBAAkB,GAAG,KAAKC,yBAAL,CAA+Bf,gBAA/B,EAAiDa,SAAjD,CAAzB;AACA,YAAIG,IAAI,GAAGR,IAAI,CAACS,SAAL,CAAeL,QAAf,EAAyBC,SAAzB,CAAX;AACArB,QAAAA,MAAM,CAACkB,CAAD,CAAN,GAAYQ,IAAI,CAACC,GAAL,CAASH,IAAI,CAACI,OAAL,CAAa,OAAb,EAAqB,EAArB,EAAyBrC,MAAlC,EAA0C+B,kBAAkB,GAAGF,QAA/D,CAAZ;AACH;;AAED,aAAOpB,MAAP;AACH,KAjBD;;AAmBA,SAAKS,uBAAL,GAA+B,UAAS1B,GAAT,EAAc;AACzC,UAAI8C,UAAU,GAAG,EAAjB;AAAA,UAAqBC,MAAM,GAAG,KAAK1D,OAAL,CAAa2D,iBAAb,EAA9B;;AACA,UAAI,KAAK3D,OAAL,CAAakC,OAAb,CAAqB0B,YAArB,GAAoCC,OAApC,EAAJ,EAAmD;AAC/C,YAAIlD,GAAG,IAAI+C,MAAM,CAAC/C,GAAlB,EACI8C,UAAU,CAAC7C,IAAX,CAAgB8C,MAAM,CAACI,MAAvB;AACP;;AAED,aAAOL,UAAP;AACH,KARD;;AAUA,SAAKlC,wBAAL,GAAgC,UAASD,UAAT,EAAqB;AACjD,UAAIyC,gBAAgB,GAAG,IAAvB;AAAA,UAA6BC,aAA7B;AAAA,UAA4CC,WAA5C;AAAA,UAAyDC,QAAzD;AACA,UAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmB9C,UAAnB,CAAjB;;AAEA,WAAK,IAAI+C,CAAC,GAAG,CAAR,EAAW1C,CAAC,GAAGwC,UAAU,CAAChD,MAA/B,EAAuCkD,CAAC,GAAG1C,CAA3C,EAA8C0C,CAAC,EAA/C,EAAmD;AAC/C,YAAIP,MAAM,GAAGK,UAAU,CAACE,CAAD,CAAvB;;AACA,YAAI,CAACP,MAAM,CAAClD,IAAZ,EAAkB;AACd0D,UAAAA,OAAO,CAACC,KAAR,CAAcT,MAAd;AACA;AACH;;AACDA,QAAAA,MAAM,CAAClD,IAAP,CAAY4D,GAAZ;;AAEA,aAAK,IAAIvD,CAAC,GAAG,CAAR,EAAWwD,CAAC,GAAGX,MAAM,CAAC3C,MAA3B,EAAmCF,CAAC,GAAGwD,CAAvC,EAA0CxD,CAAC,EAA3C,EAA+C;AAC3C,cAAIyD,KAAK,GAAGZ,MAAM,CAAC7C,CAAD,CAAlB;;AACA,cAAI8C,gBAAJ,EAAsB;AAClBC,YAAAA,aAAa,GAAG/C,CAAhB;AACAiD,YAAAA,QAAQ,GAAG,CAAX;AACAH,YAAAA,gBAAgB,GAAG,KAAnB;AACH;;AACD,cAAIY,KAAK,CAACD,KAAD,CAAT,EAAkB;AACdT,YAAAA,WAAW,GAAGhD,CAAd;;AAEA,iBAAK,IAAI2D,CAAC,GAAGZ,aAAb,EAA4BY,CAAC,GAAGX,WAAhC,EAA6CW,CAAC,EAA9C,EAAkD;AAC9CtD,cAAAA,UAAU,CAACsD,CAAD,CAAV,CAAcP,CAAd,IAAmBH,QAAnB;AACH;;AACDH,YAAAA,gBAAgB,GAAG,IAAnB;AACH;;AAEDG,UAAAA,QAAQ,GAAGZ,IAAI,CAACC,GAAL,CAASW,QAAT,EAAmBQ,KAAnB,CAAX;AACH;AACJ;;AAED,aAAOpD,UAAP;AACH,KAjCD;;AAmCA,SAAK6B,yBAAL,GAAiC,UAASf,gBAAT,EAA2ByC,aAA3B,EAA0C;AACvE,UAAIC,SAAS,GAAG,CAAhB;;AAEA,UAAI1C,gBAAgB,CAACjB,MAArB,EAA6B;AACzB,YAAI4D,OAAO,GAAG,EAAd;;AACA,aAAK,IAAIN,CAAC,GAAG,CAAR,EAAWtD,MAAM,GAAGiB,gBAAgB,CAACjB,MAA1C,EAAkDsD,CAAC,GAAGtD,MAAtD,EAA8DsD,CAAC,EAA/D,EAAmE;AAC/D,cAAIrC,gBAAgB,CAACqC,CAAD,CAAhB,IAAuBI,aAA3B,EACIE,OAAO,CAACnE,IAAR,CAAa6D,CAAb,EADJ,KAGIM,OAAO,CAACnE,IAAR,CAAa,CAAb;AACP;;AACDkE,QAAAA,SAAS,GAAGxB,IAAI,CAACC,GAAL,CAASyB,KAAT,CAAe1B,IAAf,EAAqByB,OAArB,CAAZ;AACH;;AAED,aAAOD,SAAP;AACH,KAfD;;AAiBA,SAAKtC,WAAL,GAAmB,UAAS7B,GAAT,EAAc;AAC7B,UAAIsE,OAAO,GAAG,EAAd;AAAA,UAAkBrC,IAAI,GAAG,KAAK5C,OAAL,CAAakC,OAAb,CAAqBW,OAArB,CAA6BlC,GAA7B,CAAzB;AAAA,UACIuE,EAAE,GAAG,KADT;AAAA,UACgBC,KADhB;;AAGA,aAAO,CAACA,KAAK,GAAGD,EAAE,CAACE,IAAH,CAAQxC,IAAR,CAAT,KAA2B,IAAlC,EAAwC;AACpCqC,QAAAA,OAAO,CAACrE,IAAR,CAAauE,KAAK,CAACE,KAAnB;AACH;;AAED,aAAOJ,OAAP;AACH,KATD;;AAWA,SAAKpD,UAAL,GAAkB,UAASlB,GAAT,EAAciB,MAAd,EAAsB;AACpC,UAAIqD,OAAO,GAAG,KAAKzC,WAAL,CAAiB7B,GAAjB,CAAd;AAEA,UAAIsE,OAAO,CAAC9D,MAAR,IAAkB,CAAtB,EACI;AAEJ,UAAImE,IAAI,GAAG,CAAX;AAAA,UAAcC,QAAQ,GAAG,CAAC,CAA1B;AACA,UAAIC,WAAW,GAAG,KAAKC,KAAL,CAAW7D,MAAX,EAAmBqD,OAAnB,CAAlB;;AAEA,WAAK,IAAInC,CAAC,GAAG,CAAR,EAAWnB,CAAC,GAAG6D,WAAW,CAACrE,MAAhC,EAAwC2B,CAAC,GAAGnB,CAA5C,EAA+CmB,CAAC,EAAhD,EAAoD;AAChD,YAAIpB,CAAC,GAAG8D,WAAW,CAAC1C,CAAD,CAAX,CAAe,CAAf,CAAR;AAAA,YAA2B4C,EAAE,GAAGF,WAAW,CAAC1C,CAAD,CAAX,CAAe,CAAf,CAAhC;AACAyC,QAAAA,QAAQ,IAAI,IAAI7D,CAAhB;AACAgE,QAAAA,EAAE,IAAIJ,IAAN;AACA,YAAIK,UAAU,GAAGJ,QAAQ,GAAGG,EAA5B;AAEA,YAAIC,UAAU,IAAI,CAAlB,EACI;AAEJ,YAAIC,WAAW,GAAG,KAAK5F,OAAL,CAAakC,OAAb,CAAqBW,OAArB,CAA6BlC,GAA7B,EAAkCkF,MAAlC,CAAyC,CAAzC,EAA4CH,EAA5C,CAAlB;AACA,YAAII,mBAAmB,GAAGF,WAAW,CAACpC,OAAZ,CAAoB,OAApB,EAA6B,EAA7B,CAA1B;AACA,YAAIuC,OAAO,GAAGH,WAAW,CAACzE,MAAZ,GAAqB2E,mBAAmB,CAAC3E,MAAvD;;AAEA,YAAIwE,UAAU,GAAG,CAAjB,EAAoB;AAChB,eAAK3F,OAAL,CAAakC,OAAb,CAAqB8D,WAArB,GAAmCC,YAAnC,CAAgD;AAACtF,YAAAA,GAAG,EAAEA,GAAN;AAAWmD,YAAAA,MAAM,EAAE4B,EAAE,GAAG;AAAxB,WAAhD,EAA4EQ,KAAK,CAACP,UAAU,GAAG,CAAd,CAAL,CAAsBQ,IAAtB,CAA2B,GAA3B,IAAkC,IAA9G;AACA,eAAKnG,OAAL,CAAakC,OAAb,CAAqB8D,WAArB,GAAmCI,YAAnC,CAAgDzF,GAAhD,EAAqD+E,EAArD,EAAyDA,EAAE,GAAG,CAA9D;AAEAJ,UAAAA,IAAI,IAAIK,UAAR;AACH;;AAED,YAAIA,UAAU,GAAG,CAAb,IAAkBI,OAAO,IAAI,CAACJ,UAAlC,EAA8C;AAC1C,eAAK3F,OAAL,CAAakC,OAAb,CAAqB8D,WAArB,GAAmCI,YAAnC,CAAgDzF,GAAhD,EAAqD+E,EAAE,GAAGC,UAA1D,EAAsED,EAAtE;AACAJ,UAAAA,IAAI,IAAIK,UAAR;AACH;AACJ;AACJ,KAlCD;;AAmCA,SAAKvB,aAAL,GAAqB,UAASiC,SAAT,EAAoB;AACrC,UAAI,CAACA,SAAS,CAAC,CAAD,CAAd,EACI,OAAO,EAAP;AACJ,UAAIC,OAAO,GAAGD,SAAS,CAAC,CAAD,CAAT,CAAalF,MAA3B;AACA,UAAIoF,eAAe,GAAGF,SAAS,CAAClF,MAAhC;;AAEA,WAAK,IAAI2B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyD,eAApB,EAAqCzD,CAAC,EAAtC,EAA0C;AACtC,YAAI0D,OAAO,GAAGH,SAAS,CAACvD,CAAD,CAAT,CAAa3B,MAA3B;AACA,YAAIqF,OAAO,GAAGF,OAAd,EACIA,OAAO,GAAGE,OAAV;AACP;;AAED,UAAIhB,WAAW,GAAG,EAAlB;;AAEA,WAAK,IAAI7D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2E,OAApB,EAA6B3E,CAAC,EAA9B,EAAkC;AAC9B,YAAI8E,GAAG,GAAG,EAAV;;AACA,aAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyD,eAApB,EAAqCzD,CAAC,EAAtC,EAA0C;AACtC,cAAIuD,SAAS,CAACvD,CAAD,CAAT,CAAanB,CAAb,MAAoB,EAAxB,EACI8E,GAAG,CAAC7F,IAAJ,CAAS4D,GAAT,EADJ,KAGIiC,GAAG,CAAC7F,IAAJ,CAASyF,SAAS,CAACvD,CAAD,CAAT,CAAanB,CAAb,CAAT;AACP;;AAED6D,QAAAA,WAAW,CAAC5E,IAAZ,CAAiB6F,GAAjB;AACH;;AAGD,aAAOjB,WAAP;AACH,KA5BD;;AA6BA,SAAKC,KAAL,GAAa,UAAS7D,MAAT,EAAiBU,IAAjB,EAAuB;AAChC,UAAIoE,IAAI,GAAG9E,MAAM,CAACT,MAAP,IAAiBmB,IAAI,CAACnB,MAAtB,GAA+BmB,IAAI,CAACnB,MAApC,GAA6CS,MAAM,CAACT,MAA/D;AAEA,UAAIqE,WAAW,GAAG,EAAlB;;AACA,WAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4D,IAApB,EAA0B5D,CAAC,EAA3B,EAA+B;AAC3B,YAAI2D,GAAG,GAAG,CAAE7E,MAAM,CAACkB,CAAD,CAAR,EAAaR,IAAI,CAACQ,CAAD,CAAjB,CAAV;AACA0C,QAAAA,WAAW,CAAC5E,IAAZ,CAAiB6F,GAAjB;AACH;;AACD,aAAOjB,WAAP;AACH,KATD;AAWH,GA5ND,EA4NGmB,IA5NH,CA4NQ7G,mBAAmB,CAAC8G,SA5N5B;AA8NAhH,EAAAA,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AAEA,MAAI+G,MAAM,GAAGlH,OAAO,CAAC,WAAD,CAAP,CAAqBkH,MAAlC;;AACAlH,EAAAA,OAAO,CAAC,WAAD,CAAP,CAAqBmH,aAArB,CAAmCD,MAAM,CAACD,SAA1C,EAAqD,QAArD,EAA+D;AAC3DG,IAAAA,kBAAkB,EAAE;AAChBN,MAAAA,GAAG,EAAE,UAASO,GAAT,EAAc;AACf,YAAIA,GAAJ,EAAS;AACL,cAAI,CAAC,KAAKC,eAAV,EACI,KAAKA,eAAL,GAAuB,IAAInH,mBAAJ,CAAwB,IAAxB,CAAvB;AACJ,eAAKoH,QAAL,CAAcC,EAAd,CAAiB,WAAjB,EAA8B,KAAKF,eAAL,CAAqB7G,WAAnD;AACA,eAAK8G,QAAL,CAAcC,EAAd,CAAiB,MAAjB,EAAyB,KAAKF,eAAL,CAAqB3G,MAA9C;AACA,eAAK6G,EAAL,CAAQ,QAAR,EAAkB,KAAKF,eAAL,CAAqB1G,QAAvC;AACH,SAND,MAMO,IAAI,KAAK0G,eAAT,EAA0B;AAC7B,eAAKC,QAAL,CAAcE,cAAd,CAA6B,WAA7B,EAA0C,KAAKH,eAAL,CAAqB7G,WAA/D;AACA,eAAK8G,QAAL,CAAcE,cAAd,CAA6B,MAA7B,EAAqC,KAAKH,eAAL,CAAqB3G,MAA1D;AACA,eAAK8G,cAAL,CAAoB,QAApB,EAA8B,KAAKH,eAAL,CAAqB1G,QAAnD;AACH;AACJ;AAbe;AADuC,GAA/D;AAkBC,CA7QD;;AA6QmB,CAAC,YAAW;AACXd,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,+BAAD,CAAZ,EAA+C,UAAS0H,CAAT,EAAY;AACvD,QAAI,OAAOxH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiByH,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/ext/elastic_tabstops_lite\",[\"require\",\"exports\",\"module\",\"ace/editor\",\"ace/config\"], function(require, exports, module) {\n\"use strict\";\n\nvar ElasticTabstopsLite = function(editor) {\n    this.$editor = editor;\n    var self = this;\n    var changedRows = [];\n    var recordChanges = false;\n    this.onAfterExec = function() {\n        recordChanges = false;\n        self.processRows(changedRows);\n        changedRows = [];\n    };\n    this.onExec = function() {\n        recordChanges = true;\n    };\n    this.onChange = function(delta) {\n        if (recordChanges) {\n            if (changedRows.indexOf(delta.start.row) == -1)\n                changedRows.push(delta.start.row);\n            if (delta.end.row != delta.start.row)\n                changedRows.push(delta.end.row);\n        }\n    };\n};\n\n(function() {\n    this.processRows = function(rows) {\n        this.$inChange = true;\n        var checkedRows = [];\n\n        for (var r = 0, rowCount = rows.length; r < rowCount; r++) {\n            var row = rows[r];\n\n            if (checkedRows.indexOf(row) > -1)\n                continue;\n\n            var cellWidthObj = this.$findCellWidthsForBlock(row);\n            var cellWidths = this.$setBlockCellWidthsToMax(cellWidthObj.cellWidths);\n            var rowIndex = cellWidthObj.firstRow;\n\n            for (var w = 0, l = cellWidths.length; w < l; w++) {\n                var widths = cellWidths[w];\n                checkedRows.push(rowIndex);\n                this.$adjustRow(rowIndex, widths);\n                rowIndex++;\n            }\n        }\n        this.$inChange = false;\n    };\n\n    this.$findCellWidthsForBlock = function(row) {\n        var cellWidths = [], widths;\n        var rowIter = row;\n        while (rowIter >= 0) {\n            widths = this.$cellWidthsForRow(rowIter);\n            if (widths.length == 0)\n                break;\n\n            cellWidths.unshift(widths);\n            rowIter--;\n        }\n        var firstRow = rowIter + 1;\n        rowIter = row;\n        var numRows = this.$editor.session.getLength();\n\n        while (rowIter < numRows - 1) {\n            rowIter++;\n\n            widths = this.$cellWidthsForRow(rowIter);\n            if (widths.length == 0)\n                break;\n\n            cellWidths.push(widths);\n        }\n\n        return { cellWidths: cellWidths, firstRow: firstRow };\n    };\n\n    this.$cellWidthsForRow = function(row) {\n        var selectionColumns = this.$selectionColumnsForRow(row);\n\n        var tabs = [-1].concat(this.$tabsForRow(row));\n        var widths = tabs.map(function(el) { return 0; } ).slice(1);\n        var line = this.$editor.session.getLine(row);\n\n        for (var i = 0, len = tabs.length - 1; i < len; i++) {\n            var leftEdge = tabs[i]+1;\n            var rightEdge = tabs[i+1];\n\n            var rightmostSelection = this.$rightmostSelectionInCell(selectionColumns, rightEdge);\n            var cell = line.substring(leftEdge, rightEdge);\n            widths[i] = Math.max(cell.replace(/\\s+$/g,'').length, rightmostSelection - leftEdge);\n        }\n\n        return widths;\n    };\n\n    this.$selectionColumnsForRow = function(row) {\n        var selections = [], cursor = this.$editor.getCursorPosition();\n        if (this.$editor.session.getSelection().isEmpty()) {\n            if (row == cursor.row)\n                selections.push(cursor.column);\n        }\n\n        return selections;\n    };\n\n    this.$setBlockCellWidthsToMax = function(cellWidths) {\n        var startingNewBlock = true, blockStartRow, blockEndRow, maxWidth;\n        var columnInfo = this.$izip_longest(cellWidths);\n\n        for (var c = 0, l = columnInfo.length; c < l; c++) {\n            var column = columnInfo[c];\n            if (!column.push) {\n                console.error(column);\n                continue;\n            }\n            column.push(NaN);\n\n            for (var r = 0, s = column.length; r < s; r++) {\n                var width = column[r];\n                if (startingNewBlock) {\n                    blockStartRow = r;\n                    maxWidth = 0;\n                    startingNewBlock = false;\n                }\n                if (isNaN(width)) {\n                    blockEndRow = r;\n\n                    for (var j = blockStartRow; j < blockEndRow; j++) {\n                        cellWidths[j][c] = maxWidth;\n                    }\n                    startingNewBlock = true;\n                }\n\n                maxWidth = Math.max(maxWidth, width);\n            }\n        }\n\n        return cellWidths;\n    };\n\n    this.$rightmostSelectionInCell = function(selectionColumns, cellRightEdge) {\n        var rightmost = 0;\n\n        if (selectionColumns.length) {\n            var lengths = [];\n            for (var s = 0, length = selectionColumns.length; s < length; s++) {\n                if (selectionColumns[s] <= cellRightEdge)\n                    lengths.push(s);\n                else\n                    lengths.push(0);\n            }\n            rightmost = Math.max.apply(Math, lengths);\n        }\n\n        return rightmost;\n    };\n\n    this.$tabsForRow = function(row) {\n        var rowTabs = [], line = this.$editor.session.getLine(row),\n            re = /\\t/g, match;\n\n        while ((match = re.exec(line)) != null) {\n            rowTabs.push(match.index);\n        }\n\n        return rowTabs;\n    };\n\n    this.$adjustRow = function(row, widths) {\n        var rowTabs = this.$tabsForRow(row);\n\n        if (rowTabs.length == 0)\n            return;\n\n        var bias = 0, location = -1;\n        var expandedSet = this.$izip(widths, rowTabs);\n\n        for (var i = 0, l = expandedSet.length; i < l; i++) {\n            var w = expandedSet[i][0], it = expandedSet[i][1];\n            location += 1 + w;\n            it += bias;\n            var difference = location - it;\n\n            if (difference == 0)\n                continue;\n\n            var partialLine = this.$editor.session.getLine(row).substr(0, it );\n            var strippedPartialLine = partialLine.replace(/\\s*$/g, \"\");\n            var ispaces = partialLine.length - strippedPartialLine.length;\n\n            if (difference > 0) {\n                this.$editor.session.getDocument().insertInLine({row: row, column: it + 1}, Array(difference + 1).join(\" \") + \"\\t\");\n                this.$editor.session.getDocument().removeInLine(row, it, it + 1);\n\n                bias += difference;\n            }\n\n            if (difference < 0 && ispaces >= -difference) {\n                this.$editor.session.getDocument().removeInLine(row, it + difference, it);\n                bias += difference;\n            }\n        }\n    };\n    this.$izip_longest = function(iterables) {\n        if (!iterables[0])\n            return [];\n        var longest = iterables[0].length;\n        var iterablesLength = iterables.length;\n\n        for (var i = 1; i < iterablesLength; i++) {\n            var iLength = iterables[i].length;\n            if (iLength > longest)\n                longest = iLength;\n        }\n\n        var expandedSet = [];\n\n        for (var l = 0; l < longest; l++) {\n            var set = [];\n            for (var i = 0; i < iterablesLength; i++) {\n                if (iterables[i][l] === \"\")\n                    set.push(NaN);\n                else\n                    set.push(iterables[i][l]);\n            }\n\n            expandedSet.push(set);\n        }\n\n\n        return expandedSet;\n    };\n    this.$izip = function(widths, tabs) {\n        var size = widths.length >= tabs.length ? tabs.length : widths.length;\n\n        var expandedSet = [];\n        for (var i = 0; i < size; i++) {\n            var set = [ widths[i], tabs[i] ];\n            expandedSet.push(set);\n        }\n        return expandedSet;\n    };\n\n}).call(ElasticTabstopsLite.prototype);\n\nexports.ElasticTabstopsLite = ElasticTabstopsLite;\n\nvar Editor = require(\"../editor\").Editor;\nrequire(\"../config\").defineOptions(Editor.prototype, \"editor\", {\n    useElasticTabstops: {\n        set: function(val) {\n            if (val) {\n                if (!this.elasticTabstops)\n                    this.elasticTabstops = new ElasticTabstopsLite(this);\n                this.commands.on(\"afterExec\", this.elasticTabstops.onAfterExec);\n                this.commands.on(\"exec\", this.elasticTabstops.onExec);\n                this.on(\"change\", this.elasticTabstops.onChange);\n            } else if (this.elasticTabstops) {\n                this.commands.removeListener(\"afterExec\", this.elasticTabstops.onAfterExec);\n                this.commands.removeListener(\"exec\", this.elasticTabstops.onExec);\n                this.removeListener(\"change\", this.elasticTabstops.onChange);\n            }\n        }\n    }\n});\n\n});                (function() {\n                    ace.require([\"ace/ext/elastic_tabstops_lite\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}