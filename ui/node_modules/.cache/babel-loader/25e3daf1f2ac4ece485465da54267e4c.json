{"ast":null,"code":"ace.define(\"ace/mode/prisma_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var PrismaHighlightRules = function () {\n    this.$rules = {\n      start: [{\n        include: \"#triple_comment\"\n      }, {\n        include: \"#double_comment\"\n      }, {\n        include: \"#model_block_definition\"\n      }, {\n        include: \"#config_block_definition\"\n      }, {\n        include: \"#enum_block_definition\"\n      }, {\n        include: \"#type_definition\"\n      }],\n      \"#model_block_definition\": [{\n        token: [\"source.prisma.embedded.source\", \"storage.type.model.prisma\", \"source.prisma.embedded.source\", \"entity.name.type.model.prisma\", \"source.prisma.embedded.source\", \"punctuation.definition.tag.prisma\"],\n        regex: /^(\\s*)(model|type)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#triple_comment\"\n        }, {\n          include: \"#double_comment\"\n        }, {\n          include: \"#field_definition\"\n        }, {\n          defaultToken: \"source.prisma.embedded.source\"\n        }]\n      }],\n      \"#enum_block_definition\": [{\n        token: [\"source.prisma.embedded.source\", \"storage.type.enum.prisma\", \"source.prisma.embedded.source\", \"entity.name.type.enum.prisma\", \"source.prisma.embedded.source\", \"punctuation.definition.tag.prisma\"],\n        regex: /^(\\s*)(enum)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#triple_comment\"\n        }, {\n          include: \"#double_comment\"\n        }, {\n          include: \"#enum_value_definition\"\n        }, {\n          defaultToken: \"source.prisma.embedded.source\"\n        }]\n      }],\n      \"#config_block_definition\": [{\n        token: [\"source.prisma.embedded.source\", \"storage.type.config.prisma\", \"source.prisma.embedded.source\", \"entity.name.type.config.prisma\", \"source.prisma.embedded.source\", \"punctuation.definition.tag.prisma\"],\n        regex: /^(\\s*)(generator|datasource)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n        push: [{\n          token: \"source.prisma.embedded.source\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#triple_comment\"\n        }, {\n          include: \"#double_comment\"\n        }, {\n          include: \"#assignment\"\n        }, {\n          defaultToken: \"source.prisma.embedded.source\"\n        }]\n      }],\n      \"#assignment\": [{\n        token: [\"text\", \"variable.other.assignment.prisma\", \"text\", \"keyword.operator.terraform\", \"text\"],\n        regex: /^(\\s*)(\\w+)(\\s*)(=)(\\s*)/,\n        push: [{\n          token: \"text\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          include: \"#double_comment_inline\"\n        }]\n      }],\n      \"#field_definition\": [{\n        token: [\"text\", \"variable.other.assignment.prisma\", \"invalid.illegal.colon.prisma\", \"text\", \"support.type.primitive.prisma\", \"keyword.operator.list_type.prisma\", \"keyword.operator.optional_type.prisma\", \"invalid.illegal.required_type.prisma\"],\n        regex: /^(\\s*)(\\w+)((?:\\s*:)?)(\\s+)(\\w+)((?:\\[\\])?)((?:\\?)?)((?:\\!)?)/\n      }, {\n        include: \"#attribute_with_arguments\"\n      }, {\n        include: \"#attribute\"\n      }],\n      \"#type_definition\": [{\n        token: [\"text\", \"storage.type.type.prisma\", \"text\", \"entity.name.type.type.prisma\", \"text\", \"support.type.primitive.prisma\"],\n        regex: /^(\\s*)(type)(\\s+)(\\w+)(\\s*=\\s*)(\\w+)/\n      }, {\n        include: \"#attribute_with_arguments\"\n      }, {\n        include: \"#attribute\"\n      }],\n      \"#enum_value_definition\": [{\n        token: [\"text\", \"variable.other.assignment.prisma\", \"text\"],\n        regex: /^(\\s*)(\\w+)(\\s*$)/\n      }, {\n        include: \"#attribute_with_arguments\"\n      }, {\n        include: \"#attribute\"\n      }],\n      \"#attribute_with_arguments\": [{\n        token: [\"entity.name.function.attribute.prisma\", \"punctuation.definition.tag.prisma\"],\n        regex: /(@@?[\\w\\.]+)(\\()/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#named_argument\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.prisma.attribute.with_arguments\"\n        }]\n      }],\n      \"#attribute\": [{\n        token: \"entity.name.function.attribute.prisma\",\n        regex: /@@?[\\w\\.]+/\n      }],\n      \"#array\": [{\n        token: \"source.prisma.array\",\n        regex: /\\[/,\n        push: [{\n          token: \"source.prisma.array\",\n          regex: /\\]/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.prisma.array\"\n        }]\n      }],\n      \"#value\": [{\n        include: \"#array\"\n      }, {\n        include: \"#functional\"\n      }, {\n        include: \"#literal\"\n      }],\n      \"#functional\": [{\n        token: [\"support.function.functional.prisma\", \"punctuation.definition.tag.prisma\"],\n        regex: /(\\w+)(\\()/,\n        push: [{\n          token: \"punctuation.definition.tag.prisma\",\n          regex: /\\)/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.prisma.functional\"\n        }]\n      }],\n      \"#literal\": [{\n        include: \"#boolean\"\n      }, {\n        include: \"#number\"\n      }, {\n        include: \"#double_quoted_string\"\n      }, {\n        include: \"#identifier\"\n      }],\n      \"#identifier\": [{\n        token: \"support.constant.constant.prisma\",\n        regex: /\\b(?:\\w)+\\b/\n      }],\n      \"#map_key\": [{\n        token: [\"variable.parameter.key.prisma\", \"text\", \"punctuation.definition.separator.key-value.prisma\", \"text\"],\n        regex: /(\\w+)(\\s*)(:)(\\s*)/\n      }],\n      \"#named_argument\": [{\n        include: \"#map_key\"\n      }, {\n        include: \"#value\"\n      }],\n      \"#triple_comment\": [{\n        token: \"comment.prisma\",\n        regex: /\\/\\/\\//,\n        push: [{\n          token: \"comment.prisma\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.prisma\"\n        }]\n      }],\n      \"#double_comment\": [{\n        token: \"comment.prisma\",\n        regex: /\\/\\//,\n        push: [{\n          token: \"comment.prisma\",\n          regex: /$/,\n          next: \"pop\"\n        }, {\n          defaultToken: \"comment.prisma\"\n        }]\n      }],\n      \"#double_comment_inline\": [{\n        token: \"comment.prisma\",\n        regex: /\\/\\/[^$]*/\n      }],\n      \"#boolean\": [{\n        token: \"constant.language.boolean.prisma\",\n        regex: /\\b(?:true|false)\\b/\n      }],\n      \"#number\": [{\n        token: \"constant.numeric.prisma\",\n        regex: /(?:0(?:x|X)[0-9a-fA-F]*|(?:\\+|-)?\\b(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDdg]|UL|ul)?\\b/\n      }],\n      \"#double_quoted_string\": [{\n        token: \"string.quoted.double.start.prisma\",\n        regex: /\"/,\n        push: [{\n          token: \"string.quoted.double.end.prisma\",\n          regex: /\"/,\n          next: \"pop\"\n        }, {\n          include: \"#string_interpolation\"\n        }, {\n          token: \"string.quoted.double.prisma\",\n          regex: /[\\w\\-\\/\\._\\\\%@:\\?=]+/\n        }, {\n          defaultToken: \"unnamed\"\n        }]\n      }],\n      \"#string_interpolation\": [{\n        token: \"keyword.control.interpolation.start.prisma\",\n        regex: /\\$\\{/,\n        push: [{\n          token: \"keyword.control.interpolation.end.prisma\",\n          regex: /\\s*\\}/,\n          next: \"pop\"\n        }, {\n          include: \"#value\"\n        }, {\n          defaultToken: \"source.tag.embedded.source.prisma\"\n        }]\n      }]\n    };\n    this.normalizeRules();\n  };\n\n  PrismaHighlightRules.metaData = {\n    name: \"Prisma\",\n    scopeName: \"source.prisma\"\n  };\n  oop.inherits(PrismaHighlightRules, TextHighlightRules);\n  exports.PrismaHighlightRules = PrismaHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/prisma\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/prisma_highlight_rules\", \"ace/mode/folding/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"./text\").Mode;\n\n  var PrismaHighlightRules = require(\"./prisma_highlight_rules\").PrismaHighlightRules;\n\n  var FoldMode = require(\"./folding/cstyle\").FoldMode;\n\n  var Mode = function () {\n    this.HighlightRules = PrismaHighlightRules;\n    this.foldingRules = new FoldMode();\n  };\n\n  oop.inherits(Mode, TextMode);\n  (function () {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/prisma\";\n  }).call(Mode.prototype);\n  exports.Mode = Mode;\n});\n\n(function () {\n  ace.require([\"ace/mode/prisma\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-prisma.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","PrismaHighlightRules","$rules","start","include","token","regex","push","next","defaultToken","normalizeRules","metaData","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","lineCommentStart","$id"],"mappings":"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","sourcesContent":["ace.define(\"ace/mode/prisma_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrismaHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            include: \"#triple_comment\"\n        }, {\n            include: \"#double_comment\"\n        }, {\n            include: \"#model_block_definition\"\n        }, {\n            include: \"#config_block_definition\"\n        }, {\n            include: \"#enum_block_definition\"\n        }, {\n            include: \"#type_definition\"\n        }],\n        \"#model_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.model.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.model.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(model|type)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#field_definition\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#enum_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.enum.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.enum.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(enum)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#enum_value_definition\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#config_block_definition\": [{\n            token: [\n                \"source.prisma.embedded.source\",\n                \"storage.type.config.prisma\",\n                \"source.prisma.embedded.source\",\n                \"entity.name.type.config.prisma\",\n                \"source.prisma.embedded.source\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /^(\\s*)(generator|datasource)(\\s+)([A-Za-z][\\w]*)(\\s+)({)/,\n            push: [{\n                token: \"source.prisma.embedded.source\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#triple_comment\"\n            }, {\n                include: \"#double_comment\"\n            }, {\n                include: \"#assignment\"\n            }, {\n                defaultToken: \"source.prisma.embedded.source\"\n            }]\n        }],\n        \"#assignment\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"text\",\n                \"keyword.operator.terraform\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(\\w+)(\\s*)(=)(\\s*)/,\n            push: [{\n                token: \"text\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                include: \"#double_comment_inline\"\n            }]\n        }],\n        \"#field_definition\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"invalid.illegal.colon.prisma\",\n                \"text\",\n                \"support.type.primitive.prisma\",\n                \"keyword.operator.list_type.prisma\",\n                \"keyword.operator.optional_type.prisma\",\n                \"invalid.illegal.required_type.prisma\"\n            ],\n            regex: /^(\\s*)(\\w+)((?:\\s*:)?)(\\s+)(\\w+)((?:\\[\\])?)((?:\\?)?)((?:\\!)?)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#type_definition\": [{\n            token: [\n                \"text\",\n                \"storage.type.type.prisma\",\n                \"text\",\n                \"entity.name.type.type.prisma\",\n                \"text\",\n                \"support.type.primitive.prisma\"\n            ],\n            regex: /^(\\s*)(type)(\\s+)(\\w+)(\\s*=\\s*)(\\w+)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#enum_value_definition\": [{\n            token: [\n                \"text\",\n                \"variable.other.assignment.prisma\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(\\w+)(\\s*$)/\n        }, {\n            include: \"#attribute_with_arguments\"\n        }, {\n            include: \"#attribute\"\n        }],\n        \"#attribute_with_arguments\": [{\n            token: [\n                \"entity.name.function.attribute.prisma\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /(@@?[\\w\\.]+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#named_argument\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.attribute.with_arguments\"\n            }]\n        }],\n        \"#attribute\": [{\n            token: \"entity.name.function.attribute.prisma\",\n            regex: /@@?[\\w\\.]+/\n        }],\n        \"#array\": [{\n            token: \"source.prisma.array\",\n            regex: /\\[/,\n            push: [{\n                token: \"source.prisma.array\",\n                regex: /\\]/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.array\"\n            }]\n        }],\n        \"#value\": [{\n            include: \"#array\"\n        }, {\n            include: \"#functional\"\n        }, {\n            include: \"#literal\"\n        }],\n        \"#functional\": [{\n            token: [\n                \"support.function.functional.prisma\",\n                \"punctuation.definition.tag.prisma\"\n            ],\n            regex: /(\\w+)(\\()/,\n            push: [{\n                token: \"punctuation.definition.tag.prisma\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.prisma.functional\"\n            }]\n        }],\n        \"#literal\": [{\n            include: \"#boolean\"\n        }, {\n            include: \"#number\"\n        }, {\n            include: \"#double_quoted_string\"\n        }, {\n            include: \"#identifier\"\n        }],\n        \"#identifier\": [{\n            token: \"support.constant.constant.prisma\",\n            regex: /\\b(?:\\w)+\\b/\n        }],\n        \"#map_key\": [{\n            token: [\n                \"variable.parameter.key.prisma\",\n                \"text\",\n                \"punctuation.definition.separator.key-value.prisma\",\n                \"text\"\n            ],\n            regex: /(\\w+)(\\s*)(:)(\\s*)/\n        }],\n        \"#named_argument\": [{\n            include: \"#map_key\"\n        }, {\n            include: \"#value\"\n        }],\n        \"#triple_comment\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\/\\//,\n            push: [{\n                token: \"comment.prisma\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.prisma\"\n            }]\n        }],\n        \"#double_comment\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\//,\n            push: [{\n                token: \"comment.prisma\",\n                regex: /$/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.prisma\"\n            }]\n        }],\n        \"#double_comment_inline\": [{\n            token: \"comment.prisma\",\n            regex: /\\/\\/[^$]*/\n        }],\n        \"#boolean\": [{\n            token: \"constant.language.boolean.prisma\",\n            regex: /\\b(?:true|false)\\b/\n        }],\n        \"#number\": [{\n            token: \"constant.numeric.prisma\",\n            regex: /(?:0(?:x|X)[0-9a-fA-F]*|(?:\\+|-)?\\b(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDdg]|UL|ul)?\\b/\n        }],\n        \"#double_quoted_string\": [{\n            token: \"string.quoted.double.start.prisma\",\n            regex: /\"/,\n            push: [{\n                token: \"string.quoted.double.end.prisma\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                include: \"#string_interpolation\"\n            }, {\n                token: \"string.quoted.double.prisma\",\n                regex: /[\\w\\-\\/\\._\\\\%@:\\?=]+/\n            }, {\n                defaultToken: \"unnamed\"\n            }]\n        }],\n        \"#string_interpolation\": [{\n            token: \"keyword.control.interpolation.start.prisma\",\n            regex: /\\$\\{/,\n            push: [{\n                token: \"keyword.control.interpolation.end.prisma\",\n                regex: /\\s*\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#value\"\n            }, {\n                defaultToken: \"source.tag.embedded.source.prisma\"\n            }]\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\nPrismaHighlightRules.metaData = {\n    name: \"Prisma\",\n    scopeName: \"source.prisma\"\n};\n\n\noop.inherits(PrismaHighlightRules, TextHighlightRules);\n\nexports.PrismaHighlightRules = PrismaHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prisma\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prisma_highlight_rules\",\"ace/mode/folding/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"./text\").Mode;\nvar PrismaHighlightRules = require(\"./prisma_highlight_rules\").PrismaHighlightRules;\nvar FoldMode = require(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PrismaHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.$id = \"ace/mode/prisma\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});                (function() {\n                    ace.require([\"ace/mode/prisma\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}