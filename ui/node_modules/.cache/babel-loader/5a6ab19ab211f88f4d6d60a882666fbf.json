{"ast":null,"code":"'use strict';\n\nvar removeRule = require('./vcssom/removeRule').removeRule;\n\nexports.addon = function (renderer) {\n  // VCSSOM support only browser environment.\n  if (!renderer.client) return;\n\n  if (process.env.NODE_ENV !== 'production') {\n    require('./__dev__/warnOnMissingDependencies')('cssom', renderer, ['createRule']); // cssom\n\n  }\n\n  var kebab = renderer.kebab;\n\n  function VRule(selector, prelude) {\n    this.rule = renderer.createRule(selector, prelude);\n    this.decl = {};\n  }\n\n  VRule.prototype.diff = function (newDecl) {\n    var oldDecl = this.decl;\n    var style = this.rule.style;\n    var property;\n\n    for (property in oldDecl) if (newDecl[property] === undefined) style.removeProperty(property);\n\n    for (property in newDecl) if (newDecl[property] !== oldDecl[property]) style.setProperty(kebab(property), newDecl[property]);\n\n    this.decl = newDecl;\n  };\n\n  VRule.prototype.del = function () {\n    removeRule(this.rule);\n  };\n\n  function VSheet() {\n    /**\n     * {\n     *   '<at-rule-prelude>': {\n     *     '<selector>': {\n     *       color: 'red\n     *     }\n     *   }\n     * }\n     */\n    this.tree = {};\n  }\n\n  VSheet.prototype.diff = function (newTree) {\n    var oldTree = this.tree; // Remove media queries not present in new tree.\n\n    for (var prelude in oldTree) {\n      if (newTree[prelude] === undefined) {\n        var rules = oldTree[prelude];\n\n        for (var selector in rules) rules[selector].del();\n      }\n    }\n\n    for (var prelude in newTree) {\n      if (oldTree[prelude] === undefined) {\n        // Whole media query is new.\n        for (var selector in newTree[prelude]) {\n          var rule = new VRule(selector, prelude);\n          rule.diff(newTree[prelude][selector]);\n          newTree[prelude][selector] = rule;\n        }\n      } else {\n        // Old tree already has rules with this media query.\n        var oldRules = oldTree[prelude];\n        var newRules = newTree[prelude]; // Remove rules not present in new tree.\n\n        for (var selector in oldRules) if (!newRules[selector]) oldRules[selector].del(); // Apply new rules.\n\n\n        for (var selector in newRules) {\n          var rule = oldRules[selector];\n\n          if (rule) {\n            rule.diff(newRules[selector]);\n            newRules[selector] = rule;\n          } else {\n            rule = new VRule(selector, prelude);\n            rule.diff(newRules[selector]);\n            newRules[selector] = rule;\n          }\n        }\n      }\n    }\n\n    this.tree = newTree;\n  };\n\n  renderer.VRule = VRule;\n  renderer.VSheet = VSheet;\n};","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/nano-css/addon/vcssom.js"],"names":["removeRule","require","exports","addon","renderer","client","process","env","NODE_ENV","kebab","VRule","selector","prelude","rule","createRule","decl","prototype","diff","newDecl","oldDecl","style","property","undefined","removeProperty","setProperty","del","VSheet","tree","newTree","oldTree","rules","oldRules","newRules"],"mappings":"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","sourcesContent":["'use strict';\n\nvar removeRule = require('./vcssom/removeRule').removeRule;\n\nexports.addon = function (renderer) {\n    // VCSSOM support only browser environment.\n    if (!renderer.client) return;\n\n    if (process.env.NODE_ENV !== 'production') {\n        require('./__dev__/warnOnMissingDependencies')('cssom', renderer, ['createRule']); // cssom\n    }\n\n    var kebab = renderer.kebab;\n\n    function VRule (selector, prelude) {\n        this.rule = renderer.createRule(selector, prelude);\n        this.decl = {};\n    }\n    VRule.prototype.diff = function (newDecl) {\n        var oldDecl = this.decl;\n        var style = this.rule.style;\n        var property;\n        for (property in oldDecl)\n            if (newDecl[property] === undefined)\n                style.removeProperty(property);\n        for (property in newDecl)\n            if (newDecl[property] !== oldDecl[property])\n                style.setProperty(kebab(property), newDecl[property]);\n        this.decl = newDecl;\n    };\n    VRule.prototype.del = function () {\n        removeRule(this.rule);\n    };\n\n    function VSheet () {\n        /**\n         * {\n         *   '<at-rule-prelude>': {\n         *     '<selector>': {\n         *       color: 'red\n         *     }\n         *   }\n         * }\n         */\n        this.tree = {};\n    }\n    VSheet.prototype.diff = function (newTree) {\n        var oldTree = this.tree;\n\n        // Remove media queries not present in new tree.\n        for (var prelude in oldTree) {\n            if (newTree[prelude] === undefined) {\n                var rules = oldTree[prelude];\n                for (var selector in rules)\n                    rules[selector].del();\n            }\n        }\n\n        for (var prelude in newTree) {\n            if (oldTree[prelude] === undefined) {\n                // Whole media query is new.\n                for (var selector in newTree[prelude]) {\n                    var rule = new VRule(selector, prelude);\n                    rule.diff(newTree[prelude][selector]);\n                    newTree[prelude][selector] = rule;\n                }\n            } else {\n                // Old tree already has rules with this media query.\n                var oldRules = oldTree[prelude];\n                var newRules = newTree[prelude];\n\n                // Remove rules not present in new tree.\n                for (var selector in oldRules)\n                    if (!newRules[selector])\n                        oldRules[selector].del();\n\n                // Apply new rules.\n                for (var selector in newRules) {\n                    var rule = oldRules[selector];\n                    if (rule) {\n                        rule.diff(newRules[selector]);\n                        newRules[selector] = rule;\n                    } else {\n                        rule = new VRule(selector, prelude);\n                        rule.diff(newRules[selector]);\n                        newRules[selector] = rule;\n                    }\n                }\n            }\n        }\n\n        this.tree = newTree;\n    };\n\n    renderer.VRule = VRule;\n    renderer.VSheet = VSheet;\n};\n"]},"metadata":{},"sourceType":"script"}