{"ast":null,"code":"import { analyzeTokenTypes, charCodeToOptimizedIndex, cloneEmptyGroups, DEFAULT_MODE, LineTerminatorOptimizedTester, performRuntimeChecks, performWarningRuntimeChecks, SUPPORT_STICKY, validatePatterns } from \"./lexer\";\nimport { cloneArr, cloneObj, forEach, IDENTITY, isArray, isEmpty, isUndefined, keys, last, map, merge, NOOP, PRINT_WARNING, reduce, reject, timer, toFastProperties } from \"../utils/utils\";\nimport { augmentTokenTypes } from \"./tokens\";\nimport { defaultLexerErrorProvider } from \"../scan/lexer_errors_public\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser\";\nexport var LexerDefinitionErrorType;\n\n(function (LexerDefinitionErrorType) {\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n  LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\n\nvar DEFAULT_LEXER_CONFIG = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nvar Lexer =\n/** @class */\nfunction () {\n  function Lexer(lexerDefinition, config) {\n    var _this = this;\n\n    if (config === void 0) {\n      config = DEFAULT_LEXER_CONFIG;\n    }\n\n    this.lexerDefinition = lexerDefinition;\n    this.lexerDefinitionErrors = [];\n    this.lexerDefinitionWarning = [];\n    this.patternIdxToConfig = {};\n    this.charCodeToPatternIdxToConfig = {};\n    this.modes = [];\n    this.emptyGroups = {};\n    this.config = undefined;\n    this.trackStartLines = true;\n    this.trackEndLines = true;\n    this.hasCustom = false;\n    this.canModeBeOptimized = {};\n\n    if (typeof config === \"boolean\") {\n      throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" + \"a boolean 2nd argument is no longer supported\");\n    } // todo: defaults func?\n\n\n    this.config = merge(DEFAULT_LEXER_CONFIG, config);\n    var traceInitVal = this.config.traceInitPerf;\n\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n\n    this.traceInitIndent = -1;\n    this.TRACE_INIT(\"Lexer Constructor\", function () {\n      var actualDefinition;\n      var hasOnlySingleMode = true;\n\n      _this.TRACE_INIT(\"Lexer Config handling\", function () {\n        if (_this.config.lineTerminatorsPattern === DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          _this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (_this.config.lineTerminatorCharacters === DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n            throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" + \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n        }\n\n        _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n        _this.trackEndLines = /full/i.test(_this.config.positionTracking); // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: {}\n          };\n          actualDefinition.modes[DEFAULT_MODE] = cloneArr(lexerDefinition);\n          actualDefinition[DEFAULT_MODE] = DEFAULT_MODE;\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = cloneObj(lexerDefinition);\n        }\n      });\n\n      if (_this.config.skipValidations === false) {\n        _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n          _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n\n        _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n          _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n        });\n      } // for extra robustness to avoid throwing an none informative error message\n\n\n      actualDefinition.modes = actualDefinition.modes ? actualDefinition.modes : {}; // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n\n      forEach(actualDefinition.modes, function (currModeValue, currModeName) {\n        actualDefinition.modes[currModeName] = reject(currModeValue, function (currTokType) {\n          return isUndefined(currTokType);\n        });\n      });\n      var allModeNames = keys(actualDefinition.modes);\n      forEach(actualDefinition.modes, function (currModDef, currModName) {\n        _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n          _this.modes.push(currModName);\n\n          if (_this.config.skipValidations === false) {\n            _this.TRACE_INIT(\"validatePatterns\", function () {\n              _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n            });\n          } // If definition errors were encountered, the analysis phase may fail unexpectedly/\n          // Considering a lexer with definition errors may never be used, there is no point\n          // to performing the analysis anyhow...\n\n\n          if (isEmpty(_this.lexerDefinitionErrors)) {\n            augmentTokenTypes(currModDef);\n            var currAnalyzeResult_1;\n\n            _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n              currAnalyzeResult_1 = analyzeTokenTypes(currModDef, {\n                lineTerminatorCharacters: _this.config.lineTerminatorCharacters,\n                positionTracking: config.positionTracking,\n                ensureOptimizations: config.ensureOptimizations,\n                safeMode: config.safeMode,\n                tracer: _this.TRACE_INIT.bind(_this)\n              });\n            });\n\n            _this.patternIdxToConfig[currModName] = currAnalyzeResult_1.patternIdxToConfig;\n            _this.charCodeToPatternIdxToConfig[currModName] = currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n            _this.emptyGroups = merge(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n            _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n            _this.canModeBeOptimized[currModName] = currAnalyzeResult_1.canBeOptimized;\n          }\n        });\n      });\n      _this.defaultMode = actualDefinition.defaultMode;\n\n      if (!isEmpty(_this.lexerDefinitionErrors) && !_this.config.deferDefinitionErrorsHandling) {\n        var allErrMessages = map(_this.lexerDefinitionErrors, function (error) {\n          return error.message;\n        });\n        var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n        throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n      } // Only print warning if there are no errors, This will avoid pl\n\n\n      forEach(_this.lexerDefinitionWarning, function (warningDescriptor) {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          _this.chopInput = IDENTITY;\n          _this.match = _this.matchWithTest;\n        } else {\n          _this.updateLastIndex = NOOP;\n          _this.match = _this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          _this.handleModes = NOOP;\n        }\n\n        if (_this.trackStartLines === false) {\n          _this.computeNewColumn = IDENTITY;\n        }\n\n        if (_this.trackEndLines === false) {\n          _this.updateTokenEndLineColumnLocation = NOOP;\n        }\n\n        if (/full/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createFullToken;\n        } else if (/onlyStart/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n          _this.createTokenInstance = _this.createOffsetOnlyToken;\n        } else {\n          throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n        }\n\n        if (_this.hasCustom) {\n          _this.addToken = _this.addTokenUsingPush;\n          _this.handlePayload = _this.handlePayloadWithCustom;\n        } else {\n          _this.addToken = _this.addTokenUsingMemberAccess;\n          _this.handlePayload = _this.handlePayloadNoCustom;\n        }\n      });\n\n      _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n        var unOptimizedModes = reduce(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n          if (canBeOptimized === false) {\n            cannotBeOptimized.push(modeName);\n          }\n\n          return cannotBeOptimized;\n        }, []);\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" + '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' + \"\\t Or inspect the console log for details on how to resolve these issues.\");\n        }\n      });\n\n      _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n        clearRegExpParserCache();\n      });\n\n      _this.TRACE_INIT(\"toFastProperties\", function () {\n        toFastProperties(_this);\n      });\n    });\n  }\n\n  Lexer.prototype.tokenize = function (text, initialMode) {\n    if (initialMode === void 0) {\n      initialMode = this.defaultMode;\n    }\n\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      var allErrMessages = map(this.lexerDefinitionErrors, function (error) {\n        return error.message;\n      });\n      var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n      throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n    }\n\n    var lexResult = this.tokenizeInternal(text, initialMode);\n    return lexResult;\n  }; // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n\n\n  Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n    var _this = this;\n\n    var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n    var orgText = text;\n    var orgLength = orgText.length;\n    var offset = 0;\n    var matchedTokensIndex = 0; // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n\n    var guessedNumberOfTokens = this.hasCustom ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n    : Math.floor(text.length / 10);\n    var matchedTokens = new Array(guessedNumberOfTokens);\n    var errors = [];\n    var line = this.trackStartLines ? 1 : undefined;\n    var column = this.trackStartLines ? 1 : undefined;\n    var groups = cloneEmptyGroups(this.emptyGroups);\n    var trackLines = this.trackStartLines;\n    var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n    var currModePatternsLength = 0;\n    var patternIdxToConfig = [];\n    var currCharCodeToPatternIdxToConfig = [];\n    var modeStack = [];\n    var emptyArray = [];\n    Object.freeze(emptyArray);\n    var getPossiblePatterns = undefined;\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode) {\n      var optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    var pop_mode = function (popToken) {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (modeStack.length === 1 && // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n      // So no error should occur.\n      popToken.tokenType.PUSH_MODE === undefined) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine !== undefined ? popToken.startLine : undefined,\n          column: popToken.startColumn !== undefined ? popToken.startColumn : undefined,\n          length: popToken.image.length,\n          message: msg_1\n        });\n      } else {\n        modeStack.pop();\n        var newMode = last(modeStack);\n        patternIdxToConfig = _this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(newMode) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n      currModePatternsLength = patternIdxToConfig.length;\n      var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    } // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n\n\n    push_mode.call(this, initialMode);\n    var currConfig;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n      var nextCharCode = orgText.charCodeAt(offset);\n      var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      var chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        var currPattern = currConfig.pattern;\n        payload = null; // manually in-lined because > 600 chars won't be in-lined in V8\n\n        var singleCharCode = currConfig.short;\n\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = currPattern.exec(orgText, offset, matchedTokens, groups);\n\n          if (match !== null) {\n            matchedImage = match[0];\n\n            if (match.payload !== undefined) {\n              payload = match.payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern, offset);\n          matchedImage = this.match(currPattern, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAltIdx = currConfig.longerAlt;\n\n          if (longerAltIdx !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            var longerAltConfig = patternIdxToConfig[longerAltIdx];\n            var longerAltPattern = longerAltConfig.pattern;\n            altPayload = null; // single Char can never be a longer alt so no need to test it.\n            // manually in-lined because > 600 chars won't be in-lined in V8\n\n            if (longerAltConfig.isCustom === true) {\n              match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n\n              if (match !== null) {\n                matchAltImage = match[0];\n\n                if (match.payload !== undefined) {\n                  altPayload = match.payload;\n                }\n              } else {\n                matchAltImage = null;\n              }\n            } else {\n              this.updateLastIndex(longerAltPattern, offset);\n              matchAltImage = this.match(longerAltPattern, text, offset);\n            }\n\n            if (matchAltImage && matchAltImage.length > matchedImage.length) {\n              matchedImage = matchAltImage;\n              payload = altPayload;\n              currConfig = longerAltConfig;\n            }\n          }\n\n          break;\n        }\n      } // successful match\n\n\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx; // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n\n          newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n          this.handlePayload(newToken, payload); // TODO: optimize NOOP in case there are no special groups?\n\n          if (group === false) {\n            matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength; // TODO: with newlines the column may be assigned twice\n\n        column = this.computeNewColumn(column, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          var numOfLTsInMatch = 0;\n          var foundTerminator = void 0;\n          var lastLTEndOffset = void 0;\n          lineTerminatorPattern.lastIndex = 0;\n\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset;\n            this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n          }\n        } // will be NOOP if no modes present\n\n\n        this.handleModes(currConfig, pop_mode, push_mode, newToken);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        var errorStartOffset = offset;\n        var errorLine = line;\n        var errorColumn = column;\n        var foundResyncPoint = false;\n\n        while (!foundResyncPoint && offset < orgLength) {\n          // drop chars until we succeed in matching something\n          droppedChar = orgText.charCodeAt(offset); // Identity Func (when sticky flag is enabled)\n\n          text = this.chopInput(text, 1);\n          offset++;\n\n          for (j = 0; j < currModePatternsLength; j++) {\n            var currConfig_1 = patternIdxToConfig[j];\n            var currPattern = currConfig_1.pattern; // manually in-lined because > 600 chars won't be in-lined in V8\n\n            var singleCharCode = currConfig_1.short;\n\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig_1.isCustom === true) {\n              foundResyncPoint = currPattern.exec(orgText, offset, matchedTokens, groups) !== null;\n            } else {\n              this.updateLastIndex(currPattern, offset);\n              foundResyncPoint = currPattern.exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset; // at this point we either re-synced or reached the end of the input text\n\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg\n        });\n      }\n    } // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n\n\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors\n    };\n  };\n\n  Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      var pushMode = config.push;\n      pop_mode(newToken);\n\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  };\n\n  Lexer.prototype.chopInput = function (text, length) {\n    return text.substring(length);\n  };\n\n  Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n    regExp.lastIndex = newLastIndex;\n  }; // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n\n\n  Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n    var lastCharIsLT, fixForEndingInLT;\n\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT; // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      } // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n\n    }\n  };\n\n  Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n    return oldColumn + imageLength;\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.createTokenInstance = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      startLine: startLine,\n      startColumn: startColumn,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  };\n\n  Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n    return {\n      image: image,\n      startOffset: startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine: startLine,\n      endLine: startLine,\n      startColumn: startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx: tokenTypeIdx,\n      tokenType: tokenType\n    };\n  }; // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n    return 666;\n  };\n\n  Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n    tokenVector.push(tokenToAdd);\n    return index;\n  };\n\n  Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }; // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n\n  /* istanbul ignore next - place holder */\n\n\n  Lexer.prototype.handlePayload = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadNoCustom = function (token, payload) {};\n\n  Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  };\n  /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n\n\n  Lexer.prototype.match = function (pattern, text, offset) {\n    return null;\n  };\n\n  Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n    var found = pattern.test(text);\n\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n\n    return null;\n  };\n\n  Lexer.prototype.matchWithExec = function (pattern, text) {\n    var regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : regExpArray;\n  }; // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n\n\n  Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(indent + \"--> <\" + phaseDesc + \">\");\n      }\n\n      var _a = timer(phaseImpl),\n          time = _a.time,\n          value = _a.value;\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n\n\n      var traceMethod = time > 10 ? console.warn : console.log;\n\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n      }\n\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n\n  Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" + \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n  Lexer.NA = /NOT_APPLICABLE/;\n  return Lexer;\n}();\n\nexport { Lexer };","map":{"version":3,"sources":["../../../src/scan/lexer_public.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { analyzeTokenTypes, charCodeToOptimizedIndex, cloneEmptyGroups, DEFAULT_MODE, LineTerminatorOptimizedTester, performRuntimeChecks, performWarningRuntimeChecks, SUPPORT_STICKY, validatePatterns } from \"./lexer\";\nimport { cloneArr, cloneObj, forEach, IDENTITY, isArray, isEmpty, isUndefined, keys, last, map, merge, NOOP, PRINT_WARNING, reduce, reject, timer, toFastProperties } from \"../utils/utils\";\nimport { augmentTokenTypes } from \"./tokens\";\nimport { defaultLexerErrorProvider } from \"../scan/lexer_errors_public\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser\";\nexport var LexerDefinitionErrorType;\n(function (LexerDefinitionErrorType) {\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MISSING_PATTERN\"] = 0] = \"MISSING_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_PATTERN\"] = 1] = \"INVALID_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EOI_ANCHOR_FOUND\"] = 2] = \"EOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNSUPPORTED_FLAGS_FOUND\"] = 3] = \"UNSUPPORTED_FLAGS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"DUPLICATE_PATTERNS_FOUND\"] = 4] = \"DUPLICATE_PATTERNS_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"INVALID_GROUP_TYPE_FOUND\"] = 5] = \"INVALID_GROUP_TYPE_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"PUSH_MODE_DOES_NOT_EXIST\"] = 6] = \"PUSH_MODE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\"] = 7] = \"MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\"] = 8] = \"MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\"] = 9] = \"MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\"] = 10] = \"LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"SOI_ANCHOR_FOUND\"] = 11] = \"SOI_ANCHOR_FOUND\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"EMPTY_MATCH_PATTERN\"] = 12] = \"EMPTY_MATCH_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"NO_LINE_BREAKS_FLAGS\"] = 13] = \"NO_LINE_BREAKS_FLAGS\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"UNREACHABLE_PATTERN\"] = 14] = \"UNREACHABLE_PATTERN\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"IDENTIFY_TERMINATOR\"] = 15] = \"IDENTIFY_TERMINATOR\";\n    LexerDefinitionErrorType[LexerDefinitionErrorType[\"CUSTOM_LINE_BREAK\"] = 16] = \"CUSTOM_LINE_BREAK\";\n})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));\nvar DEFAULT_LEXER_CONFIG = {\n    deferDefinitionErrorsHandling: false,\n    positionTracking: \"full\",\n    lineTerminatorsPattern: /\\n|\\r\\n?/g,\n    lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n    ensureOptimizations: false,\n    safeMode: false,\n    errorMessageProvider: defaultLexerErrorProvider,\n    traceInitPerf: false,\n    skipValidations: false\n};\nObject.freeze(DEFAULT_LEXER_CONFIG);\nvar Lexer = /** @class */ (function () {\n    function Lexer(lexerDefinition, config) {\n        var _this = this;\n        if (config === void 0) { config = DEFAULT_LEXER_CONFIG; }\n        this.lexerDefinition = lexerDefinition;\n        this.lexerDefinitionErrors = [];\n        this.lexerDefinitionWarning = [];\n        this.patternIdxToConfig = {};\n        this.charCodeToPatternIdxToConfig = {};\n        this.modes = [];\n        this.emptyGroups = {};\n        this.config = undefined;\n        this.trackStartLines = true;\n        this.trackEndLines = true;\n        this.hasCustom = false;\n        this.canModeBeOptimized = {};\n        if (typeof config === \"boolean\") {\n            throw Error(\"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n                \"a boolean 2nd argument is no longer supported\");\n        }\n        // todo: defaults func?\n        this.config = merge(DEFAULT_LEXER_CONFIG, config);\n        var traceInitVal = this.config.traceInitPerf;\n        if (traceInitVal === true) {\n            this.traceInitMaxIdent = Infinity;\n            this.traceInitPerf = true;\n        }\n        else if (typeof traceInitVal === \"number\") {\n            this.traceInitMaxIdent = traceInitVal;\n            this.traceInitPerf = true;\n        }\n        this.traceInitIndent = -1;\n        this.TRACE_INIT(\"Lexer Constructor\", function () {\n            var actualDefinition;\n            var hasOnlySingleMode = true;\n            _this.TRACE_INIT(\"Lexer Config handling\", function () {\n                if (_this.config.lineTerminatorsPattern ===\n                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {\n                    // optimized built-in implementation for the defaults definition of lineTerminators\n                    _this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n                }\n                else {\n                    if (_this.config.lineTerminatorCharacters ===\n                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {\n                        throw Error(\"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                            \"\\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\");\n                    }\n                }\n                if (config.safeMode && config.ensureOptimizations) {\n                    throw Error('\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.');\n                }\n                _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);\n                _this.trackEndLines = /full/i.test(_this.config.positionTracking);\n                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n                if (isArray(lexerDefinition)) {\n                    actualDefinition = { modes: {} };\n                    actualDefinition.modes[DEFAULT_MODE] = cloneArr(lexerDefinition);\n                    actualDefinition[DEFAULT_MODE] = DEFAULT_MODE;\n                }\n                else {\n                    // no conversion needed, input should already be a IMultiModeLexerDefinition\n                    hasOnlySingleMode = false;\n                    actualDefinition = cloneObj(lexerDefinition);\n                }\n            });\n            if (_this.config.skipValidations === false) {\n                _this.TRACE_INIT(\"performRuntimeChecks\", function () {\n                    _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(performRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n                });\n                _this.TRACE_INIT(\"performWarningRuntimeChecks\", function () {\n                    _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(performWarningRuntimeChecks(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));\n                });\n            }\n            // for extra robustness to avoid throwing an none informative error message\n            actualDefinition.modes = actualDefinition.modes\n                ? actualDefinition.modes\n                : {};\n            // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n            // this transformation is to increase robustness in the case of partially invalid lexer definition.\n            forEach(actualDefinition.modes, function (currModeValue, currModeName) {\n                actualDefinition.modes[currModeName] = reject(currModeValue, function (currTokType) { return isUndefined(currTokType); });\n            });\n            var allModeNames = keys(actualDefinition.modes);\n            forEach(actualDefinition.modes, function (currModDef, currModName) {\n                _this.TRACE_INIT(\"Mode: <\" + currModName + \"> processing\", function () {\n                    _this.modes.push(currModName);\n                    if (_this.config.skipValidations === false) {\n                        _this.TRACE_INIT(\"validatePatterns\", function () {\n                            _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(validatePatterns(currModDef, allModeNames));\n                        });\n                    }\n                    // If definition errors were encountered, the analysis phase may fail unexpectedly/\n                    // Considering a lexer with definition errors may never be used, there is no point\n                    // to performing the analysis anyhow...\n                    if (isEmpty(_this.lexerDefinitionErrors)) {\n                        augmentTokenTypes(currModDef);\n                        var currAnalyzeResult_1;\n                        _this.TRACE_INIT(\"analyzeTokenTypes\", function () {\n                            currAnalyzeResult_1 = analyzeTokenTypes(currModDef, {\n                                lineTerminatorCharacters: _this.config\n                                    .lineTerminatorCharacters,\n                                positionTracking: config.positionTracking,\n                                ensureOptimizations: config.ensureOptimizations,\n                                safeMode: config.safeMode,\n                                tracer: _this.TRACE_INIT.bind(_this)\n                            });\n                        });\n                        _this.patternIdxToConfig[currModName] =\n                            currAnalyzeResult_1.patternIdxToConfig;\n                        _this.charCodeToPatternIdxToConfig[currModName] =\n                            currAnalyzeResult_1.charCodeToPatternIdxToConfig;\n                        _this.emptyGroups = merge(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);\n                        _this.hasCustom = currAnalyzeResult_1.hasCustom || _this.hasCustom;\n                        _this.canModeBeOptimized[currModName] =\n                            currAnalyzeResult_1.canBeOptimized;\n                    }\n                });\n            });\n            _this.defaultMode = actualDefinition.defaultMode;\n            if (!isEmpty(_this.lexerDefinitionErrors) &&\n                !_this.config.deferDefinitionErrorsHandling) {\n                var allErrMessages = map(_this.lexerDefinitionErrors, function (error) {\n                    return error.message;\n                });\n                var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n                throw new Error(\"Errors detected in definition of Lexer:\\n\" + allErrMessagesString);\n            }\n            // Only print warning if there are no errors, This will avoid pl\n            forEach(_this.lexerDefinitionWarning, function (warningDescriptor) {\n                PRINT_WARNING(warningDescriptor.message);\n            });\n            _this.TRACE_INIT(\"Choosing sub-methods implementations\", function () {\n                // Choose the relevant internal implementations for this specific parser.\n                // These implementations should be in-lined by the JavaScript engine\n                // to provide optimal performance in each scenario.\n                if (SUPPORT_STICKY) {\n                    _this.chopInput = IDENTITY;\n                    _this.match = _this.matchWithTest;\n                }\n                else {\n                    _this.updateLastIndex = NOOP;\n                    _this.match = _this.matchWithExec;\n                }\n                if (hasOnlySingleMode) {\n                    _this.handleModes = NOOP;\n                }\n                if (_this.trackStartLines === false) {\n                    _this.computeNewColumn = IDENTITY;\n                }\n                if (_this.trackEndLines === false) {\n                    _this.updateTokenEndLineColumnLocation = NOOP;\n                }\n                if (/full/i.test(_this.config.positionTracking)) {\n                    _this.createTokenInstance = _this.createFullToken;\n                }\n                else if (/onlyStart/i.test(_this.config.positionTracking)) {\n                    _this.createTokenInstance = _this.createStartOnlyToken;\n                }\n                else if (/onlyOffset/i.test(_this.config.positionTracking)) {\n                    _this.createTokenInstance = _this.createOffsetOnlyToken;\n                }\n                else {\n                    throw Error(\"Invalid <positionTracking> config option: \\\"\" + _this.config.positionTracking + \"\\\"\");\n                }\n                if (_this.hasCustom) {\n                    _this.addToken = _this.addTokenUsingPush;\n                    _this.handlePayload = _this.handlePayloadWithCustom;\n                }\n                else {\n                    _this.addToken = _this.addTokenUsingMemberAccess;\n                    _this.handlePayload = _this.handlePayloadNoCustom;\n                }\n            });\n            _this.TRACE_INIT(\"Failed Optimization Warnings\", function () {\n                var unOptimizedModes = reduce(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {\n                    if (canBeOptimized === false) {\n                        cannotBeOptimized.push(modeName);\n                    }\n                    return cannotBeOptimized;\n                }, []);\n                if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n                    throw Error(\"Lexer Modes: < \" + unOptimizedModes.join(\", \") + \" > cannot be optimized.\\n\" +\n                        '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n                        \"\\t Or inspect the console log for details on how to resolve these issues.\");\n                }\n            });\n            _this.TRACE_INIT(\"clearRegExpParserCache\", function () {\n                clearRegExpParserCache();\n            });\n            _this.TRACE_INIT(\"toFastProperties\", function () {\n                toFastProperties(_this);\n            });\n        });\n    }\n    Lexer.prototype.tokenize = function (text, initialMode) {\n        if (initialMode === void 0) { initialMode = this.defaultMode; }\n        if (!isEmpty(this.lexerDefinitionErrors)) {\n            var allErrMessages = map(this.lexerDefinitionErrors, function (error) {\n                return error.message;\n            });\n            var allErrMessagesString = allErrMessages.join(\"-----------------------\\n\");\n            throw new Error(\"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n                allErrMessagesString);\n        }\n        var lexResult = this.tokenizeInternal(text, initialMode);\n        return lexResult;\n    };\n    // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n    // This is intentional due to performance considerations.\n    Lexer.prototype.tokenizeInternal = function (text, initialMode) {\n        var _this = this;\n        var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;\n        var orgText = text;\n        var orgLength = orgText.length;\n        var offset = 0;\n        var matchedTokensIndex = 0;\n        // initializing the tokensArray to the \"guessed\" size.\n        // guessing too little will still reduce the number of array re-sizes on pushes.\n        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n        // but would still have a faster runtime by avoiding (All but one) array resizing.\n        var guessedNumberOfTokens = this.hasCustom\n            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n            : Math.floor(text.length / 10);\n        var matchedTokens = new Array(guessedNumberOfTokens);\n        var errors = [];\n        var line = this.trackStartLines ? 1 : undefined;\n        var column = this.trackStartLines ? 1 : undefined;\n        var groups = cloneEmptyGroups(this.emptyGroups);\n        var trackLines = this.trackStartLines;\n        var lineTerminatorPattern = this.config.lineTerminatorsPattern;\n        var currModePatternsLength = 0;\n        var patternIdxToConfig = [];\n        var currCharCodeToPatternIdxToConfig = [];\n        var modeStack = [];\n        var emptyArray = [];\n        Object.freeze(emptyArray);\n        var getPossiblePatterns = undefined;\n        function getPossiblePatternsSlow() {\n            return patternIdxToConfig;\n        }\n        function getPossiblePatternsOptimized(charCode) {\n            var optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n            var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n            if (possiblePatterns === undefined) {\n                return emptyArray;\n            }\n            else {\n                return possiblePatterns;\n            }\n        }\n        var pop_mode = function (popToken) {\n            // TODO: perhaps avoid this error in the edge case there is no more input?\n            if (modeStack.length === 1 &&\n                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n                // So no error should occur.\n                popToken.tokenType.PUSH_MODE === undefined) {\n                // if we try to pop the last mode there lexer will no longer have ANY mode.\n                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n                var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);\n                errors.push({\n                    offset: popToken.startOffset,\n                    line: popToken.startLine !== undefined ? popToken.startLine : undefined,\n                    column: popToken.startColumn !== undefined\n                        ? popToken.startColumn\n                        : undefined,\n                    length: popToken.image.length,\n                    message: msg_1\n                });\n            }\n            else {\n                modeStack.pop();\n                var newMode = last(modeStack);\n                patternIdxToConfig = _this.patternIdxToConfig[newMode];\n                currCharCodeToPatternIdxToConfig = _this.charCodeToPatternIdxToConfig[newMode];\n                currModePatternsLength = patternIdxToConfig.length;\n                var modeCanBeOptimized = _this.canModeBeOptimized[newMode] && _this.config.safeMode === false;\n                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                    getPossiblePatterns = getPossiblePatternsOptimized;\n                }\n                else {\n                    getPossiblePatterns = getPossiblePatternsSlow;\n                }\n            }\n        };\n        function push_mode(newMode) {\n            modeStack.push(newMode);\n            currCharCodeToPatternIdxToConfig = this.charCodeToPatternIdxToConfig[newMode];\n            patternIdxToConfig = this.patternIdxToConfig[newMode];\n            currModePatternsLength = patternIdxToConfig.length;\n            currModePatternsLength = patternIdxToConfig.length;\n            var modeCanBeOptimized = this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n                getPossiblePatterns = getPossiblePatternsOptimized;\n            }\n            else {\n                getPossiblePatterns = getPossiblePatternsSlow;\n            }\n        }\n        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n        // seem to matter performance wise.\n        push_mode.call(this, initialMode);\n        var currConfig;\n        while (offset < orgLength) {\n            matchedImage = null;\n            var nextCharCode = orgText.charCodeAt(offset);\n            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n            var chosenPatternsLength = chosenPatternIdxToConfig.length;\n            for (i = 0; i < chosenPatternsLength; i++) {\n                currConfig = chosenPatternIdxToConfig[i];\n                var currPattern = currConfig.pattern;\n                payload = null;\n                // manually in-lined because > 600 chars won't be in-lined in V8\n                var singleCharCode = currConfig.short;\n                if (singleCharCode !== false) {\n                    if (nextCharCode === singleCharCode) {\n                        // single character string\n                        matchedImage = currPattern;\n                    }\n                }\n                else if (currConfig.isCustom === true) {\n                    match = currPattern.exec(orgText, offset, matchedTokens, groups);\n                    if (match !== null) {\n                        matchedImage = match[0];\n                        if (match.payload !== undefined) {\n                            payload = match.payload;\n                        }\n                    }\n                    else {\n                        matchedImage = null;\n                    }\n                }\n                else {\n                    this.updateLastIndex(currPattern, offset);\n                    matchedImage = this.match(currPattern, text, offset);\n                }\n                if (matchedImage !== null) {\n                    // even though this pattern matched we must try a another longer alternative.\n                    // this can be used to prioritize keywords over identifiers\n                    longerAltIdx = currConfig.longerAlt;\n                    if (longerAltIdx !== undefined) {\n                        // TODO: micro optimize, avoid extra prop access\n                        // by saving/linking longerAlt on the original config?\n                        var longerAltConfig = patternIdxToConfig[longerAltIdx];\n                        var longerAltPattern = longerAltConfig.pattern;\n                        altPayload = null;\n                        // single Char can never be a longer alt so no need to test it.\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        if (longerAltConfig.isCustom === true) {\n                            match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);\n                            if (match !== null) {\n                                matchAltImage = match[0];\n                                if (match.payload !== undefined) {\n                                    altPayload = match.payload;\n                                }\n                            }\n                            else {\n                                matchAltImage = null;\n                            }\n                        }\n                        else {\n                            this.updateLastIndex(longerAltPattern, offset);\n                            matchAltImage = this.match(longerAltPattern, text, offset);\n                        }\n                        if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                            matchedImage = matchAltImage;\n                            payload = altPayload;\n                            currConfig = longerAltConfig;\n                        }\n                    }\n                    break;\n                }\n            }\n            // successful match\n            if (matchedImage !== null) {\n                imageLength = matchedImage.length;\n                group = currConfig.group;\n                if (group !== undefined) {\n                    tokType = currConfig.tokenTypeIdx;\n                    // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n                    // createFullToken method\n                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);\n                    this.handlePayload(newToken, payload);\n                    // TODO: optimize NOOP in case there are no special groups?\n                    if (group === false) {\n                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);\n                    }\n                    else {\n                        groups[group].push(newToken);\n                    }\n                }\n                text = this.chopInput(text, imageLength);\n                offset = offset + imageLength;\n                // TODO: with newlines the column may be assigned twice\n                column = this.computeNewColumn(column, imageLength);\n                if (trackLines === true && currConfig.canLineTerminator === true) {\n                    var numOfLTsInMatch = 0;\n                    var foundTerminator = void 0;\n                    var lastLTEndOffset = void 0;\n                    lineTerminatorPattern.lastIndex = 0;\n                    do {\n                        foundTerminator = lineTerminatorPattern.test(matchedImage);\n                        if (foundTerminator === true) {\n                            lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n                            numOfLTsInMatch++;\n                        }\n                    } while (foundTerminator === true);\n                    if (numOfLTsInMatch !== 0) {\n                        line = line + numOfLTsInMatch;\n                        column = imageLength - lastLTEndOffset;\n                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);\n                    }\n                }\n                // will be NOOP if no modes present\n                this.handleModes(currConfig, pop_mode, push_mode, newToken);\n            }\n            else {\n                // error recovery, drop characters until we identify a valid token's start point\n                var errorStartOffset = offset;\n                var errorLine = line;\n                var errorColumn = column;\n                var foundResyncPoint = false;\n                while (!foundResyncPoint && offset < orgLength) {\n                    // drop chars until we succeed in matching something\n                    droppedChar = orgText.charCodeAt(offset);\n                    // Identity Func (when sticky flag is enabled)\n                    text = this.chopInput(text, 1);\n                    offset++;\n                    for (j = 0; j < currModePatternsLength; j++) {\n                        var currConfig_1 = patternIdxToConfig[j];\n                        var currPattern = currConfig_1.pattern;\n                        // manually in-lined because > 600 chars won't be in-lined in V8\n                        var singleCharCode = currConfig_1.short;\n                        if (singleCharCode !== false) {\n                            if (orgText.charCodeAt(offset) === singleCharCode) {\n                                // single character string\n                                foundResyncPoint = true;\n                            }\n                        }\n                        else if (currConfig_1.isCustom === true) {\n                            foundResyncPoint =\n                                currPattern.exec(orgText, offset, matchedTokens, groups) !==\n                                    null;\n                        }\n                        else {\n                            this.updateLastIndex(currPattern, offset);\n                            foundResyncPoint = currPattern.exec(text) !== null;\n                        }\n                        if (foundResyncPoint === true) {\n                            break;\n                        }\n                    }\n                }\n                errLength = offset - errorStartOffset;\n                // at this point we either re-synced or reached the end of the input text\n                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);\n                errors.push({\n                    offset: errorStartOffset,\n                    line: errorLine,\n                    column: errorColumn,\n                    length: errLength,\n                    message: msg\n                });\n            }\n        }\n        // if we do have custom patterns which push directly into the\n        // TODO: custom tokens should not push directly??\n        if (!this.hasCustom) {\n            // if we guessed a too large size for the tokens array this will shrink it to the right size.\n            matchedTokens.length = matchedTokensIndex;\n        }\n        return {\n            tokens: matchedTokens,\n            groups: groups,\n            errors: errors\n        };\n    };\n    Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {\n        if (config.pop === true) {\n            // need to save the PUSH_MODE property as if the mode is popped\n            // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n            var pushMode = config.push;\n            pop_mode(newToken);\n            if (pushMode !== undefined) {\n                push_mode.call(this, pushMode);\n            }\n        }\n        else if (config.push !== undefined) {\n            push_mode.call(this, config.push);\n        }\n    };\n    Lexer.prototype.chopInput = function (text, length) {\n        return text.substring(length);\n    };\n    Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {\n        regExp.lastIndex = newLastIndex;\n    };\n    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n    Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {\n        var lastCharIsLT, fixForEndingInLT;\n        if (group !== undefined) {\n            // a none skipped multi line Token, need to update endLine/endColumn\n            lastCharIsLT = lastLTIdx === imageLength - 1;\n            fixForEndingInLT = lastCharIsLT ? -1 : 0;\n            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n                // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n                newToken.endLine = line + fixForEndingInLT;\n                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n                // inclusive to exclusive range.\n                newToken.endColumn = column - 1 + -fixForEndingInLT;\n            }\n            // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n        }\n    };\n    Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {\n        return oldColumn + imageLength;\n    };\n    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n    /* istanbul ignore next - place holder */\n    Lexer.prototype.createTokenInstance = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return null;\n    };\n    Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {\n        return {\n            image: image,\n            startOffset: startOffset,\n            tokenTypeIdx: tokenTypeIdx,\n            tokenType: tokenType\n        };\n    };\n    Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {\n        return {\n            image: image,\n            startOffset: startOffset,\n            startLine: startLine,\n            startColumn: startColumn,\n            tokenTypeIdx: tokenTypeIdx,\n            tokenType: tokenType\n        };\n    };\n    Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {\n        return {\n            image: image,\n            startOffset: startOffset,\n            endOffset: startOffset + imageLength - 1,\n            startLine: startLine,\n            endLine: startLine,\n            startColumn: startColumn,\n            endColumn: startColumn + imageLength - 1,\n            tokenTypeIdx: tokenTypeIdx,\n            tokenType: tokenType\n        };\n    };\n    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n    /* istanbul ignore next - place holder */\n    Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {\n        return 666;\n    };\n    Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {\n        tokenVector.push(tokenToAdd);\n        return index;\n    };\n    Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {\n        tokenVector[index] = tokenToAdd;\n        index++;\n        return index;\n    };\n    // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n    /* istanbul ignore next - place holder */\n    Lexer.prototype.handlePayload = function (token, payload) { };\n    Lexer.prototype.handlePayloadNoCustom = function (token, payload) { };\n    Lexer.prototype.handlePayloadWithCustom = function (token, payload) {\n        if (payload !== null) {\n            token.payload = payload;\n        }\n    };\n    /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */\n    Lexer.prototype.match = function (pattern, text, offset) {\n        return null;\n    };\n    Lexer.prototype.matchWithTest = function (pattern, text, offset) {\n        var found = pattern.test(text);\n        if (found === true) {\n            return text.substring(offset, pattern.lastIndex);\n        }\n        return null;\n    };\n    Lexer.prototype.matchWithExec = function (pattern, text) {\n        var regExpArray = pattern.exec(text);\n        return regExpArray !== null ? regExpArray[0] : regExpArray;\n    };\n    // Duplicated from the parser's perf trace trait to allow future extraction\n    // of the lexer to a separate package.\n    Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {\n        // No need to optimize this using NOOP pattern because\n        // It is not called in a hot spot...\n        if (this.traceInitPerf === true) {\n            this.traceInitIndent++;\n            var indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                console.log(indent + \"--> <\" + phaseDesc + \">\");\n            }\n            var _a = timer(phaseImpl), time = _a.time, value = _a.value;\n            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n            var traceMethod = time > 10 ? console.warn : console.log;\n            if (this.traceInitIndent < this.traceInitMaxIdent) {\n                traceMethod(indent + \"<-- <\" + phaseDesc + \"> time: \" + time + \"ms\");\n            }\n            this.traceInitIndent--;\n            return value;\n        }\n        else {\n            return phaseImpl();\n        }\n    };\n    Lexer.SKIPPED = \"This marks a skipped Token pattern, this means each token identified by it will\" +\n        \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n    Lexer.NA = /NOT_APPLICABLE/;\n    return Lexer;\n}());\nexport { Lexer };\n//# sourceMappingURL=lexer_public.js.map"]},"metadata":{},"sourceType":"module"}