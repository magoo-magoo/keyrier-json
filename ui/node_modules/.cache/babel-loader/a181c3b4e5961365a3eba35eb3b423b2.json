{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/components/Header.tsx\";\nimport * as React from 'react';\nimport { version } from '../../package.json';\nimport { availableGeneralThemes, availableEditorThemes } from 'themes/themes';\nimport { switchTheme, switchEditorTheme } from 'actions/actions';\nimport { connect } from 'react-redux';\nimport { getTheme, getEditorTheme } from 'store/selectors';\nimport { useToggleState } from 'hooks/hooks';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, DropdownToggle, DropdownMenu, DropdownItem, NavItem, NavLink, Dropdown } from 'reactstrap';\nimport { withErrorBoundary } from './common/ErrorBoundary';\nimport { memo, useCallback } from 'react';\nimport { withPerformance } from 'core/logging/performance';\n\nconst Header = ({\n  setGeneralTheme,\n  currentTheme,\n  setEditorTheme,\n  currentEditorTheme\n}) => {\n  const [isOpen, switchIsOpen] = useToggleState();\n  const [dropDownIsOpen, toggleDropdown] = useToggleState();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n    color: \"dark\",\n    dark: true,\n    expand: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NavbarBrand, {\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Keyrier JSON\"), /*#__PURE__*/React.createElement(NavbarToggler, {\n    role: \"presentation\",\n    onClick: switchIsOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Collapse, {\n    isOpen: isOpen,\n    navbar: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Nav, {\n    className: \"ml-auto\",\n    navbar: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(NavItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown, {\n    isOpen: dropDownIsOpen,\n    toggle: toggleDropdown,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(DropdownToggle, {\n    nav: true,\n    caret: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 33\n    }\n  }, \"Theme\"), /*#__PURE__*/React.createElement(DropdownMenu, {\n    right: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(DropdownItem, {\n    header: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 37\n    }\n  }, \"Choose editor theme\"), availableEditorThemes.map((theme, index) => /*#__PURE__*/React.createElement(ThemeDropDownItem, {\n    setTheme: setEditorTheme,\n    key: index,\n    active: currentEditorTheme === theme,\n    theme: theme,\n    reloadOnChange: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 41\n    }\n  })), /*#__PURE__*/React.createElement(DropdownItem, {\n    header: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 37\n    }\n  }, \"Choose general theme\"), availableGeneralThemes.map((theme, index) => /*#__PURE__*/React.createElement(ThemeDropDownItem, {\n    setTheme: setGeneralTheme,\n    key: index,\n    active: currentTheme === theme,\n    theme: theme,\n    reloadOnChange: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 41\n    }\n  }))))), /*#__PURE__*/React.createElement(NavItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    href: \"https://github.com/magoo-magoo/keyrier-json/releases/latest\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }\n  }, \"v\", version)), /*#__PURE__*/React.createElement(NavItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(NavLink, {\n    href: \"https://github.com/magoo-magoo/keyrier-json\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 29\n    }\n  }, \"GitHub\"))))));\n};\n\nconst ThemeDropDownItem = props => {\n  const {\n    theme,\n    active,\n    setTheme,\n    reloadOnChange\n  } = props;\n  const onClick = useCallback(() => {\n    setTheme(theme);\n\n    if (reloadOnChange) {\n      setTimeout(() => window.location.reload());\n    }\n  }, [theme, setTheme, reloadOnChange]);\n  return /*#__PURE__*/React.createElement(DropdownItem, {\n    active: active,\n    onClick: onClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, theme);\n};\n\nconst mapStateToProps = state => ({\n  currentTheme: getTheme(state),\n  currentEditorTheme: getEditorTheme(state)\n});\n\nexport default connect(mapStateToProps, {\n  setGeneralTheme: switchTheme,\n  setEditorTheme: switchEditorTheme\n})(memo(withErrorBoundary(withPerformance(Header, 'Header'))));","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/components/Header.tsx"],"names":["React","version","availableGeneralThemes","availableEditorThemes","switchTheme","switchEditorTheme","connect","getTheme","getEditorTheme","useToggleState","Navbar","NavbarBrand","NavbarToggler","Collapse","Nav","DropdownToggle","DropdownMenu","DropdownItem","NavItem","NavLink","Dropdown","withErrorBoundary","memo","useCallback","withPerformance","Header","setGeneralTheme","currentTheme","setEditorTheme","currentEditorTheme","isOpen","switchIsOpen","dropDownIsOpen","toggleDropdown","map","theme","index","ThemeDropDownItem","props","active","setTheme","reloadOnChange","onClick","setTimeout","window","location","reload","mapStateToProps","state"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { version } from '../../package.json'\nimport { GeneralTheme, availableGeneralThemes, availableEditorThemes, EditorTheme } from 'themes/themes'\nimport { switchTheme, switchEditorTheme } from 'actions/actions'\nimport { connect } from 'react-redux'\nimport { getTheme, getEditorTheme } from 'store/selectors'\nimport { RootState } from 'state/State'\nimport { useToggleState } from 'hooks/hooks'\nimport {\n    Navbar,\n    NavbarBrand,\n    NavbarToggler,\n    Collapse,\n    Nav,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    NavItem,\n    NavLink,\n    Dropdown,\n} from 'reactstrap'\nimport { withErrorBoundary } from './common/ErrorBoundary'\nimport { memo, useCallback, FC } from 'react'\nimport { withPerformance } from 'core/logging/performance'\n\ninterface Props {\n    setGeneralTheme: typeof switchTheme\n    setEditorTheme: typeof switchEditorTheme\n    currentTheme: GeneralTheme | null\n    currentEditorTheme: EditorTheme\n}\n\nconst Header: FC<Props> = ({ setGeneralTheme, currentTheme, setEditorTheme, currentEditorTheme }) => {\n    const [isOpen, switchIsOpen] = useToggleState()\n    const [dropDownIsOpen, toggleDropdown] = useToggleState()\n\n    return (\n        <>\n            <Navbar color=\"dark\" dark={true} expand=\"md\">\n                <NavbarBrand href=\"/\">Keyrier JSON</NavbarBrand>\n                <NavbarToggler role=\"presentation\" onClick={switchIsOpen} />\n                <Collapse isOpen={isOpen} navbar={true}>\n                    <Nav className=\"ml-auto\" navbar={true}>\n                        <NavItem>\n                            <Dropdown isOpen={dropDownIsOpen} toggle={toggleDropdown}>\n                                <DropdownToggle nav={true} caret={true}>\n                                    Theme\n                                </DropdownToggle>\n                                <DropdownMenu right={true}>\n                                    <DropdownItem header={true}>Choose editor theme</DropdownItem>\n                                    {availableEditorThemes.map((theme, index) => (\n                                        <ThemeDropDownItem\n                                            setTheme={setEditorTheme}\n                                            key={index}\n                                            active={currentEditorTheme === theme}\n                                            theme={theme}\n                                            reloadOnChange={false}\n                                        />\n                                    ))}\n                                    <DropdownItem header={true}>Choose general theme</DropdownItem>\n\n                                    {availableGeneralThemes.map((theme, index) => (\n                                        <ThemeDropDownItem\n                                            setTheme={setGeneralTheme}\n                                            key={index}\n                                            active={currentTheme === theme}\n                                            theme={theme}\n                                            reloadOnChange={true}\n                                        />\n                                    ))}\n                                </DropdownMenu>\n                            </Dropdown>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"https://github.com/magoo-magoo/keyrier-json/releases/latest\">\n                                v{version}\n                            </NavLink>\n                        </NavItem>\n                        <NavItem>\n                            <NavLink href=\"https://github.com/magoo-magoo/keyrier-json\">GitHub</NavLink>\n                        </NavItem>\n                    </Nav>\n                </Collapse>\n            </Navbar>\n        </>\n    )\n}\n\ntype ThemeDropDownItemProps<T extends GeneralTheme | EditorTheme> = {\n    theme: T\n    active: boolean\n    setTheme: (v: T) => void\n    reloadOnChange: boolean\n}\n\nconst ThemeDropDownItem = <T extends GeneralTheme | EditorTheme>(props: ThemeDropDownItemProps<T>) => {\n    const { theme, active, setTheme, reloadOnChange } = props\n    const onClick = useCallback(() => {\n        setTheme(theme)\n        if (reloadOnChange) {\n            setTimeout(() => window.location.reload())\n        }\n    }, [theme, setTheme, reloadOnChange])\n    return (\n        <DropdownItem active={active} onClick={onClick}>\n            {theme}\n        </DropdownItem>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n    currentTheme: getTheme(state),\n    currentEditorTheme: getEditorTheme(state),\n})\n\nexport default connect(mapStateToProps, { setGeneralTheme: switchTheme, setEditorTheme: switchEditorTheme })(\n    memo(withErrorBoundary(withPerformance(Header, 'Header')))\n)\n"]},"metadata":{},"sourceType":"module"}