{"ast":null,"code":"ace.define(\"ace/snippets/edifact\", [\"require\", \"exports\", \"module\"], function (require, exports, module) {\n  \"use strict\";\n\n  exports.snippetText = \"## Access Modifiers\\n\\\nsnippet u\\n\\\n\tUN\\n\\\nsnippet un\\n\\\n\tUNB\\n\\\nsnippet pr\\n\\\n\tprivate\\n\\\n##\\n\\\n## Annotations\\n\\\nsnippet before\\n\\\n\t@Before\\n\\\n\tstatic void ${1:intercept}(${2:args}) { ${3} }\\n\\\nsnippet mm\\n\\\n\t@ManyToMany\\n\\\n\t${1}\\n\\\nsnippet mo\\n\\\n\t@ManyToOne\\n\\\n\t${1}\\n\\\nsnippet om\\n\\\n\t@OneToMany${1:(cascade=CascadeType.ALL)}\\n\\\n\t${2}\\n\\\nsnippet oo\\n\\\n\t@OneToOne\\n\\\n\t${1}\\n\\\n##\\n\\\n## Basic Java packages and import\\n\\\nsnippet im\\n\\\n\timport\\n\\\nsnippet j.b\\n\\\n\tjava.beans.\\n\\\nsnippet j.i\\n\\\n\tjava.io.\\n\\\nsnippet j.m\\n\\\n\tjava.math.\\n\\\nsnippet j.n\\n\\\n\tjava.net.\\n\\\nsnippet j.u\\n\\\n\tjava.util.\\n\\\n##\\n\\\n## Class\\n\\\nsnippet cl\\n\\\n\tclass ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2}\\n\\\nsnippet in\\n\\\n\tinterface ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2:extends Parent}${3}\\n\\\nsnippet tc\\n\\\n\tpublic class ${1:`Filename()`} extends ${2:TestCase}\\n\\\n##\\n\\\n## Class Enhancements\\n\\\nsnippet ext\\n\\\n\textends \\n\\\nsnippet imp\\n\\\n\timplements\\n\\\n##\\n\\\n## Comments\\n\\\nsnippet /*\\n\\\n\t/*\\n\\\n\t * ${1}\\n\\\n\t */\\n\\\n##\\n\\\n## Constants\\n\\\nsnippet co\\n\\\n\tstatic public final ${1:String} ${2:var} = ${3};${4}\\n\\\nsnippet cos\\n\\\n\tstatic public final String ${1:var} = \\\"${2}\\\";${3}\\n\\\n##\\n\\\n## Control Statements\\n\\\nsnippet case\\n\\\n\tcase ${1}:\\n\\\n\t\t${2}\\n\\\nsnippet def\\n\\\n\tdefault:\\n\\\n\t\t${2}\\n\\\nsnippet el\\n\\\n\telse\\n\\\nsnippet elif\\n\\\n\telse if (${1}) ${2}\\n\\\nsnippet if\\n\\\n\tif (${1}) ${2}\\n\\\nsnippet sw\\n\\\n\tswitch (${1}) {\\n\\\n\t\t${2}\\n\\\n\t}\\n\\\n##\\n\\\n## Create a Method\\n\\\nsnippet m\\n\\\n\t${1:void} ${2:method}(${3}) ${4:throws }${5}\\n\\\n##\\n\\\n## Create a Variable\\n\\\nsnippet v\\n\\\n\t${1:String} ${2:var}${3: = null}${4};${5}\\n\\\n##\\n\\\n## Enhancements to Methods, variables, classes, etc.\\n\\\nsnippet ab\\n\\\n\tabstract\\n\\\nsnippet fi\\n\\\n\tfinal\\n\\\nsnippet st\\n\\\n\tstatic\\n\\\nsnippet sy\\n\\\n\tsynchronized\\n\\\n##\\n\\\n## Error Methods\\n\\\nsnippet err\\n\\\n\tSystem.err.print(\\\"${1:Message}\\\");\\n\\\nsnippet errf\\n\\\n\tSystem.err.printf(\\\"${1:Message}\\\", ${2:exception});\\n\\\nsnippet errln\\n\\\n\tSystem.err.println(\\\"${1:Message}\\\");\\n\\\n##\\n\\\n## Exception Handling\\n\\\nsnippet as\\n\\\n\tassert ${1:test} : \\\"${2:Failure message}\\\";${3}\\n\\\nsnippet ca\\n\\\n\tcatch(${1:Exception} ${2:e}) ${3}\\n\\\nsnippet thr\\n\\\n\tthrow\\n\\\nsnippet ths\\n\\\n\tthrows\\n\\\nsnippet try\\n\\\n\ttry {\\n\\\n\t\t${3}\\n\\\n\t} catch(${1:Exception} ${2:e}) {\\n\\\n\t}\\n\\\nsnippet tryf\\n\\\n\ttry {\\n\\\n\t\t${3}\\n\\\n\t} catch(${1:Exception} ${2:e}) {\\n\\\n\t} finally {\\n\\\n\t}\\n\\\n##\\n\\\n## Find Methods\\n\\\nsnippet findall\\n\\\n\tList<${1:listName}> ${2:items} = ${1}.findAll();${3}\\n\\\nsnippet findbyid\\n\\\n\t${1:var} ${2:item} = ${1}.findById(${3});${4}\\n\\\n##\\n\\\n## Javadocs\\n\\\nsnippet /**\\n\\\n\t/**\\n\\\n\t * ${1}\\n\\\n\t */\\n\\\nsnippet @au\\n\\\n\t@author `system(\\\"grep \\\\`id -un\\\\` /etc/passwd | cut -d \\\\\\\":\\\\\\\" -f5 | cut -d \\\\\\\",\\\\\\\" -f1\\\")`\\n\\\nsnippet @br\\n\\\n\t@brief ${1:Description}\\n\\\nsnippet @fi\\n\\\n\t@file ${1:`Filename()`}.java\\n\\\nsnippet @pa\\n\\\n\t@param ${1:param}\\n\\\nsnippet @re\\n\\\n\t@return ${1:param}\\n\\\n##\\n\\\n## Logger Methods\\n\\\nsnippet debug\\n\\\n\tLogger.debug(${1:param});${2}\\n\\\nsnippet error\\n\\\n\tLogger.error(${1:param});${2}\\n\\\nsnippet info\\n\\\n\tLogger.info(${1:param});${2}\\n\\\nsnippet warn\\n\\\n\tLogger.warn(${1:param});${2}\\n\\\n##\\n\\\n## Loops\\n\\\nsnippet enfor\\n\\\n\tfor (${1} : ${2}) ${3}\\n\\\nsnippet for\\n\\\n\tfor (${1}; ${2}; ${3}) ${4}\\n\\\nsnippet wh\\n\\\n\twhile (${1}) ${2}\\n\\\n##\\n\\\n## Main method\\n\\\nsnippet main\\n\\\n\tpublic static void main (String[] args) {\\n\\\n\t\t${1:/* code */}\\n\\\n\t}\\n\\\n##\\n\\\n## Print Methods\\n\\\nsnippet print\\n\\\n\tSystem.out.print(\\\"${1:Message}\\\");\\n\\\nsnippet printf\\n\\\n\tSystem.out.printf(\\\"${1:Message}\\\", ${2:args});\\n\\\nsnippet println\\n\\\n\tSystem.out.println(${1});\\n\\\n##\\n\\\n## Render Methods\\n\\\nsnippet ren\\n\\\n\trender(${1:param});${2}\\n\\\nsnippet rena\\n\\\n\trenderArgs.put(\\\"${1}\\\", ${2});${3}\\n\\\nsnippet renb\\n\\\n\trenderBinary(${1:param});${2}\\n\\\nsnippet renj\\n\\\n\trenderJSON(${1:param});${2}\\n\\\nsnippet renx\\n\\\n\trenderXml(${1:param});${2}\\n\\\n##\\n\\\n## Setter and Getter Methods\\n\\\nsnippet set\\n\\\n\t${1:public} void set${3:}(${2:String} ${4:}){\\n\\\n\t\tthis.$4 = $4;\\n\\\n\t}\\n\\\nsnippet get\\n\\\n\t${1:public} ${2:String} get${3:}(){\\n\\\n\t\treturn this.${4:};\\n\\\n\t}\\n\\\n##\\n\\\n## Terminate Methods or Loops\\n\\\nsnippet re\\n\\\n\treturn\\n\\\nsnippet br\\n\\\n\tbreak;\\n\\\n##\\n\\\n## Test Methods\\n\\\nsnippet t\\n\\\n\tpublic void test${1:Name}() throws Exception {\\n\\\n\t\t${2}\\n\\\n\t}\\n\\\nsnippet test\\n\\\n\t@Test\\n\\\n\tpublic void test${1:Name}() throws Exception {\\n\\\n\t\t${2}\\n\\\n\t}\\n\\\n##\\n\\\n## Utils\\n\\\nsnippet Sc\\n\\\n\tScanner\\n\\\n##\\n\\\n## Miscellaneous\\n\\\nsnippet action\\n\\\n\tpublic static void ${1:index}(${2:args}) { ${3} }\\n\\\nsnippet rnf\\n\\\n\tnotFound(${1:param});${2}\\n\\\nsnippet rnfin\\n\\\n\tnotFoundIfNull(${1:param});${2}\\n\\\nsnippet rr\\n\\\n\tredirect(${1:param});${2}\\n\\\nsnippet ru\\n\\\n\tunauthorized(${1:param});${2}\\n\\\nsnippet unless\\n\\\n\t(unless=${1:param});${2}\\n\\\n\";\n  exports.scope = \"edifact\";\n});\n\n(function () {\n  ace.require([\"ace/snippets/edifact\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/snippets/edifact.js"],"names":["ace","define","require","exports","module","snippetText","scope","m"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,sBAAX,EAAkC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,CAAlC,EAAkE,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACjG;;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAAtB;AAiPAF,EAAAA,OAAO,CAACG,KAAR,GAAgB,SAAhB;AAEH,CAtPD;;AAsPmB,CAAC,YAAW;AACXN,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,sBAAD,CAAZ,EAAsC,UAASK,CAAT,EAAY;AAC9C,QAAI,OAAOH,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBI,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/snippets/edifact\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\n    \"use strict\";\n    \n    exports.snippetText = \"## Access Modifiers\\n\\\nsnippet u\\n\\\n\tUN\\n\\\nsnippet un\\n\\\n\tUNB\\n\\\nsnippet pr\\n\\\n\tprivate\\n\\\n##\\n\\\n## Annotations\\n\\\nsnippet before\\n\\\n\t@Before\\n\\\n\tstatic void ${1:intercept}(${2:args}) { ${3} }\\n\\\nsnippet mm\\n\\\n\t@ManyToMany\\n\\\n\t${1}\\n\\\nsnippet mo\\n\\\n\t@ManyToOne\\n\\\n\t${1}\\n\\\nsnippet om\\n\\\n\t@OneToMany${1:(cascade=CascadeType.ALL)}\\n\\\n\t${2}\\n\\\nsnippet oo\\n\\\n\t@OneToOne\\n\\\n\t${1}\\n\\\n##\\n\\\n## Basic Java packages and import\\n\\\nsnippet im\\n\\\n\timport\\n\\\nsnippet j.b\\n\\\n\tjava.beans.\\n\\\nsnippet j.i\\n\\\n\tjava.io.\\n\\\nsnippet j.m\\n\\\n\tjava.math.\\n\\\nsnippet j.n\\n\\\n\tjava.net.\\n\\\nsnippet j.u\\n\\\n\tjava.util.\\n\\\n##\\n\\\n## Class\\n\\\nsnippet cl\\n\\\n\tclass ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2}\\n\\\nsnippet in\\n\\\n\tinterface ${1:`Filename(\\\"\\\", \\\"untitled\\\")`} ${2:extends Parent}${3}\\n\\\nsnippet tc\\n\\\n\tpublic class ${1:`Filename()`} extends ${2:TestCase}\\n\\\n##\\n\\\n## Class Enhancements\\n\\\nsnippet ext\\n\\\n\textends \\n\\\nsnippet imp\\n\\\n\timplements\\n\\\n##\\n\\\n## Comments\\n\\\nsnippet /*\\n\\\n\t/*\\n\\\n\t * ${1}\\n\\\n\t */\\n\\\n##\\n\\\n## Constants\\n\\\nsnippet co\\n\\\n\tstatic public final ${1:String} ${2:var} = ${3};${4}\\n\\\nsnippet cos\\n\\\n\tstatic public final String ${1:var} = \\\"${2}\\\";${3}\\n\\\n##\\n\\\n## Control Statements\\n\\\nsnippet case\\n\\\n\tcase ${1}:\\n\\\n\t\t${2}\\n\\\nsnippet def\\n\\\n\tdefault:\\n\\\n\t\t${2}\\n\\\nsnippet el\\n\\\n\telse\\n\\\nsnippet elif\\n\\\n\telse if (${1}) ${2}\\n\\\nsnippet if\\n\\\n\tif (${1}) ${2}\\n\\\nsnippet sw\\n\\\n\tswitch (${1}) {\\n\\\n\t\t${2}\\n\\\n\t}\\n\\\n##\\n\\\n## Create a Method\\n\\\nsnippet m\\n\\\n\t${1:void} ${2:method}(${3}) ${4:throws }${5}\\n\\\n##\\n\\\n## Create a Variable\\n\\\nsnippet v\\n\\\n\t${1:String} ${2:var}${3: = null}${4};${5}\\n\\\n##\\n\\\n## Enhancements to Methods, variables, classes, etc.\\n\\\nsnippet ab\\n\\\n\tabstract\\n\\\nsnippet fi\\n\\\n\tfinal\\n\\\nsnippet st\\n\\\n\tstatic\\n\\\nsnippet sy\\n\\\n\tsynchronized\\n\\\n##\\n\\\n## Error Methods\\n\\\nsnippet err\\n\\\n\tSystem.err.print(\\\"${1:Message}\\\");\\n\\\nsnippet errf\\n\\\n\tSystem.err.printf(\\\"${1:Message}\\\", ${2:exception});\\n\\\nsnippet errln\\n\\\n\tSystem.err.println(\\\"${1:Message}\\\");\\n\\\n##\\n\\\n## Exception Handling\\n\\\nsnippet as\\n\\\n\tassert ${1:test} : \\\"${2:Failure message}\\\";${3}\\n\\\nsnippet ca\\n\\\n\tcatch(${1:Exception} ${2:e}) ${3}\\n\\\nsnippet thr\\n\\\n\tthrow\\n\\\nsnippet ths\\n\\\n\tthrows\\n\\\nsnippet try\\n\\\n\ttry {\\n\\\n\t\t${3}\\n\\\n\t} catch(${1:Exception} ${2:e}) {\\n\\\n\t}\\n\\\nsnippet tryf\\n\\\n\ttry {\\n\\\n\t\t${3}\\n\\\n\t} catch(${1:Exception} ${2:e}) {\\n\\\n\t} finally {\\n\\\n\t}\\n\\\n##\\n\\\n## Find Methods\\n\\\nsnippet findall\\n\\\n\tList<${1:listName}> ${2:items} = ${1}.findAll();${3}\\n\\\nsnippet findbyid\\n\\\n\t${1:var} ${2:item} = ${1}.findById(${3});${4}\\n\\\n##\\n\\\n## Javadocs\\n\\\nsnippet /**\\n\\\n\t/**\\n\\\n\t * ${1}\\n\\\n\t */\\n\\\nsnippet @au\\n\\\n\t@author `system(\\\"grep \\\\`id -un\\\\` /etc/passwd | cut -d \\\\\\\":\\\\\\\" -f5 | cut -d \\\\\\\",\\\\\\\" -f1\\\")`\\n\\\nsnippet @br\\n\\\n\t@brief ${1:Description}\\n\\\nsnippet @fi\\n\\\n\t@file ${1:`Filename()`}.java\\n\\\nsnippet @pa\\n\\\n\t@param ${1:param}\\n\\\nsnippet @re\\n\\\n\t@return ${1:param}\\n\\\n##\\n\\\n## Logger Methods\\n\\\nsnippet debug\\n\\\n\tLogger.debug(${1:param});${2}\\n\\\nsnippet error\\n\\\n\tLogger.error(${1:param});${2}\\n\\\nsnippet info\\n\\\n\tLogger.info(${1:param});${2}\\n\\\nsnippet warn\\n\\\n\tLogger.warn(${1:param});${2}\\n\\\n##\\n\\\n## Loops\\n\\\nsnippet enfor\\n\\\n\tfor (${1} : ${2}) ${3}\\n\\\nsnippet for\\n\\\n\tfor (${1}; ${2}; ${3}) ${4}\\n\\\nsnippet wh\\n\\\n\twhile (${1}) ${2}\\n\\\n##\\n\\\n## Main method\\n\\\nsnippet main\\n\\\n\tpublic static void main (String[] args) {\\n\\\n\t\t${1:/* code */}\\n\\\n\t}\\n\\\n##\\n\\\n## Print Methods\\n\\\nsnippet print\\n\\\n\tSystem.out.print(\\\"${1:Message}\\\");\\n\\\nsnippet printf\\n\\\n\tSystem.out.printf(\\\"${1:Message}\\\", ${2:args});\\n\\\nsnippet println\\n\\\n\tSystem.out.println(${1});\\n\\\n##\\n\\\n## Render Methods\\n\\\nsnippet ren\\n\\\n\trender(${1:param});${2}\\n\\\nsnippet rena\\n\\\n\trenderArgs.put(\\\"${1}\\\", ${2});${3}\\n\\\nsnippet renb\\n\\\n\trenderBinary(${1:param});${2}\\n\\\nsnippet renj\\n\\\n\trenderJSON(${1:param});${2}\\n\\\nsnippet renx\\n\\\n\trenderXml(${1:param});${2}\\n\\\n##\\n\\\n## Setter and Getter Methods\\n\\\nsnippet set\\n\\\n\t${1:public} void set${3:}(${2:String} ${4:}){\\n\\\n\t\tthis.$4 = $4;\\n\\\n\t}\\n\\\nsnippet get\\n\\\n\t${1:public} ${2:String} get${3:}(){\\n\\\n\t\treturn this.${4:};\\n\\\n\t}\\n\\\n##\\n\\\n## Terminate Methods or Loops\\n\\\nsnippet re\\n\\\n\treturn\\n\\\nsnippet br\\n\\\n\tbreak;\\n\\\n##\\n\\\n## Test Methods\\n\\\nsnippet t\\n\\\n\tpublic void test${1:Name}() throws Exception {\\n\\\n\t\t${2}\\n\\\n\t}\\n\\\nsnippet test\\n\\\n\t@Test\\n\\\n\tpublic void test${1:Name}() throws Exception {\\n\\\n\t\t${2}\\n\\\n\t}\\n\\\n##\\n\\\n## Utils\\n\\\nsnippet Sc\\n\\\n\tScanner\\n\\\n##\\n\\\n## Miscellaneous\\n\\\nsnippet action\\n\\\n\tpublic static void ${1:index}(${2:args}) { ${3} }\\n\\\nsnippet rnf\\n\\\n\tnotFound(${1:param});${2}\\n\\\nsnippet rnfin\\n\\\n\tnotFoundIfNull(${1:param});${2}\\n\\\nsnippet rr\\n\\\n\tredirect(${1:param});${2}\\n\\\nsnippet ru\\n\\\n\tunauthorized(${1:param});${2}\\n\\\nsnippet unless\\n\\\n\t(unless=${1:param});${2}\\n\\\n\";\n    exports.scope = \"edifact\";\n    \n});                (function() {\n                    ace.require([\"ace/snippets/edifact\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}