{"ast":null,"code":"import { addNoneTerminalToCst, addTerminalToCst, setNodeLocationFull, setNodeLocationOnlyOffset } from \"../../cst/cst\";\nimport { has, isUndefined, keys, NOOP } from \"../../../utils/utils\";\nimport { createBaseSemanticVisitorConstructor, createBaseVisitorConstructorWithDefaults } from \"../../cst/cst_visitor\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * This trait is responsible for the CST building logic.\n */\n\nvar TreeBuilder =\n/** @class */\nfunction () {\n  function TreeBuilder() {}\n\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = []; // outputCst is no longer exposed/defined in the pubic API\n\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\") ? config.nodeLocationTracking : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = NOOP;\n      this.cstFinallyStateUpdate = NOOP;\n      this.cstPostTerminal = NOOP;\n      this.cstPostNonTerminal = NOOP;\n      this.cstPostRule = NOOP;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = NOOP;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = NOOP;\n          this.setNodeLocationFromNode = NOOP;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n          this.cstPostRule = NOOP;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = NOOP;\n          this.setNodeLocationFromNode = NOOP;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = NOOP;\n        this.setNodeLocationFromNode = NOOP;\n        this.cstPostRule = NOOP;\n        this.setInitialNodeLocation = NOOP;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\" + config.nodeLocationTracking + \"\\\"\");\n      }\n    }\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: {}\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    } // \"empty\" CstNode edge case\n    else {\n        loc.startOffset = NaN;\n        loc.startLine = NaN;\n        loc.startColumn = NaN;\n      }\n  };\n\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    } // \"empty\" CstNode edge case\n    else {\n        loc.startOffset = NaN;\n      }\n  };\n\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return this.baseCstVisitorConstructor;\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n\n  return TreeBuilder;\n}();\n\nexport { TreeBuilder };","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/tree_builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { addNoneTerminalToCst, addTerminalToCst, setNodeLocationFull, setNodeLocationOnlyOffset } from \"../../cst/cst\";\nimport { has, isUndefined, keys, NOOP } from \"../../../utils/utils\";\nimport { createBaseSemanticVisitorConstructor, createBaseVisitorConstructorWithDefaults } from \"../../cst/cst_visitor\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\";\n/**\n * This trait is responsible for the CST building logic.\n */\nvar TreeBuilder = /** @class */ (function () {\n    function TreeBuilder() {\n    }\n    TreeBuilder.prototype.initTreeBuilder = function (config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking\n            : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = NOOP;\n            this.cstFinallyStateUpdate = NOOP;\n            this.cstPostTerminal = NOOP;\n            this.cstPostNonTerminal = NOOP;\n            this.cstPostRule = NOOP;\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = setNodeLocationFull;\n                    this.setNodeLocationFromNode = setNodeLocationFull;\n                    this.cstPostRule = NOOP;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = NOOP;\n                    this.setNodeLocationFromNode = NOOP;\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = setNodeLocationOnlyOffset;\n                    this.cstPostRule = NOOP;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = NOOP;\n                    this.setNodeLocationFromNode = NOOP;\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = NOOP;\n                this.setNodeLocationFromNode = NOOP;\n                this.cstPostRule = NOOP;\n                this.setInitialNodeLocation = NOOP;\n            }\n            else {\n                throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\" + config.nodeLocationTracking + \"\\\"\");\n            }\n        }\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n        var nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {\n        var cstNode = {\n            name: fullRuleName,\n            children: {}\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    };\n    TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n        this.CST_STACK.pop();\n    };\n    TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n        var prevToken = this.LA(0);\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n        var prevToken = this.LA(0);\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        addTerminalToCst(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    };\n    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n        var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n        if (isUndefined(this.baseCstVisitorConstructor)) {\n            var newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(this.className, keys(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n        if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n            var newConstructor = createBaseVisitorConstructorWithDefaults(this.className, keys(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    };\n    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    };\n    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    };\n    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n        var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    };\n    return TreeBuilder;\n}());\nexport { TreeBuilder };\n//# sourceMappingURL=tree_builder.js.map"]},"metadata":{},"sourceType":"module"}