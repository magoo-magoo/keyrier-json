{"ast":null,"code":"import { uniq, map, flatten } from \"../../utils/utils\";\nimport { NonTerminal, Terminal } from \"./gast/gast_public\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd } from \"./gast/gast\";\nexport function first(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first(prod.referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\nexport function firstForSequence(prod) {\n  var firstSet = [];\n  var seq = prod.definition;\n  var nextSubProdIdx = 0;\n  var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  var currSubProd; // so we enter the loop at least once (if the definition is not empty\n\n  var isLastInnerProdOptional = true; // scan a sequence until it's end or until we have found a NONE optional production in it\n\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n  var allAlternativesFirsts = map(prod.definition, function (innerProd) {\n    return first(innerProd);\n  });\n  return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n  return [terminal.terminalType];\n}","map":{"version":3,"sources":["../../../../src/parse/grammar/first.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,GAAf,EAAoB,OAApB,QAAmC,mBAAnC;AACA,SAA6B,WAA7B,EAA0C,QAA1C,QAA0D,oBAA1D;AACA,SAAS,eAAT,EAA0B,cAA1B,EAA0C,cAA1C,QAAgE,aAAhE;AAGA,OAAM,SAAU,KAAV,CAAgB,IAAhB,EAAiC;AACrC;AACA,MAAI,IAAI,YAAY,WAApB,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,KAAK,CAAe,IAAK,CAAC,cAArB,CAAZ;AACD,GAVD,MAUO,IAAI,IAAI,YAAY,QAApB,EAA8B;AACnC,WAAO,gBAAgB,CAAW,IAAX,CAAvB;AACD,GAFM,MAEA,IAAI,cAAc,CAAC,IAAD,CAAlB,EAA0B;AAC/B,WAAO,gBAAgB,CAAqB,IAArB,CAAvB;AACD,GAFM,MAEA,IAAI,eAAe,CAAC,IAAD,CAAnB,EAA2B;AAChC,WAAO,iBAAiB,CAAqB,IAArB,CAAxB;AACD,GAFM,MAEA;AACL,UAAM,KAAK,CAAC,sBAAD,CAAX;AACD;AACF;AAED,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAmD;AACvD,MAAI,QAAQ,GAAgB,EAA5B;AACA,MAAI,GAAG,GAAG,IAAI,CAAC,UAAf;AACA,MAAI,cAAc,GAAG,CAArB;AACA,MAAI,sBAAsB,GAAG,GAAG,CAAC,MAAJ,GAAa,cAA1C;AACA,MAAI,WAAJ,CALuD,CAMvD;;AACA,MAAI,uBAAuB,GAAG,IAA9B,CAPuD,CAQvD;;AACA,SAAO,sBAAsB,IAAI,uBAAjC,EAA0D;AACxD,IAAA,WAAW,GAAG,GAAG,CAAC,cAAD,CAAjB;AACA,IAAA,uBAAuB,GAAG,cAAc,CAAC,WAAD,CAAxC;AACA,IAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT,CAAgB,KAAK,CAAC,WAAD,CAArB,CAAX;AACA,IAAA,cAAc,GAAG,cAAc,GAAG,CAAlC;AACA,IAAA,sBAAsB,GAAG,GAAG,CAAC,MAAJ,GAAa,cAAtC;AACD;;AAED,SAAO,IAAI,CAAC,QAAD,CAAX;AACD;AAED,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAoD;AACxD,MAAI,qBAAqB,GAAkB,GAAG,CAC5C,IAAI,CAAC,UADuC,EAE5C,UAAC,SAAD,EAAU;AACR,WAAO,KAAK,CAAC,SAAD,CAAZ;AACD,GAJ2C,CAA9C;AAMA,SAAO,IAAI,CAAC,OAAO,CAAY,qBAAZ,CAAR,CAAX;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,QAA3B,EAA6C;AACjD,SAAO,CAAC,QAAQ,CAAC,YAAV,CAAP;AACD","sourceRoot":"","sourcesContent":["import { uniq, map, flatten } from \"../../utils/utils\";\nimport { NonTerminal, Terminal } from \"./gast/gast_public\";\nimport { isBranchingProd, isOptionalProd, isSequenceProd } from \"./gast/gast\";\nexport function first(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof NonTerminal) {\n        // this could in theory cause infinite loops if\n        // (1) prod A refs prod B.\n        // (2) prod B refs prod A\n        // (3) AB can match the empty set\n        // in other words a cycle where everything is optional so the first will keep\n        // looking ahead for the next optional part and will never exit\n        // currently there is no safeguard for this unique edge case because\n        // (1) not sure a grammar in which this can happen is useful for anything (productive)\n        return first(prod.referencedRule);\n    }\n    else if (prod instanceof Terminal) {\n        return firstForTerminal(prod);\n    }\n    else if (isSequenceProd(prod)) {\n        return firstForSequence(prod);\n    }\n    else if (isBranchingProd(prod)) {\n        return firstForBranching(prod);\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexport function firstForSequence(prod) {\n    var firstSet = [];\n    var seq = prod.definition;\n    var nextSubProdIdx = 0;\n    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    var currSubProd;\n    // so we enter the loop at least once (if the definition is not empty\n    var isLastInnerProdOptional = true;\n    // scan a sequence until it's end or until we have found a NONE optional production in it\n    while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n        currSubProd = seq[nextSubProdIdx];\n        isLastInnerProdOptional = isOptionalProd(currSubProd);\n        firstSet = firstSet.concat(first(currSubProd));\n        nextSubProdIdx = nextSubProdIdx + 1;\n        hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n    }\n    return uniq(firstSet);\n}\nexport function firstForBranching(prod) {\n    var allAlternativesFirsts = map(prod.definition, function (innerProd) {\n        return first(innerProd);\n    });\n    return uniq(flatten(allAlternativesFirsts));\n}\nexport function firstForTerminal(terminal) {\n    return [terminal.terminalType];\n}\n//# sourceMappingURL=first.js.map"]},"metadata":{},"sourceType":"module"}