{"ast":null,"code":"/* eslint-disable */\nimport { useLayoutEffect, useState } from 'react';\nimport screenfull from 'screenfull';\n\nvar noop = function () {};\n\nvar useFullscreen = function (ref, on, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var video = options.video,\n      _a = options.onClose,\n      onClose = _a === void 0 ? noop : _a;\n\n  var _b = useState(on),\n      isFullscreen = _b[0],\n      setIsFullscreen = _b[1];\n\n  useLayoutEffect(function () {\n    if (!on) {\n      return;\n    }\n\n    if (!ref.current) {\n      return;\n    }\n\n    var onWebkitEndFullscreen = function () {\n      video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n      onClose();\n    };\n\n    var onChange = function () {\n      if (screenfull.isEnabled) {\n        var isScreenfullFullscreen = screenfull.isFullscreen;\n        setIsFullscreen(isScreenfullFullscreen);\n\n        if (!isScreenfullFullscreen) {\n          onClose();\n        }\n      }\n    };\n\n    if (screenfull.isEnabled) {\n      try {\n        screenfull.request(ref.current);\n        setIsFullscreen(true);\n      } catch (error) {\n        onClose(error);\n        setIsFullscreen(false);\n      }\n\n      screenfull.on('change', onChange);\n    } else if (video && video.current && video.current.webkitEnterFullscreen) {\n      video.current.webkitEnterFullscreen();\n      video.current.addEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n      setIsFullscreen(true);\n    } else {\n      onClose();\n      setIsFullscreen(false);\n    }\n\n    return function () {\n      setIsFullscreen(false);\n\n      if (screenfull.isEnabled) {\n        try {\n          screenfull.off('change', onChange);\n          screenfull.exit();\n        } catch (_a) {}\n      } else if (video && video.current && video.current.webkitExitFullscreen) {\n        video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n        video.current.webkitExitFullscreen();\n      }\n    };\n  }, [on, video, ref]);\n  return isFullscreen;\n};\n\nexport default useFullscreen;","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/react-use/esm/useFullscreen.js"],"names":["useLayoutEffect","useState","screenfull","noop","useFullscreen","ref","on","options","video","_a","onClose","_b","isFullscreen","setIsFullscreen","current","onWebkitEndFullscreen","removeEventListener","onChange","isEnabled","isScreenfullFullscreen","request","error","webkitEnterFullscreen","addEventListener","off","exit","webkitExitFullscreen"],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport { useLayoutEffect, useState } from 'react';\nimport screenfull from 'screenfull';\nvar noop = function () { };\nvar useFullscreen = function (ref, on, options) {\n    if (options === void 0) { options = {}; }\n    var video = options.video, _a = options.onClose, onClose = _a === void 0 ? noop : _a;\n    var _b = useState(on), isFullscreen = _b[0], setIsFullscreen = _b[1];\n    useLayoutEffect(function () {\n        if (!on) {\n            return;\n        }\n        if (!ref.current) {\n            return;\n        }\n        var onWebkitEndFullscreen = function () {\n            video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n            onClose();\n        };\n        var onChange = function () {\n            if (screenfull.isEnabled) {\n                var isScreenfullFullscreen = screenfull.isFullscreen;\n                setIsFullscreen(isScreenfullFullscreen);\n                if (!isScreenfullFullscreen) {\n                    onClose();\n                }\n            }\n        };\n        if (screenfull.isEnabled) {\n            try {\n                screenfull.request(ref.current);\n                setIsFullscreen(true);\n            }\n            catch (error) {\n                onClose(error);\n                setIsFullscreen(false);\n            }\n            screenfull.on('change', onChange);\n        }\n        else if (video && video.current && video.current.webkitEnterFullscreen) {\n            video.current.webkitEnterFullscreen();\n            video.current.addEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n            setIsFullscreen(true);\n        }\n        else {\n            onClose();\n            setIsFullscreen(false);\n        }\n        return function () {\n            setIsFullscreen(false);\n            if (screenfull.isEnabled) {\n                try {\n                    screenfull.off('change', onChange);\n                    screenfull.exit();\n                }\n                catch (_a) { }\n            }\n            else if (video && video.current && video.current.webkitExitFullscreen) {\n                video.current.removeEventListener('webkitendfullscreen', onWebkitEndFullscreen);\n                video.current.webkitExitFullscreen();\n            }\n        };\n    }, [on, video, ref]);\n    return isFullscreen;\n};\nexport default useFullscreen;\n"]},"metadata":{},"sourceType":"module"}