{"ast":null,"code":"var _jsxFileName = \"/home/magoo/projects/keyrier-json/ui/src/components/output/JsonView.tsx\";\nimport * as React from 'react';\nimport { getOutputObject, getOutputSearchTerm, getOutputSearchMatch, getOutputObjectSize, getDebugMode } from '../../store/selectors';\nimport { connect } from 'react-redux';\nimport { DebounceInput } from 'react-debounce-input';\nimport { updateSearchTerm } from '../../actions/actions';\nimport { Suspense, lazy, memo, useCallback, useState } from 'react';\nimport { withErrorBoundary } from '../../components/common/ErrorBoundary';\nimport deepEqual from 'fast-deep-equal';\nimport { FormGroup, Label, CustomInput } from 'reactstrap';\nimport { prettyPrintBytes } from 'core/converters/string';\nimport { withPerformance } from 'core/logging/performance';\nconst ReactJson = lazy(() => import(\n/* webpackChunkName: \"react-json-view\" */\n'react-json-view'));\nconst errorStyles = {\n  border: '3px solid red'\n};\n\nconst noop = () => null;\n\nconst JsonView = ({\n  src,\n  searchTerm,\n  onSearchChange,\n  match,\n  size,\n  debugMode\n}) => {\n  const [bigSize, setBigSize] = useState(4683932);\n  const isTooBig = size > bigSize;\n  const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"jsonView\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DebounceInput, {\n    style: searchTerm && searchTerm !== '' && !match ? errorStyles : {},\n    value: searchTerm,\n    className: \"form-control\",\n    onChange: handlechange,\n    debounceTimeout: 500,\n    placeholder: \"Type your search term...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Suspense, {\n    fallback: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 33\n      }\n    }, \"Loading...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, debugMode ? /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    for: \"exampleCustomRange\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 25\n    }\n  }, \"heavy object size: \", prettyPrintBytes(bigSize)), /*#__PURE__*/React.createElement(CustomInput, {\n    type: \"range\",\n    id: \"exampleCustomRange\",\n    name: \"customRange\",\n    value: bigSize,\n    steps: 1024 * 100,\n    min: 1024 * 100,\n    max: 1024 * 1024,\n    onChange: e => setBigSize(parseInt(e.currentTarget.value, 10)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null), isTooBig ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(ReactJson, {\n    src: src ? src : {},\n    name: \"data\",\n    iconStyle: \"triangle\",\n    indentWidth: 8,\n    onAdd: noop,\n    onDelete: noop,\n    onEdit: noop,\n    onSelect: noop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }\n  })));\n};\n\nconst mapStateToProps = state => {\n  return {\n    src: getOutputObject(state),\n    searchTerm: getOutputSearchTerm(state),\n    match: getOutputSearchMatch(state),\n    size: getOutputObjectSize(state),\n    debugMode: getDebugMode(state)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  onSearchChange: updateSearchTerm\n})(withErrorBoundary(memo(withPerformance(JsonView, 'JsonView'), (prev, next) => deepEqual(prev, next))));","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/ui/src/components/output/JsonView.tsx"],"names":["React","getOutputObject","getOutputSearchTerm","getOutputSearchMatch","getOutputObjectSize","getDebugMode","connect","DebounceInput","updateSearchTerm","Suspense","lazy","memo","useCallback","useState","withErrorBoundary","deepEqual","FormGroup","Label","CustomInput","prettyPrintBytes","withPerformance","ReactJson","errorStyles","border","noop","JsonView","src","searchTerm","onSearchChange","match","size","debugMode","bigSize","setBigSize","isTooBig","handlechange","e","target","value","parseInt","currentTarget","mapStateToProps","state","prev","next"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {\n    getOutputObject,\n    getOutputSearchTerm,\n    getOutputSearchMatch,\n    getOutputObjectSize,\n    getDebugMode,\n} from '../../store/selectors'\nimport { RootState } from '../../state/State'\nimport { connect } from 'react-redux'\nimport { DebounceInput } from 'react-debounce-input'\nimport { updateSearchTerm } from '../../actions/actions'\nimport { Suspense, lazy, memo, useCallback, FC, useState } from 'react'\nimport { withErrorBoundary } from '../../components/common/ErrorBoundary'\nimport deepEqual from 'fast-deep-equal'\nimport { FormGroup, Label, CustomInput } from 'reactstrap'\nimport { prettyPrintBytes } from 'core/converters/string'\nimport { withPerformance } from 'core/logging/performance'\nconst ReactJson = lazy(() => import(/* webpackChunkName: \"react-json-view\" */ 'react-json-view'))\n\ninterface Props {\n    src: object | null\n    searchTerm: string | undefined\n    match: boolean\n    onSearchChange: typeof updateSearchTerm\n    size: number\n    debugMode: boolean\n}\n\nconst errorStyles = { border: '3px solid red' }\n\nconst noop = () => null\n\nconst JsonView: FC<Props> = ({ src, searchTerm, onSearchChange, match, size, debugMode }) => {\n    const [bigSize, setBigSize] = useState(4683932)\n    const isTooBig = size > bigSize\n    const handlechange = useCallback(e => onSearchChange(e.target.value), [onSearchChange])\n    return (\n        <div id=\"jsonView\">\n            <DebounceInput\n                style={searchTerm && searchTerm !== '' && !match ? errorStyles : {}}\n                value={searchTerm}\n                className=\"form-control\"\n                onChange={handlechange}\n                debounceTimeout={500}\n                placeholder=\"Type your search term...\"\n            />\n            <Suspense fallback={<div>Loading...</div>}>\n                {debugMode ? (\n                    <FormGroup>\n                        <Label for=\"exampleCustomRange\">heavy object size: {prettyPrintBytes(bigSize)}</Label>\n                        <CustomInput\n                            type=\"range\"\n                            id=\"exampleCustomRange\"\n                            name=\"customRange\"\n                            value={bigSize}\n                            steps={1024 * 100}\n                            min={1024 * 100}\n                            max={1024 * 1024}\n                            onChange={e => setBigSize(parseInt(e.currentTarget.value, 10))}\n                        />\n                    </FormGroup>\n                ) : (\n                    <></>\n                )}\n                {isTooBig ? (\n                    <></>\n                ) : (\n                    <ReactJson\n                        src={src ? src : {}}\n                        name=\"data\"\n                        iconStyle=\"triangle\"\n                        indentWidth={8}\n                        onAdd={noop}\n                        onDelete={noop}\n                        onEdit={noop}\n                        onSelect={noop}\n                    />\n                )}\n            </Suspense>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: RootState) => {\n    return {\n        src: getOutputObject(state),\n        searchTerm: getOutputSearchTerm(state),\n        match: getOutputSearchMatch(state),\n        size: getOutputObjectSize(state),\n        debugMode: getDebugMode(state),\n    }\n}\n\nexport default connect(mapStateToProps, { onSearchChange: updateSearchTerm })(\n    withErrorBoundary(memo(withPerformance(JsonView, 'JsonView'), (prev, next) => deepEqual(prev, next)))\n)\n"]},"metadata":{},"sourceType":"module"}