{"ast":null,"code":"ace.define(\"ace/mode/doc_comment_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = function () {\n    this.$rules = {\n      \"start\": [{\n        token: \"comment.doc.tag\",\n        regex: \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n\n      }, DocCommentHighlightRules.getTagRule(), {\n        defaultToken: \"comment.doc\",\n        caseInsensitive: true\n      }]\n    };\n  };\n\n  oop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\n  DocCommentHighlightRules.getTagRule = function (start) {\n    return {\n      token: \"comment.doc.tag.storage.type\",\n      regex: \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n  };\n\n  DocCommentHighlightRules.getStartRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // doc comment\n      regex: \"\\\\/\\\\*(?=\\\\*)\",\n      next: start\n    };\n  };\n\n  DocCommentHighlightRules.getEndRule = function (start) {\n    return {\n      token: \"comment.doc\",\n      // closing comment\n      regex: \"\\\\*\\\\/\",\n      next: start\n    };\n  };\n\n  exports.DocCommentHighlightRules = DocCommentHighlightRules;\n});\nace.define(\"ace/mode/apex_highlight_rules\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text_highlight_rules\", \"ace/mode/doc_comment_highlight_rules\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextHighlightRules = require(\"../mode/text_highlight_rules\").TextHighlightRules;\n\n  var DocCommentHighlightRules = require(\"../mode/doc_comment_highlight_rules\").DocCommentHighlightRules;\n\n  var ApexHighlightRules = function () {\n    var mainKeywordMapper = this.createKeywordMapper({\n      \"variable.language\": \"activate|any|autonomous|begin|bigdecimal|byte|cast|char|collect|const\" + \"|end|exit|export|float|goto|group|having|hint|import|inner|into|join|loop|number|object|of|outer\" + \"|parallel|pragma|retrieve|returning|search|short|stat|synchronized|then|this_month\" + \"|transaction|type|when\",\n      \"keyword\": \"private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final\" + \"|and|array|as|asc|break|bulk|by|catch|class|commit|continue|convertcurrency\" + \"|delete|desc|do|else|enum|extends|false|final|finally|for|from|future|global\" + \"|if|implements|in|insert|instanceof|interface|last_90_days|last_month\" + \"|last_n_days|last_week|like|limit|list|map|merge|new|next_90_days|next_month|next_n_days\" + \"|next_week|not|null|nulls|on|or|override|package|return\" + \"|rollback|savepoint|select|set|sort|super|testmethod|this|this_week|throw|today\" + \"|tolabel|tomorrow|trigger|true|try|undelete|update|upsert|using|virtual|webservice\" + \"|where|while|yesterday|switch|case|default\",\n      \"storage.type\": \"def|boolean|byte|char|short|int|float|pblob|date|datetime|decimal|double|id|integer|long|string|time|void|blob|Object\",\n      \"constant.language\": \"true|false|null|after|before|count|excludes|first|includes|last|order|sharing|with\",\n      \"support.function\": \"system|apex|label|apexpages|userinfo|schema\"\n    }, \"identifier\", true);\n\n    function keywordMapper(value) {\n      if (value.slice(-3) == \"__c\") return \"support.function\";\n      return mainKeywordMapper(value);\n    }\n\n    function string(start, options) {\n      return {\n        regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n        token: \"string.start\",\n        next: [{\n          regex: options.escape,\n          token: \"character.escape\"\n        }, {\n          regex: options.error,\n          token: \"error.invalid\"\n        }, {\n          regex: start + (options.multiline ? \"\" : \"|$\"),\n          token: \"string.end\",\n          next: options.next || \"start\"\n        }, {\n          defaultToken: \"string\"\n        }]\n      };\n    }\n\n    function comments() {\n      return [{\n        token: \"comment\",\n        regex: \"\\\\/\\\\/(?=.)\",\n        next: [DocCommentHighlightRules.getTagRule(), {\n          token: \"comment\",\n          regex: \"$|^\",\n          next: \"start\"\n        }, {\n          defaultToken: \"comment\",\n          caseInsensitive: true\n        }]\n      }, DocCommentHighlightRules.getStartRule(\"doc-start\"), {\n        token: \"comment\",\n        // multi line comment\n        regex: /\\/\\*/,\n        next: [DocCommentHighlightRules.getTagRule(), {\n          token: \"comment\",\n          regex: \"\\\\*\\\\/\",\n          next: \"start\"\n        }, {\n          defaultToken: \"comment\",\n          caseInsensitive: true\n        }]\n      }];\n    }\n\n    this.$rules = {\n      start: [string(\"'\", {\n        escape: /\\\\[nb'\"\\\\]/,\n        error: /\\\\./,\n        multiline: false\n      }), comments(\"c\"), {\n        type: \"decoration\",\n        token: [\"meta.package.apex\", \"keyword.other.package.apex\", \"meta.package.apex\", \"storage.modifier.package.apex\", \"meta.package.apex\", \"punctuation.terminator.apex\"],\n        regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*)((?:;)?))?/\n      }, {\n        regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n        token: \"constant.language\"\n      }, {\n        regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n        token: keywordMapper\n      }, {\n        regex: \"`#%\",\n        token: \"error.invalid\"\n      }, {\n        token: \"constant.numeric\",\n        // float\n        regex: /[+-]?\\d+(?:(?:\\.\\d*)?(?:[LlDdEe][+-]?\\d+)?)\\b|\\.\\d+[LlDdEe]/\n      }, {\n        token: \"keyword.operator\",\n        regex: /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|[!$%&*+\\-~\\/^]=?/,\n        next: \"start\"\n      }, {\n        token: \"punctuation.operator\",\n        regex: /[?:,;.]/,\n        next: \"start\"\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[]/,\n        next: \"maybe_soql\",\n        merge: false\n      }, {\n        token: \"paren.lparen\",\n        regex: /[\\[({]/,\n        next: \"start\",\n        merge: false\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\])}]/,\n        merge: false\n      }],\n      maybe_soql: [{\n        regex: /\\s+/,\n        token: \"text\"\n      }, {\n        regex: /(SELECT|FIND)\\b/,\n        token: \"keyword\",\n        caseInsensitive: true,\n        next: \"soql\"\n      }, {\n        regex: \"\",\n        token: \"none\",\n        next: \"start\"\n      }],\n      soql: [{\n        regex: \"(:?ASC|BY|CATEGORY|CUBE|DATA|DESC|END|FIND|FIRST|FOR|FROM|GROUP|HAVING|IN|LAST\" + \"|LIMIT|NETWORK|NULLS|OFFSET|ORDER|REFERENCE|RETURNING|ROLLUP|SCOPE|SELECT\" + \"|SNIPPET|TRACKING|TYPEOF|UPDATE|USING|VIEW|VIEWSTAT|WHERE|WITH|AND|OR)\\\\b\",\n        token: \"keyword\",\n        caseInsensitive: true\n      }, {\n        regex: \"(:?target_length|toLabel|convertCurrency|count|Contact|Account|User|FIELDS)\\\\b\",\n        token: \"support.function\",\n        caseInsensitive: true\n      }, {\n        token: \"paren.rparen\",\n        regex: /[\\]]/,\n        next: \"start\",\n        merge: false\n      }, string(\"'\", {\n        escape: /\\\\[nb'\"\\\\]/,\n        error: /\\\\./,\n        multiline: false,\n        next: \"soql\"\n      }), string('\"', {\n        escape: /\\\\[nb'\"\\\\]/,\n        error: /\\\\./,\n        multiline: false,\n        next: \"soql\"\n      }), {\n        regex: /\\\\./,\n        token: \"character.escape\"\n      }, {\n        regex: /[\\?\\&\\|\\!\\{\\}\\[\\]\\(\\)\\^\\~\\*\\:\\\"\\'\\+\\-\\,\\.=\\\\\\/]/,\n        token: \"keyword.operator\"\n      }],\n      \"log-start\": [{\n        token: \"timestamp.invisible\",\n        regex: /^[\\d:.() ]+\\|/,\n        next: \"log-header\"\n      }, {\n        token: \"timestamp.invisible\",\n        regex: /^  (Number of|Maximum)[^:]*:/,\n        next: \"log-comment\"\n      }, {\n        token: \"invisible\",\n        regex: /^Execute Anonymous:/,\n        next: \"log-comment\"\n      }, {\n        defaultToken: \"text\"\n      }],\n      \"log-comment\": [{\n        token: \"log-comment\",\n        regex: /.*$/,\n        next: \"log-start\"\n      }],\n      \"log-header\": [{\n        token: \"timestamp.invisible\",\n        regex: /((USER_DEBUG|\\[\\d+\\]|DEBUG)\\|)+/\n      }, {\n        token: \"keyword\",\n        regex: \"(?:EXECUTION_FINISHED|EXECUTION_STARTED|CODE_UNIT_STARTED\" + \"|CUMULATIVE_LIMIT_USAGE|LIMIT_USAGE_FOR_NS\" + \"|CUMULATIVE_LIMIT_USAGE_END|CODE_UNIT_FINISHED)\"\n      }, {\n        regex: \"\",\n        next: \"log-start\"\n      }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\", [DocCommentHighlightRules.getEndRule(\"start\")]);\n    this.normalizeRules();\n  };\n\n  oop.inherits(ApexHighlightRules, TextHighlightRules);\n  exports.ApexHighlightRules = ApexHighlightRules;\n});\nace.define(\"ace/mode/folding/cstyle\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/range\", \"ace/mode/folding/fold_mode\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../../lib/oop\");\n\n  var Range = require(\"../../range\").Range;\n\n  var BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\n  var FoldMode = exports.FoldMode = function (commentRegex) {\n    if (commentRegex) {\n      this.foldingStartMarker = new RegExp(this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start));\n      this.foldingStopMarker = new RegExp(this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end));\n    }\n  };\n\n  oop.inherits(FoldMode, BaseFoldMode);\n  (function () {\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe = /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n\n    this.getFoldWidget = function (session, foldStyle, row) {\n      var line = session.getLine(row);\n\n      if (this.singleLineBlockCommentRe.test(line)) {\n        if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line)) return \"\";\n      }\n\n      var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n      if (!fw && this.startRegionRe.test(line)) return \"start\"; // lineCommentRegionStart\n\n      return fw;\n    };\n\n    this.getFoldWidgetRange = function (session, foldStyle, row, forceMultiline) {\n      var line = session.getLine(row);\n      if (this.startRegionRe.test(line)) return this.getCommentRegionBlock(session, line, row);\n      var match = line.match(this.foldingStartMarker);\n\n      if (match) {\n        var i = match.index;\n        if (match[1]) return this.openingBracketBlock(session, match[1], row, i);\n        var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n        if (range && !range.isMultiLine()) {\n          if (forceMultiline) {\n            range = this.getSectionRange(session, row);\n          } else if (foldStyle != \"all\") range = null;\n        }\n\n        return range;\n      }\n\n      if (foldStyle === \"markbegin\") return;\n      var match = line.match(this.foldingStopMarker);\n\n      if (match) {\n        var i = match.index + match[0].length;\n        if (match[1]) return this.closingBracketBlock(session, match[1], row, i);\n        return session.getCommentFoldRange(row, i, -1);\n      }\n    };\n\n    this.getSectionRange = function (session, row) {\n      var line = session.getLine(row);\n      var startIndent = line.search(/\\S/);\n      var startRow = row;\n      var startColumn = line.length;\n      row = row + 1;\n      var endRow = row;\n      var maxRow = session.getLength();\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        if (indent === -1) continue;\n        if (startIndent > indent) break;\n        var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n        if (subRange) {\n          if (subRange.start.row <= startRow) {\n            break;\n          } else if (subRange.isMultiLine()) {\n            row = subRange.end.row;\n          } else if (startIndent == indent) {\n            break;\n          }\n        }\n\n        endRow = row;\n      }\n\n      return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n\n    this.getCommentRegionBlock = function (session, line, row) {\n      var startColumn = line.search(/\\s*$/);\n      var maxRow = session.getLength();\n      var startRow = row;\n      var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n      var depth = 1;\n\n      while (++row < maxRow) {\n        line = session.getLine(row);\n        var m = re.exec(line);\n        if (!m) continue;\n        if (m[1]) depth--;else depth++;\n        if (!depth) break;\n      }\n\n      var endRow = row;\n\n      if (endRow > startRow) {\n        return new Range(startRow, startColumn, endRow, line.length);\n      }\n    };\n  }).call(FoldMode.prototype);\n});\nace.define(\"ace/mode/apex\", [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/apex_highlight_rules\", \"ace/mode/folding/cstyle\", \"ace/mode/behaviour/cstyle\"], function (require, exports, module) {\n  \"use strict\";\n\n  var oop = require(\"../lib/oop\");\n\n  var TextMode = require(\"../mode/text\").Mode;\n\n  var ApexHighlightRules = require(\"./apex_highlight_rules\").ApexHighlightRules;\n\n  var FoldMode = require(\"../mode/folding/cstyle\").FoldMode;\n\n  var CstyleBehaviour = require(\"../mode/behaviour/cstyle\").CstyleBehaviour;\n\n  function ApexMode() {\n    TextMode.call(this);\n    this.HighlightRules = ApexHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = new CstyleBehaviour();\n  }\n\n  oop.inherits(ApexMode, TextMode);\n  ApexMode.prototype.lineCommentStart = \"//\";\n  ApexMode.prototype.blockComment = {\n    start: \"/*\",\n    end: \"*/\"\n  };\n  exports.Mode = ApexMode;\n});\n\n(function () {\n  ace.require([\"ace/mode/apex\"], function (m) {\n    if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n      module.exports = m;\n    }\n  });\n})();","map":{"version":3,"sources":["/home/magoo/projects/keyrier-json/node_modules/ace-builds/src-noconflict/mode-apex.js"],"names":["ace","define","require","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","$rules","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","start","getStartRule","next","getEndRule","ApexHighlightRules","mainKeywordMapper","createKeywordMapper","keywordMapper","value","slice","string","options","multiline","escape","error","comments","type","merge","maybe_soql","soql","embedRules","normalizeRules","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CstyleBehaviour","ApexMode","HighlightRules","foldingRules","$behaviour","lineCommentStart","blockComment"],"mappings":"AAAAA,GAAG,CAACC,MAAJ,CAAW,sCAAX,EAAkD,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,+BAA5C,CAAlD,EAAgI,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACnK;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,kBAAkB,GAAGJ,OAAO,CAAC,wBAAD,CAAP,CAAkCI,kBAA3D;;AAEA,MAAIC,wBAAwB,GAAG,YAAW;AACtC,SAAKC,MAAL,GAAc;AACV,eAAU,CAAE;AACRC,QAAAA,KAAK,EAAG,iBADA;AAERC,QAAAA,KAAK,EAAG,aAFA,CAEc;;AAFd,OAAF,EAIVH,wBAAwB,CAACI,UAAzB,EAJU,EAKV;AACIC,QAAAA,YAAY,EAAG,aADnB;AAEIC,QAAAA,eAAe,EAAE;AAFrB,OALU;AADA,KAAd;AAWH,GAZD;;AAcAR,EAAAA,GAAG,CAACS,QAAJ,CAAaP,wBAAb,EAAuCD,kBAAvC;;AAEAC,EAAAA,wBAAwB,CAACI,UAAzB,GAAsC,UAASI,KAAT,EAAgB;AAClD,WAAO;AACHN,MAAAA,KAAK,EAAG,8BADL;AAEHC,MAAAA,KAAK,EAAG;AAFL,KAAP;AAIH,GALD;;AAOAH,EAAAA,wBAAwB,CAACS,YAAzB,GAAwC,UAASD,KAAT,EAAgB;AACpD,WAAO;AACHN,MAAAA,KAAK,EAAG,aADL;AACoB;AACvBC,MAAAA,KAAK,EAAG,eAFL;AAGHO,MAAAA,IAAI,EAAIF;AAHL,KAAP;AAKH,GAND;;AAQAR,EAAAA,wBAAwB,CAACW,UAAzB,GAAsC,UAAUH,KAAV,EAAiB;AACnD,WAAO;AACHN,MAAAA,KAAK,EAAG,aADL;AACoB;AACvBC,MAAAA,KAAK,EAAG,QAFL;AAGHO,MAAAA,IAAI,EAAIF;AAHL,KAAP;AAKH,GAND;;AASAZ,EAAAA,OAAO,CAACI,wBAAR,GAAmCA,wBAAnC;AAEC,CAhDD;AAkDAP,GAAG,CAACC,MAAJ,CAAW,+BAAX,EAA2C,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,+BAA5C,EAA4E,sCAA5E,CAA3C,EAAgK,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACnM;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAII,kBAAkB,GAAGJ,OAAO,CAAC,8BAAD,CAAP,CAAwCI,kBAAjE;;AACA,MAAIC,wBAAwB,GAAGL,OAAO,CAAC,qCAAD,CAAP,CAA+CK,wBAA9E;;AAEA,MAAIY,kBAAkB,GAAG,YAAW;AAChC,QAAIC,iBAAiB,GAAG,KAAKC,mBAAL,CAAyB;AAC7C,2BAAqB,0EACd,kGADc,GAEd,oFAFc,GAGd,wBAJsC;AAK7C,iBAAW,4FACJ,6EADI,GAEJ,8EAFI,GAGJ,uEAHI,GAIJ,0FAJI,GAKJ,yDALI,GAMJ,iFANI,GAOJ,oFAPI,GAQJ,4CAbsC;AAc7C,sBACI,uHAfyC;AAgB7C,2BACI,oFAjByC;AAkB7C,0BACI;AAnByC,KAAzB,EAoBrB,YApBqB,EAoBP,IApBO,CAAxB;;AAqBA,aAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,UAAIA,KAAK,CAACC,KAAN,CAAY,CAAC,CAAb,KAAmB,KAAvB,EAA8B,OAAO,kBAAP;AAC9B,aAAOJ,iBAAiB,CAACG,KAAD,CAAxB;AACH;;AAED,aAASE,MAAT,CAAgBV,KAAhB,EAAuBW,OAAvB,EAAgC;AAC5B,aAAO;AACHhB,QAAAA,KAAK,EAAEK,KAAK,IAAIW,OAAO,CAACC,SAAR,GAAoB,EAApB,GAAyB,OAA7B,CADT;AAEHlB,QAAAA,KAAK,EAAE,cAFJ;AAGHQ,QAAAA,IAAI,EAAE,CAAC;AACHP,UAAAA,KAAK,EAAEgB,OAAO,CAACE,MADZ;AAEHnB,UAAAA,KAAK,EAAE;AAFJ,SAAD,EAGH;AACCC,UAAAA,KAAK,EAAEgB,OAAO,CAACG,KADhB;AAECpB,UAAAA,KAAK,EAAE;AAFR,SAHG,EAMH;AACCC,UAAAA,KAAK,EAAEK,KAAK,IAAIW,OAAO,CAACC,SAAR,GAAoB,EAApB,GAAyB,IAA7B,CADb;AAEClB,UAAAA,KAAK,EAAE,YAFR;AAGCQ,UAAAA,IAAI,EAAES,OAAO,CAACT,IAAR,IAAgB;AAHvB,SANG,EAUH;AACCL,UAAAA,YAAY,EAAE;AADf,SAVG;AAHH,OAAP;AAiBH;;AAED,aAASkB,QAAT,GAAoB;AAChB,aAAO,CAAC;AACArB,QAAAA,KAAK,EAAG,SADR;AAEAC,QAAAA,KAAK,EAAG,aAFR;AAGAO,QAAAA,IAAI,EAAG,CACHV,wBAAwB,CAACI,UAAzB,EADG,EAEH;AAACF,UAAAA,KAAK,EAAG,SAAT;AAAoBC,UAAAA,KAAK,EAAG,KAA5B;AAAmCO,UAAAA,IAAI,EAAG;AAA1C,SAFG,EAGH;AAACL,UAAAA,YAAY,EAAG,SAAhB;AAA2BC,UAAAA,eAAe,EAAE;AAA5C,SAHG;AAHP,OAAD,EASHN,wBAAwB,CAACS,YAAzB,CAAsC,WAAtC,CATG,EAUH;AACIP,QAAAA,KAAK,EAAG,SADZ;AACuB;AACnBC,QAAAA,KAAK,EAAG,MAFZ;AAGIO,QAAAA,IAAI,EAAG,CACHV,wBAAwB,CAACI,UAAzB,EADG,EAEH;AAACF,UAAAA,KAAK,EAAG,SAAT;AAAoBC,UAAAA,KAAK,EAAG,QAA5B;AAAsCO,UAAAA,IAAI,EAAG;AAA7C,SAFG,EAGH;AAACL,UAAAA,YAAY,EAAG,SAAhB;AAA2BC,UAAAA,eAAe,EAAE;AAA5C,SAHG;AAHX,OAVG,CAAP;AAoBH;;AAED,SAAKL,MAAL,GAAc;AACVO,MAAAA,KAAK,EAAE,CACHU,MAAM,CAAC,GAAD,EAAM;AACRG,QAAAA,MAAM,EAAE,YADA;AAERC,QAAAA,KAAK,EAAE,KAFC;AAGRF,QAAAA,SAAS,EAAE;AAHH,OAAN,CADH,EAMHG,QAAQ,CAAC,GAAD,CANL,EAOH;AACIC,QAAAA,IAAI,EAAE,YADV;AAEItB,QAAAA,KAAK,EAAE,CACH,mBADG,EAEH,4BAFG,EAGH,mBAHG,EAIH,+BAJG,EAKH,mBALG,EAMH,6BANG,CAFX;AAUIC,QAAAA,KAAK,EAAE;AAVX,OAPG,EAkBA;AACEA,QAAAA,KAAK,EAAE,uCADT;AAEED,QAAAA,KAAK,EAAE;AAFT,OAlBA,EAsBH;AACIC,QAAAA,KAAK,EAAE,sCADX;AAEID,QAAAA,KAAK,EAAEa;AAFX,OAtBG,EA0BH;AACIZ,QAAAA,KAAK,EAAE,KADX;AAEID,QAAAA,KAAK,EAAE;AAFX,OA1BG,EA6BA;AACCA,QAAAA,KAAK,EAAG,kBADT;AAC6B;AAC5BC,QAAAA,KAAK,EAAG;AAFT,OA7BA,EAgCA;AACCD,QAAAA,KAAK,EAAG,kBADT;AAECC,QAAAA,KAAK,EAAG,mFAFT;AAGCO,QAAAA,IAAI,EAAI;AAHT,OAhCA,EAoCA;AACCR,QAAAA,KAAK,EAAG,sBADT;AAECC,QAAAA,KAAK,EAAG,SAFT;AAGCO,QAAAA,IAAI,EAAI;AAHT,OApCA,EAwCA;AACCR,QAAAA,KAAK,EAAG,cADT;AAECC,QAAAA,KAAK,EAAG,MAFT;AAGCO,QAAAA,IAAI,EAAI,YAHT;AAICe,QAAAA,KAAK,EAAG;AAJT,OAxCA,EA6CA;AACCvB,QAAAA,KAAK,EAAG,cADT;AAECC,QAAAA,KAAK,EAAG,QAFT;AAGCO,QAAAA,IAAI,EAAI,OAHT;AAICe,QAAAA,KAAK,EAAG;AAJT,OA7CA,EAkDA;AACCvB,QAAAA,KAAK,EAAG,cADT;AAECC,QAAAA,KAAK,EAAG,QAFT;AAGCsB,QAAAA,KAAK,EAAG;AAHT,OAlDA,CADG;AAyDVC,MAAAA,UAAU,EAAE,CAAC;AACTvB,QAAAA,KAAK,EAAE,KADE;AAETD,QAAAA,KAAK,EAAE;AAFE,OAAD,EAGT;AACCC,QAAAA,KAAK,EAAE,iBADR;AAECD,QAAAA,KAAK,EAAE,SAFR;AAGCI,QAAAA,eAAe,EAAE,IAHlB;AAICI,QAAAA,IAAI,EAAE;AAJP,OAHS,EAQT;AACCP,QAAAA,KAAK,EAAE,EADR;AAECD,QAAAA,KAAK,EAAE,MAFR;AAGCQ,QAAAA,IAAI,EAAE;AAHP,OARS,CAzDF;AAsEViB,MAAAA,IAAI,EAAE,CAAC;AACHxB,QAAAA,KAAK,EAAE,mFACD,2EADC,GAED,2EAHH;AAIHD,QAAAA,KAAK,EAAE,SAJJ;AAKHI,QAAAA,eAAe,EAAE;AALd,OAAD,EAMH;AACCH,QAAAA,KAAK,EAAE,gFADR;AAECD,QAAAA,KAAK,EAAE,kBAFR;AAGCI,QAAAA,eAAe,EAAE;AAHlB,OANG,EAUH;AACCJ,QAAAA,KAAK,EAAG,cADT;AAECC,QAAAA,KAAK,EAAG,MAFT;AAGCO,QAAAA,IAAI,EAAI,OAHT;AAICe,QAAAA,KAAK,EAAG;AAJT,OAVG,EAgBNP,MAAM,CAAC,GAAD,EAAM;AACRG,QAAAA,MAAM,EAAE,YADA;AAERC,QAAAA,KAAK,EAAE,KAFC;AAGRF,QAAAA,SAAS,EAAE,KAHH;AAIRV,QAAAA,IAAI,EAAE;AAJE,OAAN,CAhBA,EAsBNQ,MAAM,CAAC,GAAD,EAAM;AACRG,QAAAA,MAAM,EAAE,YADA;AAERC,QAAAA,KAAK,EAAE,KAFC;AAGRF,QAAAA,SAAS,EAAE,KAHH;AAIRV,QAAAA,IAAI,EAAE;AAJE,OAAN,CAtBA,EA4BN;AACIP,QAAAA,KAAK,EAAE,KADX;AAEID,QAAAA,KAAK,EAAE;AAFX,OA5BM,EAgCN;AACIC,QAAAA,KAAK,EAAG,iDADZ;AAEID,QAAAA,KAAK,EAAG;AAFZ,OAhCM,CAtEI;AA2GV,mBAAc,CAAE;AACZA,QAAAA,KAAK,EAAG,qBADI;AAEZC,QAAAA,KAAK,EAAG,eAFI;AAGZO,QAAAA,IAAI,EAAE;AAHM,OAAF,EAIV;AACAR,QAAAA,KAAK,EAAG,qBADR;AAEAC,QAAAA,KAAK,EAAG,8BAFR;AAGAO,QAAAA,IAAI,EAAE;AAHN,OAJU,EAQX;AACCR,QAAAA,KAAK,EAAG,WADT;AAECC,QAAAA,KAAK,EAAG,qBAFT;AAGCO,QAAAA,IAAI,EAAE;AAHP,OARW,EAYV;AACAL,QAAAA,YAAY,EAAE;AADd,OAZU,CA3GJ;AA0HV,qBAAe,CAAC;AACZH,QAAAA,KAAK,EAAG,aADI;AAEZC,QAAAA,KAAK,EAAG,KAFI;AAGZO,QAAAA,IAAI,EAAE;AAHM,OAAD,CA1HL;AA+HV,oBAAc,CAAC;AACXR,QAAAA,KAAK,EAAG,qBADG;AAEXC,QAAAA,KAAK,EAAG;AAFG,OAAD,EAId;AACID,QAAAA,KAAK,EAAG,SADZ;AAEIC,QAAAA,KAAK,EAAE,8DACD,4CADC,GAED;AAJV,OAJc,EASX;AACCA,QAAAA,KAAK,EAAE,EADR;AAECO,QAAAA,IAAI,EAAE;AAFP,OATW;AA/HJ,KAAd;AA6IA,SAAKkB,UAAL,CAAgB5B,wBAAhB,EAA0C,MAA1C,EACI,CAAEA,wBAAwB,CAACW,UAAzB,CAAoC,OAApC,CAAF,CADJ;AAIA,SAAKkB,cAAL;AACH,GAxND;;AA2NA/B,EAAAA,GAAG,CAACS,QAAJ,CAAaK,kBAAb,EAAiCb,kBAAjC;AAEAH,EAAAA,OAAO,CAACgB,kBAAR,GAA6BA,kBAA7B;AACC,CArOD;AAuOAnB,GAAG,CAACC,MAAJ,CAAW,yBAAX,EAAqC,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,WAA5C,EAAwD,4BAAxD,CAArC,EAA4H,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAC/J;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,eAAD,CAAjB;;AACA,MAAImC,KAAK,GAAGnC,OAAO,CAAC,aAAD,CAAP,CAAuBmC,KAAnC;;AACA,MAAIC,YAAY,GAAGpC,OAAO,CAAC,aAAD,CAAP,CAAuBqC,QAA1C;;AAEA,MAAIA,QAAQ,GAAGpC,OAAO,CAACoC,QAAR,GAAmB,UAASC,YAAT,EAAuB;AACrD,QAAIA,YAAJ,EAAkB;AACd,WAAKC,kBAAL,GAA0B,IAAIC,MAAJ,CACtB,KAAKD,kBAAL,CAAwBE,MAAxB,CAA+BC,OAA/B,CAAuC,WAAvC,EAAoD,MAAMJ,YAAY,CAACzB,KAAvE,CADsB,CAA1B;AAGA,WAAK8B,iBAAL,GAAyB,IAAIH,MAAJ,CACrB,KAAKG,iBAAL,CAAuBF,MAAvB,CAA8BC,OAA9B,CAAsC,WAAtC,EAAmD,MAAMJ,YAAY,CAACM,GAAtE,CADqB,CAAzB;AAGH;AACJ,GATD;;AAUAzC,EAAAA,GAAG,CAACS,QAAJ,CAAayB,QAAb,EAAuBD,YAAvB;AAEA,GAAC,YAAW;AAER,SAAKG,kBAAL,GAA0B,kCAA1B;AACA,SAAKI,iBAAL,GAAyB,sCAAzB;AACA,SAAKE,wBAAL,GAA+B,sBAA/B;AACA,SAAKC,wBAAL,GAAgC,0BAAhC;AACA,SAAKC,aAAL,GAAqB,2BAArB;AACA,SAAKC,kBAAL,GAA0B,KAAKC,aAA/B;;AACA,SAAKA,aAAL,GAAqB,UAASC,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkC;AACnD,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;;AAEA,UAAI,KAAKP,wBAAL,CAA8BU,IAA9B,CAAmCF,IAAnC,CAAJ,EAA8C;AAC1C,YAAI,CAAC,KAAKN,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAD,IAAkC,CAAC,KAAKP,wBAAL,CAA8BS,IAA9B,CAAmCF,IAAnC,CAAvC,EACI,OAAO,EAAP;AACP;;AAED,UAAIG,EAAE,GAAG,KAAKR,kBAAL,CAAwBE,OAAxB,EAAiCC,SAAjC,EAA4CC,GAA5C,CAAT;;AAEA,UAAI,CAACI,EAAD,IAAO,KAAKT,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAX,EACI,OAAO,OAAP,CAX+C,CAW/B;;AAEpB,aAAOG,EAAP;AACH,KAdD;;AAgBA,SAAKC,kBAAL,GAA0B,UAASP,OAAT,EAAkBC,SAAlB,EAA6BC,GAA7B,EAAkCM,cAAlC,EAAkD;AACxE,UAAIL,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AAEA,UAAI,KAAKL,aAAL,CAAmBQ,IAAnB,CAAwBF,IAAxB,CAAJ,EACI,OAAO,KAAKM,qBAAL,CAA2BT,OAA3B,EAAoCG,IAApC,EAA0CD,GAA1C,CAAP;AAEJ,UAAIQ,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAKrB,kBAAhB,CAAZ;;AACA,UAAIqB,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAd;AAEA,YAAIF,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKG,mBAAL,CAAyBb,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,YAAIG,KAAK,GAAGd,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAC,GAAGD,KAAK,CAAC,CAAD,CAAL,CAASM,MAA9C,EAAsD,CAAtD,CAAZ;;AAEA,YAAIF,KAAK,IAAI,CAACA,KAAK,CAACG,WAAN,EAAd,EAAmC;AAC/B,cAAIT,cAAJ,EAAoB;AAChBM,YAAAA,KAAK,GAAG,KAAKI,eAAL,CAAqBlB,OAArB,EAA8BE,GAA9B,CAAR;AACH,WAFD,MAEO,IAAID,SAAS,IAAI,KAAjB,EACHa,KAAK,GAAG,IAAR;AACP;;AAED,eAAOA,KAAP;AACH;;AAED,UAAIb,SAAS,KAAK,WAAlB,EACI;AAEJ,UAAIS,KAAK,GAAGP,IAAI,CAACO,KAAL,CAAW,KAAKjB,iBAAhB,CAAZ;;AACA,UAAIiB,KAAJ,EAAW;AACP,YAAIC,CAAC,GAAGD,KAAK,CAACE,KAAN,GAAcF,KAAK,CAAC,CAAD,CAAL,CAASM,MAA/B;AAEA,YAAIN,KAAK,CAAC,CAAD,CAAT,EACI,OAAO,KAAKS,mBAAL,CAAyBnB,OAAzB,EAAkCU,KAAK,CAAC,CAAD,CAAvC,EAA4CR,GAA5C,EAAiDS,CAAjD,CAAP;AAEJ,eAAOX,OAAO,CAACe,mBAAR,CAA4Bb,GAA5B,EAAiCS,CAAjC,EAAoC,CAAC,CAArC,CAAP;AACH;AACJ,KArCD;;AAuCA,SAAKO,eAAL,GAAuB,UAASlB,OAAT,EAAkBE,GAAlB,EAAuB;AAC1C,UAAIC,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAX;AACA,UAAIkB,WAAW,GAAGjB,IAAI,CAACkB,MAAL,CAAY,IAAZ,CAAlB;AACA,UAAIC,QAAQ,GAAGpB,GAAf;AACA,UAAIqB,WAAW,GAAGpB,IAAI,CAACa,MAAvB;AACAd,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAAZ;AACA,UAAIsB,MAAM,GAAGtB,GAAb;AACA,UAAIuB,MAAM,GAAGzB,OAAO,CAAC0B,SAAR,EAAb;;AACA,aAAO,EAAExB,GAAF,GAAQuB,MAAf,EAAuB;AACnBtB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAIyB,MAAM,GAAGxB,IAAI,CAACkB,MAAL,CAAY,IAAZ,CAAb;AACA,YAAIM,MAAM,KAAK,CAAC,CAAhB,EACI;AACJ,YAAKP,WAAW,GAAGO,MAAnB,EACI;AACJ,YAAIC,QAAQ,GAAG,KAAKrB,kBAAL,CAAwBP,OAAxB,EAAiC,KAAjC,EAAwCE,GAAxC,CAAf;;AAEA,YAAI0B,QAAJ,EAAc;AACV,cAAIA,QAAQ,CAACjE,KAAT,CAAeuC,GAAf,IAAsBoB,QAA1B,EAAoC;AAChC;AACH,WAFD,MAEO,IAAIM,QAAQ,CAACX,WAAT,EAAJ,EAA4B;AAC/Bf,YAAAA,GAAG,GAAG0B,QAAQ,CAAClC,GAAT,CAAaQ,GAAnB;AACH,WAFM,MAEA,IAAIkB,WAAW,IAAIO,MAAnB,EAA2B;AAC9B;AACH;AACJ;;AACDH,QAAAA,MAAM,GAAGtB,GAAT;AACH;;AAED,aAAO,IAAIjB,KAAJ,CAAUqC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCxB,OAAO,CAACI,OAAR,CAAgBoB,MAAhB,EAAwBR,MAAjE,CAAP;AACH,KA9BD;;AA+BA,SAAKP,qBAAL,GAA6B,UAAST,OAAT,EAAkBG,IAAlB,EAAwBD,GAAxB,EAA6B;AACtD,UAAIqB,WAAW,GAAGpB,IAAI,CAACkB,MAAL,CAAY,MAAZ,CAAlB;AACA,UAAII,MAAM,GAAGzB,OAAO,CAAC0B,SAAR,EAAb;AACA,UAAIJ,QAAQ,GAAGpB,GAAf;AAEA,UAAI2B,EAAE,GAAG,sCAAT;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,aAAO,EAAE5B,GAAF,GAAQuB,MAAf,EAAuB;AACnBtB,QAAAA,IAAI,GAAGH,OAAO,CAACI,OAAR,CAAgBF,GAAhB,CAAP;AACA,YAAI6B,CAAC,GAAGF,EAAE,CAACG,IAAH,CAAQ7B,IAAR,CAAR;AACA,YAAI,CAAC4B,CAAL,EAAQ;AACR,YAAIA,CAAC,CAAC,CAAD,CAAL,EAAUD,KAAK,GAAf,KACKA,KAAK;AAEV,YAAI,CAACA,KAAL,EAAY;AACf;;AAED,UAAIN,MAAM,GAAGtB,GAAb;;AACA,UAAIsB,MAAM,GAAGF,QAAb,EAAuB;AACnB,eAAO,IAAIrC,KAAJ,CAAUqC,QAAV,EAAoBC,WAApB,EAAiCC,MAAjC,EAAyCrB,IAAI,CAACa,MAA9C,CAAP;AACH;AACJ,KArBD;AAuBH,GArHD,EAqHGiB,IArHH,CAqHQ9C,QAAQ,CAAC+C,SArHjB;AAuHC,CA1ID;AA4IAtF,GAAG,CAACC,MAAJ,CAAW,eAAX,EAA2B,CAAC,SAAD,EAAW,SAAX,EAAqB,QAArB,EAA8B,aAA9B,EAA4C,eAA5C,EAA4D,+BAA5D,EAA4F,yBAA5F,EAAsH,2BAAtH,CAA3B,EAA+K,UAASC,OAAT,EAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AAClN;;AAEA,MAAIC,GAAG,GAAGH,OAAO,CAAC,YAAD,CAAjB;;AACA,MAAIqF,QAAQ,GAAGrF,OAAO,CAAC,cAAD,CAAP,CAAwBsF,IAAvC;;AACA,MAAIrE,kBAAkB,GAAGjB,OAAO,CAAC,wBAAD,CAAP,CAAkCiB,kBAA3D;;AACA,MAAIoB,QAAQ,GAAGrC,OAAO,CAAC,wBAAD,CAAP,CAAkCqC,QAAjD;;AACA,MAAIkD,eAAe,GAAGvF,OAAO,CAAC,0BAAD,CAAP,CAAoCuF,eAA1D;;AAEA,WAASC,QAAT,GAAoB;AAChBH,IAAAA,QAAQ,CAACF,IAAT,CAAc,IAAd;AAEA,SAAKM,cAAL,GAAsBxE,kBAAtB;AACA,SAAKyE,YAAL,GAAoB,IAAIrD,QAAJ,EAApB;AACA,SAAKsD,UAAL,GAAkB,IAAIJ,eAAJ,EAAlB;AACH;;AAEDpF,EAAAA,GAAG,CAACS,QAAJ,CAAa4E,QAAb,EAAuBH,QAAvB;AAEAG,EAAAA,QAAQ,CAACJ,SAAT,CAAmBQ,gBAAnB,GAAsC,IAAtC;AAEAJ,EAAAA,QAAQ,CAACJ,SAAT,CAAmBS,YAAnB,GAAkC;AAC9BhF,IAAAA,KAAK,EAAE,IADuB;AAE9B+B,IAAAA,GAAG,EAAE;AAFyB,GAAlC;AAKA3C,EAAAA,OAAO,CAACqF,IAAR,GAAeE,QAAf;AAEC,CA5BD;;AA4BmB,CAAC,YAAW;AACX1F,EAAAA,GAAG,CAACE,OAAJ,CAAY,CAAC,eAAD,CAAZ,EAA+B,UAASiF,CAAT,EAAY;AACvC,QAAI,OAAO/E,MAAP,IAAiB,QAAjB,IAA6B,OAAOD,OAAP,IAAkB,QAA/C,IAA2DC,MAA/D,EAAuE;AACnEA,MAAAA,MAAM,CAACD,OAAP,GAAiBgF,CAAjB;AACH;AACJ,GAJD;AAKH,CANE","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/apex_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\",\"ace/mode/doc_comment_highlight_rules\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextHighlightRules = require(\"../mode/text_highlight_rules\").TextHighlightRules;\nvar DocCommentHighlightRules = require(\"../mode/doc_comment_highlight_rules\").DocCommentHighlightRules;\n\nvar ApexHighlightRules = function() {\n    var mainKeywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"activate|any|autonomous|begin|bigdecimal|byte|cast|char|collect|const\"\n             + \"|end|exit|export|float|goto|group|having|hint|import|inner|into|join|loop|number|object|of|outer\"\n             + \"|parallel|pragma|retrieve|returning|search|short|stat|synchronized|then|this_month\"\n             + \"|transaction|type|when\",\n        \"keyword\": \"private|protected|public|native|synchronized|abstract|threadsafe|transient|static|final\"\n             + \"|and|array|as|asc|break|bulk|by|catch|class|commit|continue|convertcurrency\"\n             + \"|delete|desc|do|else|enum|extends|false|final|finally|for|from|future|global\"\n             + \"|if|implements|in|insert|instanceof|interface|last_90_days|last_month\"\n             + \"|last_n_days|last_week|like|limit|list|map|merge|new|next_90_days|next_month|next_n_days\"\n             + \"|next_week|not|null|nulls|on|or|override|package|return\"\n             + \"|rollback|savepoint|select|set|sort|super|testmethod|this|this_week|throw|today\"\n             + \"|tolabel|tomorrow|trigger|true|try|undelete|update|upsert|using|virtual|webservice\"\n             + \"|where|while|yesterday|switch|case|default\",\n        \"storage.type\":\n            \"def|boolean|byte|char|short|int|float|pblob|date|datetime|decimal|double|id|integer|long|string|time|void|blob|Object\",\n        \"constant.language\":\n            \"true|false|null|after|before|count|excludes|first|includes|last|order|sharing|with\",\n        \"support.function\":\n            \"system|apex|label|apexpages|userinfo|schema\"\n    }, \"identifier\", true);\n    function keywordMapper(value) {\n        if (value.slice(-3) == \"__c\") return \"support.function\";\n        return mainKeywordMapper(value);\n    }\n    \n    function string(start, options) {\n        return {\n            regex: start + (options.multiline ? \"\" : \"(?=.)\"),\n            token: \"string.start\",\n            next: [{\n                regex: options.escape,\n                token: \"character.escape\"\n            }, {\n                regex: options.error,\n                token: \"error.invalid\"\n            }, {\n                regex: start + (options.multiline ? \"\" : \"|$\"),\n                token: \"string.end\",\n                next: options.next || \"start\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        };\n    }\n    \n    function comments() {\n        return [{\n                token : \"comment\",\n                regex : \"\\\\/\\\\/(?=.)\",\n                next : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment\", regex : \"$|^\", next : \"start\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : /\\/\\*/,\n                next : [\n                    DocCommentHighlightRules.getTagRule(),\n                    {token : \"comment\", regex : \"\\\\*\\\\/\", next : \"start\"},\n                    {defaultToken : \"comment\", caseInsensitive: true}\n                ]\n            }\n        ];\n    }\n    \n    this.$rules = {\n        start: [\n            string(\"'\", {\n                escape: /\\\\[nb'\"\\\\]/,\n                error: /\\\\./,\n                multiline: false\n            }),\n            comments(\"c\"),\n            {\n                type: \"decoration\",\n                token: [\n                    \"meta.package.apex\",\n                    \"keyword.other.package.apex\",\n                    \"meta.package.apex\",\n                    \"storage.modifier.package.apex\",\n                    \"meta.package.apex\",\n                    \"punctuation.terminator.apex\"\n                ],\n                regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*)((?:;)?))?/\n            }, {\n                 regex: /@[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                 token: \"constant.language\"\n            },\n            {\n                regex: /[a-zA-Z_$][a-zA-Z_$\\d\\u0080-\\ufffe]*/,\n                token: keywordMapper\n            },  \n            {\n                regex: \"`#%\",\n                token: \"error.invalid\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /[+-]?\\d+(?:(?:\\.\\d*)?(?:[LlDdEe][+-]?\\d+)?)\\b|\\.\\d+[LlDdEe]/\n            }, {\n                token : \"keyword.operator\",\n                regex : /--|\\+\\+|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\|\\||\\?\\:|[!$%&*+\\-~\\/^]=?/,\n                next  : \"start\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : /[?:,;.]/,\n                next  : \"start\"\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[]/,\n                next  : \"maybe_soql\",\n                merge : false\n            }, {\n                token : \"paren.lparen\",\n                regex : /[\\[({]/,\n                next  : \"start\",\n                merge : false\n            }, {\n                token : \"paren.rparen\",\n                regex : /[\\])}]/,\n                merge : false\n            } \n        ], \n        maybe_soql: [{\n            regex: /\\s+/,\n            token: \"text\"\n        }, {\n            regex: /(SELECT|FIND)\\b/,\n            token: \"keyword\",\n            caseInsensitive: true,\n            next: \"soql\"\n        }, {\n            regex: \"\",\n            token: \"none\",\n            next: \"start\"\n        }],\n        soql: [{\n            regex: \"(:?ASC|BY|CATEGORY|CUBE|DATA|DESC|END|FIND|FIRST|FOR|FROM|GROUP|HAVING|IN|LAST\"\n                + \"|LIMIT|NETWORK|NULLS|OFFSET|ORDER|REFERENCE|RETURNING|ROLLUP|SCOPE|SELECT\"\n                + \"|SNIPPET|TRACKING|TYPEOF|UPDATE|USING|VIEW|VIEWSTAT|WHERE|WITH|AND|OR)\\\\b\",\n            token: \"keyword\",\n            caseInsensitive: true\n        }, {\n            regex: \"(:?target_length|toLabel|convertCurrency|count|Contact|Account|User|FIELDS)\\\\b\",\n            token: \"support.function\",\n            caseInsensitive: true\n        }, {\n            token : \"paren.rparen\",\n            regex : /[\\]]/,\n            next  : \"start\",\n            merge : false\n        }, \n        string(\"'\", {\n            escape: /\\\\[nb'\"\\\\]/,\n            error: /\\\\./,\n            multiline: false,\n            next: \"soql\"\n        }),\n        string('\"', {\n            escape: /\\\\[nb'\"\\\\]/,\n            error: /\\\\./,\n            multiline: false,\n            next: \"soql\"\n        }),\n        {\n            regex: /\\\\./,\n            token: \"character.escape\"\n        },\n        {\n            regex : /[\\?\\&\\|\\!\\{\\}\\[\\]\\(\\)\\^\\~\\*\\:\\\"\\'\\+\\-\\,\\.=\\\\\\/]/,\n            token : \"keyword.operator\"\n        }],\n        \n        \"log-start\" : [ {\n            token : \"timestamp.invisible\",\n            regex : /^[\\d:.() ]+\\|/, \n            next: \"log-header\"\n        },  {\n            token : \"timestamp.invisible\",\n            regex : /^  (Number of|Maximum)[^:]*:/,\n            next: \"log-comment\"\n        }, {\n            token : \"invisible\",\n            regex : /^Execute Anonymous:/,\n            next: \"log-comment\"\n        },  {\n            defaultToken: \"text\"\n        }],\n        \"log-comment\": [{\n            token : \"log-comment\",\n            regex : /.*$/,\n            next: \"log-start\"\n        }],\n        \"log-header\": [{\n            token : \"timestamp.invisible\",\n            regex : /((USER_DEBUG|\\[\\d+\\]|DEBUG)\\|)+/\n        },\n        {\n            token : \"keyword\",\n            regex: \"(?:EXECUTION_FINISHED|EXECUTION_STARTED|CODE_UNIT_STARTED\"\n                + \"|CUMULATIVE_LIMIT_USAGE|LIMIT_USAGE_FOR_NS\"\n                + \"|CUMULATIVE_LIMIT_USAGE_END|CODE_UNIT_FINISHED)\"\n        }, {\n            regex: \"\",\n            next: \"log-start\"\n        }]\n    };\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n        \n\n    this.normalizeRules();\n};\n\n\noop.inherits(ApexHighlightRules, TextHighlightRules);\n\nexports.ApexHighlightRules = ApexHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../../lib/oop\");\nvar Range = require(\"../../range\").Range;\nvar BaseFoldMode = require(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/apex\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/apex_highlight_rules\",\"ace/mode/folding/cstyle\",\"ace/mode/behaviour/cstyle\"], function(require, exports, module) {\n\"use strict\";\n\nvar oop = require(\"../lib/oop\");\nvar TextMode = require(\"../mode/text\").Mode;\nvar ApexHighlightRules = require(\"./apex_highlight_rules\").ApexHighlightRules;\nvar FoldMode = require(\"../mode/folding/cstyle\").FoldMode;\nvar CstyleBehaviour = require(\"../mode/behaviour/cstyle\").CstyleBehaviour;\n\nfunction ApexMode() {\n    TextMode.call(this);\n\n    this.HighlightRules = ApexHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = new CstyleBehaviour();\n}\n\noop.inherits(ApexMode, TextMode);\n\nApexMode.prototype.lineCommentStart = \"//\";\n\nApexMode.prototype.blockComment = {\n    start: \"/*\",\n    end: \"*/\"\n};\n\nexports.Mode = ApexMode;\n\n});                (function() {\n                    ace.require([\"ace/mode/apex\"], function(m) {\n                        if (typeof module == \"object\" && typeof exports == \"object\" && module) {\n                            module.exports = m;\n                        }\n                    });\n                })();\n            "]},"metadata":{},"sourceType":"script"}